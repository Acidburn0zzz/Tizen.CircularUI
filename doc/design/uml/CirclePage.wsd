@startuml CirclePage.png

package "Xamarin.Forms" {
    class ContentPage
}

package "Extension.Wearable" {
    class RotaryEventHandler
    class RotaryEventArgs {
        IsClockwise: bool
    }
    interface IRotaryFocusable {
        --events--
        Rotated : RotaryEventHandler
    }
    class CirclePage {
        --BindableProperty--
        {static} +ActionButtonProperty
        {static} +RotaryFocusTargetNameProperty
        {static} +RotaryFocusObjectProperty
        --Property--
        +RotaryFocusTargetName: string
        +RotaryFocusObject: IRotaryFocusable
        +CircleSurfaceItems: IList<ICircleSurfaceItem>
        +ActionButton: MenuItem
    }
    interface ICircleSurfaceItem {
        IsVisible: bool
        IsEnabled: bool
    }

    CirclePage -u-|> ContentPage
    CirclePage *-d- IRotaryFocusable
    CirclePage *-d- ICircleSurfaceItem
    IRotaryFocusable *-- RotaryEventHandler
    RotaryEventHandler *-- RotaryEventArgs
}

package "Extension.Wearable.Renderer" {
    class CirclePageRenderer
    CirclePageRenderer .l. CirclePage
}

package "ElmSharp.Wearable" {
    class CircleSurface
    CirclePageRenderer *.. CircleSurface
}

package "ElmSharp" {

    class Layout

    CirclePageRenderer *.. Layout
}

@enduml

@startuml CircleDateTimeSelector.png

package "Xamarin.Forms" {
    class View
}

package "Extension.Wearable" {
    interface IRotaryFocusable
    class CircleDateTimeSelector {
        --BindableProperty--
        {static} +ColorProperty
        {static} +ValueTypeProperty
        {static} +DateTimeProperty
        {static} +MaximumDateProperty
        {static} +MinimumDateProperty
        --Property--
        +Color: Color
        +ValueType: DateTimeType
        +DateTime: DateTime
        +MaximumDate: DateTime
        +MinimumDate: DateTime
        --Method--
        + SetFieldLimit(DateTimeFieldType type, int minimum, int maximum)
        + SetFieldVisibility(DateTimeFieldType type, bool visible)
    }
    enum DateTimeType {
        Time,
        Date
    }

    enum DateTimeFieldType {
        Year,
        Month,
        Date,
        Hour,
        Minute,
        AmPm
    }

    CircleDateTimeSelector -u-|> View
    CircleDateTimeSelector -u-|> IRotaryFocusable
    CircleDateTimeSelector *-d- DateTimeType
    CircleDateTimeSelector *-d- DateTimeFieldType
}

package "Extension.Wearable.Renderer" {
    class CircleDateTimeSelectorRenderer
    CircleDateTimeSelectorRenderer .u. CircleDateTimeSelector
}

package "ElmSharp.Wearable" {
    class CircleDatetimeSelector
    CircleDateTimeSelectorRenderer *.d. CircleDatetimeSelector
}
@enduml

@startuml CircleDateTimeSelector_SceneGraph.png
!include CirclePage_SceneGraph.wsd

node CircleDatetimeSelector #87ceeb [
    CircleDatetimeSelector
    "datepicker/circle" or "timepicker/circle"
]

ContentArea --> CircleDatetimeSelector
CircleSurface --> CircleDatetimeSelector

@enduml

@startuml CircleListView.png

package "Xamarin.Forms" {
    class ListView
}

package "Extension.Wearable" {
    interface IRotaryFocusable
    class CircleListView

    CircleListView -u-|> ListView
    CircleListView -u-|> IRotaryFocusable
}

package "Extension.Wearable.Renderer" {
    class CircleListViewRenderer
    CircleListViewRenderer .u. CircleListView
}

package "ElmSharp.Wearable" {
    class CircleGenList
    CircleListViewRenderer *.d. CircleGenList
}
@enduml

@startuml CircleListView_SceneGraph.png

!include CirclePage_SceneGraph.wsd

node CircleGenList #87ceeb [
    CircleGenList
]
ContentArea --> CircleGenList
CircleSurface --> CircleGenList

@enduml

@startuml CircleProgressBarSurfaceItem.png

package "Extension.Wearable" {
    interface ICircleSurfaceItem {
        IsVisible: bool
    }
    class CircleProgressBarSurfaceItem {
        --BindableProperty--
        +BackgroundAngleProperty
        +BackgroundAngleOffsetProperty
        +BackgroundColorProperty
        +BackgroundLineWidthProperty
        +BackgroundRadiusProperty

        +BarAngleProperty
        +BarAngleOffsetProperty
        +BarAngleMaximumProperty
        +BarAngleMinimumProperty
        +BarColorProperty
        +BarLineWidthProperty
        +BarRadiusProperty

        +IsVisibleProperty
        +ValueProperty
        +IsEnabledProperty

        --Property--
        +BackgroundAngle: double
        +BackgroundAngleOffset: double
        +BackgroundColor: Color
        +BackgroundLineWidth: int
        +BackgroundRadius: double

        +BarAngle: double
        +BarAngleOffset: double
        +BarAngleMaximum: double
        +BarAngleMinimum: double
        +BarColor: Color
        +BarLineWidth: int
        +BarRadius: double

        +IsVisible: bool
        +Value: double
        +IsEnabled: bool
    }

    CircleProgressBarSurfaceItem -u-|> ICircleSurfaceItem
}

package "Extension.Wearable.Renderer" {
    class CircleProgressBarSurfaceItemRenderer

    CircleProgressBarSurfaceItemRenderer .l. CircleProgressBarSurfaceItem
}

package "ElmSharp.Wearable" {
    class CircleProgressBar

    CircleProgressBar <|-u- CircleProgressBarSurfaceItemRenderer
}
@enduml

@startuml CircleProgressBarSurfaceItem_SceneGraph.png

!include CirclePage_SceneGraph.wsd

node CircleProgressBar #87ceeb [
    CircleProgressBar
]
CircleSurface --> CircleProgressBar

@enduml

@startuml CircleScrollView.png
package "Xamarin.Forms" {
    class ScrollView
}

package "Extension.Wearable" {
    interface IRotaryFocusable
    class CircleScrollView

    CircleScrollView -u-|> ScrollView
    CircleScrollView -u-|> IRotaryFocusable
}

package "Extension.Wearable.Renderer" {
    class CircleScrollViewRenderer
    CircleScrollViewRenderer .u. CircleScrollView
}

package "ElmSharp.Wearable" {
    class CircleScroller
    CircleScrollViewRenderer *.d. CircleScroller
}
@enduml

@startuml CircleScrollView_SceneGraph.png

!include CirclePage_SceneGraph.wsd

node CircleScroller #87ceeb [
    CircleScroller
]
ContentArea --> CircleScroller
CircleSurface --> CircleScroller

@enduml

@startuml CircleSliderSurfaceItem.png

package "Extension.Wearable" {
    interface IRotaryFocusable
    interface ICircleSurfaceItem {
        IsVisible: bool
    }
    class CircleSliderSurfaceItem {
        --BindableProperty--
        +BackgroundAngleProperty
        +BackgroundAngleOffsetProperty
        +BackgroundColorProperty
        +BackgroundLineWidthProperty
        +BackgroundRadiusProperty

        +BarAngleProperty
        +BarAngleOffsetProperty
        +BarAngleMaximumProperty
        +BarAngleMinimumProperty
        +BarColorProperty
        +BarLineWidthProperty
        +BarRadiusProperty

        +MinimumProperty
        +MaximumProperty

        +ValueProperty

        +IsVisibleProperty
        +IsEnabledProperty

        --Property--
        +BackgroundAngle: double
        +BackgroundAngleOffset: double
        +BackgroundColor: Color
        +BackgroundLineWidth: int
        +BackgroundRadius: double

        +BarAngle: double
        +BarAngleOffset: double
        +BarAngleMaximum: double
        +BarAngleMinimum: double
        +BarColor: Color
        +BarLineWidth: int
        +BarRadius: double

        +Minimum: double
        +Maximum: double

        +Value: double
        +IsVisible: bool
        +IsEnabled: bool
    }

    CircleSliderSurfaceItem -u-|> ICircleSurfaceItem
    CircleSliderSurfaceItem -u-|> IRotaryFocusable
}

package "Extension.Wearable.Renderer" {
    class CircleSliderSurfaceItemRenderer

    CircleSliderSurfaceItemRenderer .l. CircleSliderSurfaceItem
}

package "ElmSharp.Wearable" {
    class CircleSlider

    CircleSlider <|-u- CircleSliderSurfaceItemRenderer
}
@enduml

@startuml CircleSliderSurfaceItem_SceneGraph.png

!include CirclePage_SceneGraph.wsd

node CircleSlider #87ceeb [
    CircleSlider
]
CircleSurface --> CircleSlider

@enduml

@startuml CircleStepper.png

package "Xamarin.Forms" {
    class Stepper
}

package "Extension.Wearable" {
    interface IRotaryFocusable
    class CircleStepper {
        --BindableProperty--
        {static} +RatioProperty
        {static} +ColorProperty

        --Property--
        +Ratio: double
        +Color: Color
    }

    CircleStepper -u-|> Stepper
    CircleStepper -u-|> IRotaryFocusable
}

package "Extension.Wearable.Renderer" {
    class CircleStepperRenderer
    CircleStepperRenderer .u. CircleStepper
}

package "ElmSharp.Wearable" {
    class CircleSpinner
    CircleStepperRenderer *.d. CircleSpinner
}
@enduml

@startuml CircleStepper_SceneGraph.png

!include CirclePage_SceneGraph.wsd

node CircleSpinner #87ceeb [
    CircleSpinner
]
ContentArea --> CircleSpinner
CircleSurface --> CircleSpinner

@enduml

@startuml TwoButtonPage.png

package "Xamarin.Forms" {
    class ContentPage
}

package "Extension.Wearable" {
    class TwoButtonPage {
        --BindableProperty--
        {static} +TitleProperty
        --Property--
        FirstButton: MenuItem
        SecondButton: MenuItem
    }

    TwoButtonPage -u-|> ContentPage 
}

package "Extension.Wearable.Renderer" {
    class TwoButtonPageRenderer

    TwoButtonPageRenderer .l. TwoButtonPage
}

package "ElmSharp" {
    class Layout
    TwoButtonPageRenderer *.. Layout
}

@enduml

@startuml TwoButtonPage_SceneGraph.png

node TwoButtonPage [
    Layout
    "layout/popup/content/circle/buttons2"
]

node FirstButton [
    Button
    "popup/circle/left"
]

node SecondButton [
    Button
    "popup/circle/right"
]

interface FirstButtonImage [
    Image
]

interface SecondButtonImage [
    Image
]

() ContentArea
() TitleArea


TwoButtonPage --> FirstButton : "button1"
TwoButtonPage --> ContentArea : "elm.swallow.content"
TwoButtonPage --> TitleArea : "elm.text.title"
TwoButtonPage --> SecondButton : "button2"

FirstButton ..> FirstButtonImage : "elm.swallow.content"
SecondButton ..> SecondButtonImage : "elm.swallow.content"
@enduml