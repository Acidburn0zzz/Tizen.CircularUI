{
  "index.html": {
    "href": "index.html",
    "title": "Tizen CircularUI",
    "keywords": "Tizen CircularUI The Tizen CircularUI is a set of helpful extensions to the Xamarin Forms framework on the Samsung Gear device. The banaries are available via NuGet (package name CircularUI) with the source available at here. Controls Name Description CirclePage A subclass of Xamarin.Forms.Page that can shows Circular ProgressBar and Circular Slider and the button on bottom of screen. it can also show MenuItems on the circular menu.(MoreOption) CircleListView A subclass of Xamarin.Forms.ListView control fits in the circular screen. CircleProgressBarSurfaceItem A control fits in the circular screen. it can be shown in CirclePage only. CircleSliderSurfaceItem A Slider control that responds to the bezel action and fits in the circular screen. CircleScrollView A subclass of Xamarin.Forms.ScrollView that can be scrolled by the bezel action. CircleDateTimeSelector A control to select date or time fits in the circular screen. CircleStepper A control to select a number of steps fits in the circular screen. CircleStackLayout A container to layout children linear in the circular area. IndexPage A subclass of multiple page that can slide child page horizontal and has dots on top of the screen for the number of child pages. Check A subclass of Xamarin.Forms.Switch control with some different styles. IRotaryEventReceiver A event receiver for using the bezel action. Radio A radio control fits in the circular screen. Toast A popup for simple feedback. TwoButtonPage A subclass of Xamarin.Forms.Page has two button in left and right side of the circular screen. ContextPopup A context popup fits in the circular screen. ConfirmationPopup A popup has two button in left and right side of the circular screen. ConfirmPopupEffect the effect to show a small popup has one or two button sticky with any control. InformationPopup A popup has a control to show progress and one button in bottom side of circular screen."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Tizen Wearable CircularUI",
    "keywords": "Tizen Wearable CircularUI This document is the API Specification for the Tizen Wearable CircularUI. Namespace Description Tizen.Wearable.CircularUI.Forms Provide the classes for the Circular screen with Tizen wearable devices. Tizen.Wearable.CircularUI.Forms.Renderer Contains the renderer classes on tizen platform for Tizen.Wearable.CircularUI.Forms. Tizen.Wearable.CircularUI.Forms.Renderer.Watchface Provide the classes for creating the Watchface on Tizen wearable devices."
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.RadioRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.RadioRenderer.html",
    "title": "Class RadioRenderer",
    "keywords": "Class RadioRenderer Inheritance System.Object Xamarin.Forms.Platform.Tizen.VisualElementRenderer < Radio > Xamarin.Forms.Platform.Tizen.ViewRenderer < Radio , Radio > RadioRenderer Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider Inherited Members Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.Radio, ElmSharp.Radio>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.Radio>) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.Radio, ElmSharp.Radio>.SetNativeControl(ElmSharp.Radio) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.Radio, ElmSharp.Radio>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.Radio, ElmSharp.Radio>.Control Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.Dispose() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.GetDesiredSize(System.Double, System.Double) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.SetElement(Tizen.Wearable.CircularUI.Forms.Radio) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.SetElement(Xamarin.Forms.VisualElement) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.Xamarin.Forms.IEffectControlProvider.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.OnElementPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.SetNativeView(ElmSharp.EvasObject) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.RegisterPropertyHandler(System.String, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.RegisterPropertyHandler(System.String, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.UpdateAllProperties(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.OnElementReady() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.MinimumSize() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.Measure(System.Int32, System.Int32) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.UpdateBackgroundColor(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.UpdateOpacity(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.GetNativeContentGeometry() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.UpdateInputTransparent(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.UpdateThemeStyle() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.ApplyTransformation() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.NativeView Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class RadioRenderer : ViewRenderer<Radio, Radio>, IVisualElementRenderer, IRegisterable, IDisposable, IEffectControlProvider Constructors RadioRenderer() Declaration public RadioRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.Dispose(System.Boolean) OnElementChanged(ElementChangedEventArgs<Radio>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<Radio> e) Parameters Type Name Description Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs < Radio > e Overrides Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.Radio, ElmSharp.Radio>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.Radio>) Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.PaddingItemClass.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.PaddingItemClass.html",
    "title": "Class PaddingItemClass",
    "keywords": "Class PaddingItemClass Inheritance System.Object GenItemClass PaddingItemClass Implements System.IDisposable Inherited Members GenItemClass.Dispose(Boolean) GenItemClass.Dispose() GenItemClass.CreateItemClass() GenItemClass.ReleaseItemClass(IntPtr) GenItemClass.ItemStyle GenItemClass.GetTextHandler GenItemClass.GetContentHandler GenItemClass.DeleteHandler GenItemClass.ReusableContentHandler System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class PaddingItemClass : GenItemClass, IDisposable Constructors PaddingItemClass() Declaration public PaddingItemClass() Implements System.IDisposable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.Watchface.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.Watchface.html",
    "title": "Namespace Tizen.Wearable.CircularUI.Forms.Renderer.Watchface",
    "keywords": "Namespace Tizen.Wearable.CircularUI.Forms.Renderer.Watchface Classes FormsWatchface"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ContextPopupItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ContextPopupItem.html",
    "title": "Class ContextPopupItem",
    "keywords": "Class ContextPopupItem The ContextPopupItem is a class to control items in a ContextPopup. Inheritance System.Object ContextPopupItem Implements System.ComponentModel.INotifyPropertyChanged Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class ContextPopupItem : INotifyPropertyChanged Constructors ContextPopupItem(String) Creates a ContextPopupItem with only a label. Declaration public ContextPopupItem(string label) Parameters Type Name Description System.String label The label of the ContextPopupItem. Properties Label Gets or sets the label of a ContextPopupItem. Declaration public string Label { get; set; } Property Value Type Description System.String Methods OnPropertyChanged(String) Called when a bindable property has changed. Declaration protected virtual void OnPropertyChanged(string propertyName = null) Parameters Type Name Description System.String propertyName Events PropertyChanged Occurs when the label or an icon of a ContextPopupItem is changed. Declaration public event PropertyChangedEventHandler PropertyChanged Event Type Type Description System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged"
  },
  "api/Tizen.Wearable.CircularUI.Forms.IRotaryFocusable.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.IRotaryFocusable.html",
    "title": "Interface IRotaryFocusable",
    "keywords": "Interface IRotaryFocusable The IRotaryFocusable is an interface to take a Rotary Event Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public interface IRotaryFocusable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleListViewRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleListViewRenderer.html",
    "title": "Class CircleListViewRenderer",
    "keywords": "Class CircleListViewRenderer Inheritance System.Object Xamarin.Forms.Platform.Tizen.VisualElementRenderer < CircleListView > Xamarin.Forms.Platform.Tizen.ViewRenderer < CircleListView , CircleListView > CircleListViewRenderer Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider Inherited Members Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView, Tizen.Wearable.CircularUI.Forms.Renderer.CircleListView>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.CircleListView>) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView, Tizen.Wearable.CircularUI.Forms.Renderer.CircleListView>.SetNativeControl(Tizen.Wearable.CircularUI.Forms.Renderer.CircleListView) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView, Tizen.Wearable.CircularUI.Forms.Renderer.CircleListView>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView, Tizen.Wearable.CircularUI.Forms.Renderer.CircleListView>.Control Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.Dispose() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.GetDesiredSize(System.Double, System.Double) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.SetElement(Tizen.Wearable.CircularUI.Forms.CircleListView) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.SetElement(Xamarin.Forms.VisualElement) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.Xamarin.Forms.IEffectControlProvider.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.OnElementPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.SetNativeView(ElmSharp.EvasObject) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.RegisterPropertyHandler(System.String, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.RegisterPropertyHandler(System.String, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.UpdateAllProperties(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.OnElementReady() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.MinimumSize() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.Measure(System.Int32, System.Int32) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.UpdateBackgroundColor(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.UpdateOpacity(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.GetNativeContentGeometry() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.UpdateInputTransparent(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.UpdateThemeStyle() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.ApplyTransformation() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.NativeView Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleListViewRenderer : ViewRenderer<CircleListView, CircleListView>, IVisualElementRenderer, IRegisterable, IDisposable, IEffectControlProvider Constructors CircleListViewRenderer() Declaration public CircleListViewRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.Dispose(System.Boolean) OnElementChanged(ElementChangedEventArgs<CircleListView>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<CircleListView> e) Parameters Type Name Description Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs < CircleListView > e Overrides Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView, Tizen.Wearable.CircularUI.Forms.Renderer.CircleListView>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.CircleListView>) Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.IndexPageRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.IndexPageRenderer.html",
    "title": "Class IndexPageRenderer",
    "keywords": "Class IndexPageRenderer Inheritance System.Object Xamarin.Forms.Platform.Tizen.VisualElementRenderer < IndexPage > IndexPageRenderer Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider Inherited Members Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.Dispose() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.GetDesiredSize(System.Double, System.Double) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.SetElement(Tizen.Wearable.CircularUI.Forms.IndexPage) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.SetElement(Xamarin.Forms.VisualElement) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.Xamarin.Forms.IEffectControlProvider.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.OnElementPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.SetNativeView(ElmSharp.EvasObject) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.RegisterPropertyHandler(System.String, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.RegisterPropertyHandler(System.String, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.UpdateAllProperties(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.OnElementReady() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.MinimumSize() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.Measure(System.Int32, System.Int32) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.UpdateBackgroundColor(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.UpdateOpacity(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.GetNativeContentGeometry() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.UpdateInputTransparent(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.UpdateThemeStyle() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.ApplyTransformation() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.NativeView Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class IndexPageRenderer : VisualElementRenderer<IndexPage>, IVisualElementRenderer, IRegisterable, IDisposable, IEffectControlProvider Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.Dispose(System.Boolean) OnElementChanged(ElementChangedEventArgs<IndexPage>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<IndexPage> e) Parameters Type Name Description Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs < IndexPage > e Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.IndexPage>) Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.InformationPopupImplementation.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.InformationPopupImplementation.html",
    "title": "Class InformationPopupImplementation",
    "keywords": "Class InformationPopupImplementation Inheritance System.Object InformationPopupImplementation Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class InformationPopupImplementation : IInformationPopup, IDisposable Constructors InformationPopupImplementation() Declaration public InformationPopupImplementation() Properties BottomButton Declaration public MenuItem BottomButton { get; set; } Property Value Type Description Xamarin.Forms.MenuItem IsProgressRunning Declaration public bool IsProgressRunning { get; set; } Property Value Type Description System.Boolean Text Declaration public string Text { get; set; } Property Value Type Description System.String Title Declaration public string Title { get; set; } Property Value Type Description System.String Methods Dismiss() Declaration public void Dismiss() Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Finalize() Declaration protected void Finalize() Show() Declaration public void Show() Events BackButtonPressed Declaration public event EventHandler BackButtonPressed Event Type Type Description System.EventHandler Implements System.IDisposable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.RotaryEventArgs.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.RotaryEventArgs.html",
    "title": "Class RotaryEventArgs",
    "keywords": "Class RotaryEventArgs Event arguments for RotaryEvent. Inheritance System.Object System.EventArgs RotaryEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class RotaryEventArgs : EventArgs Properties IsClockwise Gets or sets rotated direction of Rotary device. IsClockwise is true when Rotary device rotated in the clockwise direction or false on counter clockwise. Declaration public bool IsClockwise { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.html",
    "title": "Namespace Tizen.Wearable.CircularUI.Forms.Renderer",
    "keywords": "Namespace Tizen.Wearable.CircularUI.Forms.Renderer Classes CheckRenderer CircleDateTimeSelectorRenderer CircleListView CircleListViewRenderer CirclePageRenderer CircleSliderSurfaceItemImplements CircleStepperRenderer CircleSurfaceNotFoundException ConfirmationPopupImplementation FormsCircularUI HeaderOrFooterItemClass IndexPageRenderer InformationPopupImplementation ListViewCache PaddingItemClass PopupEntryRenderer RadioRenderer TizenCircleSurfaceEffect TizenConfirmPopupEffect TwoButtonPageRenderer TwoButtonPageWidget"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CirclePageNotFoundException.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CirclePageNotFoundException.html",
    "title": "Class CirclePageNotFoundException",
    "keywords": "Class CirclePageNotFoundException The CirclePageNotFoundException is an Exception class that occurs when a CircleSurface has no child. Inheritance System.Object System.Exception CirclePageNotFoundException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CirclePageNotFoundException : Exception, ISerializable Constructors CirclePageNotFoundException() Creates and initializes a new instance of the CirclePageNotFoundException class. Declaration public CirclePageNotFoundException() Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ContextPopup.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ContextPopup.html",
    "title": "Class ContextPopup",
    "keywords": "Class ContextPopup The ContextPopup class allows a contextual popup to be anchored at a view. Inheritance System.Object Xamarin.Forms.BindableObject ContextPopup Implements System.ComponentModel.INotifyPropertyChanged Inherited Members Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnBindingContextChanged() Xamarin.Forms.BindableObject.OnPropertyChanged(System.String) Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.BindingContextChanged Xamarin.Forms.BindableObject.PropertyChanging System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class ContextPopup : BindableObject, INotifyPropertyChanged, IDynamicResourceHandler Examples var popup = new ContextPopup(); var item1 = new ContextPopupItem(\"item 1\"); var item2 = new ContextPopupItem(\"item 2\"); popup.Items.Add(item1); popup.Items.Add(item2); popup.ItemSelected += (s, e) => { Console.WriteLine($\"{popup.SelectedItem?.Label} is selected\"); } Constructors ContextPopup() The constructor, which creates a new ContextPopup instance. Declaration public ContextPopup() Fields SelectedIndexProperty BindableProperty. Identifies the SelectedIndex bindable property. Declaration public static readonly BindableProperty SelectedIndexProperty Field Value Type Description Xamarin.Forms.BindableProperty SelectedItemProperty BindableProperty. Identifies the SelectedItem bindable property. Declaration public static readonly BindableProperty SelectedItemProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties Items Gets the list of items in the ContextPopup. Declaration public IList<ContextPopupItem> Items { get; } Property Value Type Description System.Collections.Generic.IList < ContextPopupItem > SelectedIndex Gets or sets the index of the selected item of the ContextPopup. It is -1 when no item is selected. Declaration public int SelectedIndex { get; set; } Property Value Type Description System.Int32 SelectedItem Gets or sets the selected item of the ContextPopup. Declaration public ContextPopupItem SelectedItem { get; set; } Property Value Type Description ContextPopupItem Methods Dismiss() Dismisses the ContextPopup. Declaration public void Dismiss() Show(View) Shows the ContextPopup. The ContextPopup is positioned at the horizontal and the vertical position of a specific anchor. Declaration public void Show(View anchor) Parameters Type Name Description Xamarin.Forms.View anchor The view to which the popup should be anchored. Show(View, Double, Double) Shows the ContextPopup. The ContextPopup is positioned at the horizontal and the vertical position of a specific anchor with offsets. Declaration public void Show(View anchor, double xOffset, double yOffset) Parameters Type Name Description Xamarin.Forms.View anchor The view to which the popup should be anchored. System.Double xOffset The horizontal offset from the anchor. System.Double yOffset The vertical offset from the anchor. Show(View, Int32, Int32) Shows the ContextPopup. The ContextPopup is positioned at the horizontal and the vertical position of a specific anchor with offsets. Declaration public void Show(View anchor, int xOffset, int yOffset) Parameters Type Name Description Xamarin.Forms.View anchor The view to which the popup should be anchored. System.Int32 xOffset The horizontal offset from the anchor. System.Int32 yOffset The vertical offset from the anchor. Events Dismissed Occurs when the ContextPopup is dismissed. Declaration public event EventHandler Dismissed Event Type Type Description System.EventHandler ItemSelected Occurs when a ContextPopupItem is selected. Declaration public event EventHandler<SelectedItemChangedEventArgs> ItemSelected Event Type Type Description System.EventHandler < Xamarin.Forms.SelectedItemChangedEventArgs > Implements System.ComponentModel.INotifyPropertyChanged"
  },
  "api/Tizen.Wearable.CircularUI.Forms.PositionOption.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.PositionOption.html",
    "title": "Enum PositionOption",
    "keywords": "Enum PositionOption Enumeration for position type of popup Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public enum PositionOption Fields Name Description Absolute The value of Offset is X, Y and popup is placed on the screen. BottomOfView The popup appears at the bottom of the View using the Effect. The position is changed by Offset in the center of View. CenterOfParent In the center of the screen, move by the Offset in the Popup. Relative Set Offset.X * Window.Width, Offset.Y * Window.Height."
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleStepperRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleStepperRenderer.html",
    "title": "Class CircleStepperRenderer",
    "keywords": "Class CircleStepperRenderer Inheritance System.Object Xamarin.Forms.Platform.Tizen.VisualElementRenderer < CircleStepper > Xamarin.Forms.Platform.Tizen.ViewRenderer < CircleStepper , CircleSpinner > CircleStepperRenderer Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider Inherited Members Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper, ElmSharp.Wearable.CircleSpinner>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.CircleStepper>) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper, ElmSharp.Wearable.CircleSpinner>.SetNativeControl(ElmSharp.Wearable.CircleSpinner) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper, ElmSharp.Wearable.CircleSpinner>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper, ElmSharp.Wearable.CircleSpinner>.Control Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.Dispose() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.GetDesiredSize(System.Double, System.Double) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.SetElement(Tizen.Wearable.CircularUI.Forms.CircleStepper) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.SetElement(Xamarin.Forms.VisualElement) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.Xamarin.Forms.IEffectControlProvider.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.OnElementPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.SetNativeView(ElmSharp.EvasObject) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.RegisterPropertyHandler(System.String, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.RegisterPropertyHandler(System.String, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.UpdateAllProperties(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.OnElementReady() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.UpdateBackgroundColor(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.UpdateOpacity(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.GetNativeContentGeometry() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.UpdateInputTransparent(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.UpdateThemeStyle() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.ApplyTransformation() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.NativeView Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleStepperRenderer : ViewRenderer<CircleStepper, CircleSpinner>, IVisualElementRenderer, IRegisterable, IDisposable, IEffectControlProvider Constructors CircleStepperRenderer() Declaration public CircleStepperRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.Dispose(System.Boolean) Measure(Int32, Int32) Declaration protected override Size Measure(int availableWidth, int availableHeight) Parameters Type Name Description System.Int32 availableWidth System.Int32 availableHeight Returns Type Description Size Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.Measure(System.Int32, System.Int32) MinimumSize() Declaration protected override Size MinimumSize() Returns Type Description Xamarin.Forms.Size Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.MinimumSize() OnElementChanged(ElementChangedEventArgs<CircleStepper>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<CircleStepper> e) Parameters Type Name Description Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs < CircleStepper > e Overrides Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper, ElmSharp.Wearable.CircleSpinner>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.CircleStepper>) Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ICircleSurfaceItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ICircleSurfaceItem.html",
    "title": "Interface ICircleSurfaceItem",
    "keywords": "Interface ICircleSurfaceItem The ICircleSurfaceItem is an interface that controls the items represented in the CircleSurface. Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public interface ICircleSurfaceItem Properties IsVisible Gets or sets CircleSurfaceItem's visibility Declaration bool IsVisible { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Check.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Check.html",
    "title": "Class Check",
    "keywords": "Class Check The check widget allows for toggling a value between true and false. The check is extension of Xamarin.Forms.Switch. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.VisualElement Xamarin.Forms.View Xamarin.Forms.Switch Check Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.IElementConfiguration < Xamarin.Forms.Switch > Inherited Members Xamarin.Forms.Switch.IsToggledProperty Xamarin.Forms.Switch.OnColorProperty Xamarin.Forms.Switch.On<T>() Xamarin.Forms.Switch.OnColor Xamarin.Forms.Switch.IsToggled Xamarin.Forms.Switch.Toggled Xamarin.Forms.View.VerticalOptionsProperty Xamarin.Forms.View.HorizontalOptionsProperty Xamarin.Forms.View.MarginProperty Xamarin.Forms.View.OnBindingContextChanged() Xamarin.Forms.View.GestureRecognizers Xamarin.Forms.View.HorizontalOptions Xamarin.Forms.View.Margin Xamarin.Forms.View.VerticalOptions Xamarin.Forms.VisualElement.NavigationProperty Xamarin.Forms.VisualElement.InputTransparentProperty Xamarin.Forms.VisualElement.IsEnabledProperty Xamarin.Forms.VisualElement.XProperty Xamarin.Forms.VisualElement.YProperty Xamarin.Forms.VisualElement.AnchorXProperty Xamarin.Forms.VisualElement.AnchorYProperty Xamarin.Forms.VisualElement.TranslationXProperty Xamarin.Forms.VisualElement.TranslationYProperty Xamarin.Forms.VisualElement.WidthProperty Xamarin.Forms.VisualElement.HeightProperty Xamarin.Forms.VisualElement.RotationProperty Xamarin.Forms.VisualElement.RotationXProperty Xamarin.Forms.VisualElement.RotationYProperty Xamarin.Forms.VisualElement.ScaleProperty Xamarin.Forms.VisualElement.IsVisibleProperty Xamarin.Forms.VisualElement.OpacityProperty Xamarin.Forms.VisualElement.BackgroundColorProperty Xamarin.Forms.VisualElement.BehaviorsProperty Xamarin.Forms.VisualElement.TriggersProperty Xamarin.Forms.VisualElement.StyleProperty Xamarin.Forms.VisualElement.WidthRequestProperty Xamarin.Forms.VisualElement.HeightRequestProperty Xamarin.Forms.VisualElement.MinimumWidthRequestProperty Xamarin.Forms.VisualElement.MinimumHeightRequestProperty Xamarin.Forms.VisualElement.IsFocusedProperty Xamarin.Forms.VisualElement.FlowDirectionProperty Xamarin.Forms.VisualElement.BatchBegin() Xamarin.Forms.VisualElement.BatchCommit() Xamarin.Forms.VisualElement.Focus() Xamarin.Forms.VisualElement.GetSizeRequest(System.Double, System.Double) Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle) Xamarin.Forms.VisualElement.Measure(System.Double, System.Double, Xamarin.Forms.MeasureFlags) Xamarin.Forms.VisualElement.Unfocus() Xamarin.Forms.VisualElement.InvalidateMeasure() Xamarin.Forms.VisualElement.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildrenReordered() Xamarin.Forms.VisualElement.OnMeasure(System.Double, System.Double) Xamarin.Forms.VisualElement.OnParentSet() Xamarin.Forms.VisualElement.OnSizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.OnSizeRequest(System.Double, System.Double) Xamarin.Forms.VisualElement.SizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.VisualElement.ChangeVisualState() Xamarin.Forms.VisualElement.FlowDirection Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.VisualElement.AnchorX Xamarin.Forms.VisualElement.AnchorY Xamarin.Forms.VisualElement.BackgroundColor Xamarin.Forms.VisualElement.Behaviors Xamarin.Forms.VisualElement.Bounds Xamarin.Forms.VisualElement.Height Xamarin.Forms.VisualElement.HeightRequest Xamarin.Forms.VisualElement.InputTransparent Xamarin.Forms.VisualElement.IsEnabled Xamarin.Forms.VisualElement.IsFocused Xamarin.Forms.VisualElement.IsVisible Xamarin.Forms.VisualElement.MinimumHeightRequest Xamarin.Forms.VisualElement.MinimumWidthRequest Xamarin.Forms.VisualElement.Navigation Xamarin.Forms.VisualElement.Opacity Xamarin.Forms.VisualElement.Rotation Xamarin.Forms.VisualElement.RotationX Xamarin.Forms.VisualElement.RotationY Xamarin.Forms.VisualElement.Scale Xamarin.Forms.VisualElement.Style Xamarin.Forms.VisualElement.StyleClass Xamarin.Forms.VisualElement.class Xamarin.Forms.VisualElement.TranslationX Xamarin.Forms.VisualElement.TranslationY Xamarin.Forms.VisualElement.Triggers Xamarin.Forms.VisualElement.Width Xamarin.Forms.VisualElement.WidthRequest Xamarin.Forms.VisualElement.X Xamarin.Forms.VisualElement.Y Xamarin.Forms.VisualElement.Resources Xamarin.Forms.VisualElement.ChildrenReordered Xamarin.Forms.VisualElement.Focused Xamarin.Forms.VisualElement.MeasureInvalidated Xamarin.Forms.VisualElement.SizeChanged Xamarin.Forms.VisualElement.Unfocused Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.ParentView Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.BindingContextChanged Xamarin.Forms.BindableObject.PropertyChanging System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class Check : Switch, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IAnimatable, IResourcesProvider, IFlowDirectionController, IStyleSelectable, IStylable, IViewController, IVisualElementController, IElementController, IElementConfiguration<Switch> Examples var check = new Check { HorizontalOptions = LayoutOptions.Center, VerticalOptions = LayoutOptions.Center, DisplayStyle = \"Onoff\" } Fields DisplayStyleProperty BindableProperty. Identifies the DisplayStyle bindable property. Declaration public static readonly BindableProperty DisplayStyleProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties DisplayStyle Gets or sets display style of Check. Declaration public CheckDisplayStyle DisplayStyle { get; set; } Property Value Type Description CheckDisplayStyle Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.IElementConfiguration<TElement>"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.FormsCircularUI.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.FormsCircularUI.html",
    "title": "Class FormsCircularUI",
    "keywords": "Class FormsCircularUI Inheritance System.Object FormsCircularUI Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public static class FormsCircularUI Properties IsInitialized Declaration public static bool IsInitialized { get; } Property Value Type Description System.Boolean Methods Init() Declaration public static void Init()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CheckDisplayStyle.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CheckDisplayStyle.html",
    "title": "Enum CheckDisplayStyle",
    "keywords": "Enum CheckDisplayStyle Enumeration for the style of the Check. Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public enum CheckDisplayStyle Fields Name Description Default The default style is checkbox style. Onoff The toggle switch style. Small The small checkbox style. this style is only for circular devices"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleProgressBarSurfaceItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleProgressBarSurfaceItem.html",
    "title": "Class CircleProgressBarSurfaceItem",
    "keywords": "Class CircleProgressBarSurfaceItem The CircleProgressBarSurfaceItem displays circular progressbar at CirclePage. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element CircleSurfaceItem CircleProgressBarSurfaceItem Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController ICircleSurfaceItem Inherited Members CircleSurfaceItem.BackgroundAngleProperty CircleSurfaceItem.BackgroundAngleOffsetProperty CircleSurfaceItem.BackgroundColorProperty CircleSurfaceItem.BackgroundLineWidthProperty CircleSurfaceItem.BackgroundRadiusProperty CircleSurfaceItem.BarAngleProperty CircleSurfaceItem.BarAngleOffsetProperty CircleSurfaceItem.BarAngleMaximumProperty CircleSurfaceItem.BarAngleMinimumProperty CircleSurfaceItem.BarColorProperty CircleSurfaceItem.BarLineWidthProperty CircleSurfaceItem.BarRadiusProperty CircleSurfaceItem.IsVisibleProperty CircleSurfaceItem.IsEnabledProperty CircleSurfaceItem.BackgroundAngle CircleSurfaceItem.BackgroundAngleOffset CircleSurfaceItem.BackgroundColor CircleSurfaceItem.BackgroundLineWidth CircleSurfaceItem.BackgroundRadius CircleSurfaceItem.BarAngle CircleSurfaceItem.BarAngleOffset CircleSurfaceItem.BarAngleMaximum CircleSurfaceItem.BarAngleMinimum CircleSurfaceItem.BarColor CircleSurfaceItem.BarLineWidth CircleSurfaceItem.BarRadius CircleSurfaceItem.IsVisible CircleSurfaceItem.IsEnabled Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnBindingContextChanged() Xamarin.Forms.Element.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.Element.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.Element.OnParentSet() Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.ParentView Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.BindingContextChanged Xamarin.Forms.BindableObject.PropertyChanging System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleProgressBarSurfaceItem : CircleSurfaceItem, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IElementController, IStyleSelectable, ICircleSurfaceItem Fields ValueProperty BindableProperty. Identifies the Value bindable property. Declaration public static readonly BindableProperty ValueProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties Value Gets or sets the value of the progressbar. Declaration public double Value { get; set; } Property Value Type Description System.Double Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController ICircleSurfaceItem"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleSliderSurfaceItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleSliderSurfaceItem.html",
    "title": "Class CircleSliderSurfaceItem",
    "keywords": "Class CircleSliderSurfaceItem The CircleSliderSurfaceItem displays circular slider at CirclePage. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element CircleSurfaceItem CircleSliderSurfaceItem Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController ICircleSurfaceItem IRotaryFocusable Inherited Members CircleSurfaceItem.BackgroundAngleProperty CircleSurfaceItem.BackgroundAngleOffsetProperty CircleSurfaceItem.BackgroundColorProperty CircleSurfaceItem.BackgroundLineWidthProperty CircleSurfaceItem.BackgroundRadiusProperty CircleSurfaceItem.BarAngleProperty CircleSurfaceItem.BarAngleOffsetProperty CircleSurfaceItem.BarAngleMaximumProperty CircleSurfaceItem.BarAngleMinimumProperty CircleSurfaceItem.BarColorProperty CircleSurfaceItem.BarLineWidthProperty CircleSurfaceItem.BarRadiusProperty CircleSurfaceItem.IsVisibleProperty CircleSurfaceItem.IsEnabledProperty CircleSurfaceItem.BackgroundAngle CircleSurfaceItem.BackgroundAngleOffset CircleSurfaceItem.BackgroundColor CircleSurfaceItem.BackgroundLineWidth CircleSurfaceItem.BackgroundRadius CircleSurfaceItem.BarAngle CircleSurfaceItem.BarAngleOffset CircleSurfaceItem.BarAngleMaximum CircleSurfaceItem.BarAngleMinimum CircleSurfaceItem.BarColor CircleSurfaceItem.BarLineWidth CircleSurfaceItem.BarRadius CircleSurfaceItem.IsVisible CircleSurfaceItem.IsEnabled Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnBindingContextChanged() Xamarin.Forms.Element.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.Element.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.Element.OnParentSet() Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.ParentView Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.BindingContextChanged Xamarin.Forms.BindableObject.PropertyChanging System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleSliderSurfaceItem : CircleSurfaceItem, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IElementController, IStyleSelectable, ICircleSurfaceItem, IRotaryFocusable Fields IncrementProperty BindableProperty. Identifies the Increment bindable property. Declaration public static readonly BindableProperty IncrementProperty Field Value Type Description Xamarin.Forms.BindableProperty MaximumProperty BindableProperty. Identifies the Maximum bindable property. Declaration public static readonly BindableProperty MaximumProperty Field Value Type Description Xamarin.Forms.BindableProperty MinimumProperty BindableProperty. Identifies the Minimum bindable property. Declaration public static readonly BindableProperty MinimumProperty Field Value Type Description Xamarin.Forms.BindableProperty ValueProperty BindableProperty. Identifies the Value bindable property. Declaration public static readonly BindableProperty ValueProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties Increment Gets or sets the Increment value. The value of the slider is increased/decreased by the Increment value. Declaration public double Increment { get; set; } Property Value Type Description System.Double Maximum Gets or sets the maximum value of the slider. Declaration public double Maximum { get; set; } Property Value Type Description System.Double Minimum Gets or sets the minimum value of the slider. Declaration public double Minimum { get; set; } Property Value Type Description System.Double Value Gets or sets the value of the slider. Declaration public double Value { get; set; } Property Value Type Description System.Double Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController ICircleSurfaceItem IRotaryFocusable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleStepper.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleStepper.html",
    "title": "Class CircleStepper",
    "keywords": "Class CircleStepper The CircleStepper is a class that extends Xamarin.Forms.Stepper for Circular UI. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.VisualElement Xamarin.Forms.View Xamarin.Forms.Stepper CircleStepper Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.IElementConfiguration < Xamarin.Forms.Stepper > IRotaryFocusable Inherited Members Xamarin.Forms.Stepper.MaximumProperty Xamarin.Forms.Stepper.MinimumProperty Xamarin.Forms.Stepper.ValueProperty Xamarin.Forms.Stepper.IncrementProperty Xamarin.Forms.Stepper.On<T>() Xamarin.Forms.Stepper.Increment Xamarin.Forms.Stepper.Maximum Xamarin.Forms.Stepper.Minimum Xamarin.Forms.Stepper.Value Xamarin.Forms.Stepper.ValueChanged Xamarin.Forms.View.VerticalOptionsProperty Xamarin.Forms.View.HorizontalOptionsProperty Xamarin.Forms.View.MarginProperty Xamarin.Forms.View.OnBindingContextChanged() Xamarin.Forms.View.GestureRecognizers Xamarin.Forms.View.HorizontalOptions Xamarin.Forms.View.Margin Xamarin.Forms.View.VerticalOptions Xamarin.Forms.VisualElement.NavigationProperty Xamarin.Forms.VisualElement.InputTransparentProperty Xamarin.Forms.VisualElement.IsEnabledProperty Xamarin.Forms.VisualElement.XProperty Xamarin.Forms.VisualElement.YProperty Xamarin.Forms.VisualElement.AnchorXProperty Xamarin.Forms.VisualElement.AnchorYProperty Xamarin.Forms.VisualElement.TranslationXProperty Xamarin.Forms.VisualElement.TranslationYProperty Xamarin.Forms.VisualElement.WidthProperty Xamarin.Forms.VisualElement.HeightProperty Xamarin.Forms.VisualElement.RotationProperty Xamarin.Forms.VisualElement.RotationXProperty Xamarin.Forms.VisualElement.RotationYProperty Xamarin.Forms.VisualElement.ScaleProperty Xamarin.Forms.VisualElement.IsVisibleProperty Xamarin.Forms.VisualElement.OpacityProperty Xamarin.Forms.VisualElement.BackgroundColorProperty Xamarin.Forms.VisualElement.BehaviorsProperty Xamarin.Forms.VisualElement.TriggersProperty Xamarin.Forms.VisualElement.StyleProperty Xamarin.Forms.VisualElement.WidthRequestProperty Xamarin.Forms.VisualElement.HeightRequestProperty Xamarin.Forms.VisualElement.MinimumWidthRequestProperty Xamarin.Forms.VisualElement.MinimumHeightRequestProperty Xamarin.Forms.VisualElement.IsFocusedProperty Xamarin.Forms.VisualElement.FlowDirectionProperty Xamarin.Forms.VisualElement.BatchBegin() Xamarin.Forms.VisualElement.BatchCommit() Xamarin.Forms.VisualElement.Focus() Xamarin.Forms.VisualElement.GetSizeRequest(System.Double, System.Double) Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle) Xamarin.Forms.VisualElement.Measure(System.Double, System.Double, Xamarin.Forms.MeasureFlags) Xamarin.Forms.VisualElement.Unfocus() Xamarin.Forms.VisualElement.InvalidateMeasure() Xamarin.Forms.VisualElement.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildrenReordered() Xamarin.Forms.VisualElement.OnMeasure(System.Double, System.Double) Xamarin.Forms.VisualElement.OnParentSet() Xamarin.Forms.VisualElement.OnSizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.OnSizeRequest(System.Double, System.Double) Xamarin.Forms.VisualElement.SizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.VisualElement.ChangeVisualState() Xamarin.Forms.VisualElement.FlowDirection Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.VisualElement.AnchorX Xamarin.Forms.VisualElement.AnchorY Xamarin.Forms.VisualElement.BackgroundColor Xamarin.Forms.VisualElement.Behaviors Xamarin.Forms.VisualElement.Bounds Xamarin.Forms.VisualElement.Height Xamarin.Forms.VisualElement.HeightRequest Xamarin.Forms.VisualElement.InputTransparent Xamarin.Forms.VisualElement.IsEnabled Xamarin.Forms.VisualElement.IsFocused Xamarin.Forms.VisualElement.IsVisible Xamarin.Forms.VisualElement.MinimumHeightRequest Xamarin.Forms.VisualElement.MinimumWidthRequest Xamarin.Forms.VisualElement.Navigation Xamarin.Forms.VisualElement.Opacity Xamarin.Forms.VisualElement.Rotation Xamarin.Forms.VisualElement.RotationX Xamarin.Forms.VisualElement.RotationY Xamarin.Forms.VisualElement.Scale Xamarin.Forms.VisualElement.Style Xamarin.Forms.VisualElement.StyleClass Xamarin.Forms.VisualElement.class Xamarin.Forms.VisualElement.TranslationX Xamarin.Forms.VisualElement.TranslationY Xamarin.Forms.VisualElement.Triggers Xamarin.Forms.VisualElement.Width Xamarin.Forms.VisualElement.WidthRequest Xamarin.Forms.VisualElement.X Xamarin.Forms.VisualElement.Y Xamarin.Forms.VisualElement.Resources Xamarin.Forms.VisualElement.ChildrenReordered Xamarin.Forms.VisualElement.Focused Xamarin.Forms.VisualElement.MeasureInvalidated Xamarin.Forms.VisualElement.SizeChanged Xamarin.Forms.VisualElement.Unfocused Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.ParentView Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.BindingContextChanged Xamarin.Forms.BindableObject.PropertyChanging System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleStepper : Stepper, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IAnimatable, IResourcesProvider, IFlowDirectionController, IStyleSelectable, IStylable, IViewController, IVisualElementController, IElementController, IElementConfiguration<Stepper>, IRotaryFocusable Fields LabelFormatProperty BindableProperty. Identifies the LabelFormat bindable property. Declaration public static readonly BindableProperty LabelFormatProperty Field Value Type Description Xamarin.Forms.BindableProperty MarkerColorProperty BindableProperty. Identifies the MarkerColor bindable property. Declaration public static readonly BindableProperty MarkerColorProperty Field Value Type Description Xamarin.Forms.BindableProperty MarkerLineWidthProperty BindableProperty. Identifies the MarkerLineWidth bindable property. Declaration public static readonly BindableProperty MarkerLineWidthProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties LabelFormat Gets or sets format in which Value is shown Declaration public string LabelFormat { get; set; } Property Value Type Description System.String MarkerColor Gets or sets Marker color Declaration public Color MarkerColor { get; set; } Property Value Type Description Xamarin.Forms.Color MarkerLineWidth Gets or sets length of Marker Declaration public int MarkerLineWidth { get; set; } Property Value Type Description System.Int32 Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.IElementConfiguration<TElement> IRotaryFocusable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.InformationPopup.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.InformationPopup.html",
    "title": "Class InformationPopup",
    "keywords": "Class InformationPopup Inheritance System.Object Xamarin.Forms.BindableObject InformationPopup Implements System.ComponentModel.INotifyPropertyChanged Inherited Members Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnBindingContextChanged() Xamarin.Forms.BindableObject.OnPropertyChanged(System.String) Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.BindingContextChanged Xamarin.Forms.BindableObject.PropertyChanging System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class InformationPopup : BindableObject, INotifyPropertyChanged, IDynamicResourceHandler Constructors InformationPopup() Declaration public InformationPopup() Fields BottomButtonProperty BindableProperty. Identifies the first button bindable property. Declaration public static readonly BindableProperty BottomButtonProperty Field Value Type Description Xamarin.Forms.BindableProperty IsProgressRunningProperty BindableProperty. Identifies the IsProgressRunning bindable property. Declaration public static readonly BindableProperty IsProgressRunningProperty Field Value Type Description Xamarin.Forms.BindableProperty TextProperty BindableProperty. Identifies the title bindable property. Declaration public static readonly BindableProperty TextProperty Field Value Type Description Xamarin.Forms.BindableProperty TitleProperty BindableProperty. Identifies the title bindable property. Declaration public static readonly BindableProperty TitleProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties BottomButton Gets or sets bottom button of the Popup. Declaration public MenuItem BottomButton { get; set; } Property Value Type Description Xamarin.Forms.MenuItem IsProgressRunning Gets or sets progress visibility of the Popup. If this value is true. Popup displays circular progress and hides Title automatically. Declaration public bool IsProgressRunning { get; set; } Property Value Type Description System.Boolean Text Gets or sets text of the Popup. Declaration public string Text { get; set; } Property Value Type Description System.String Title Gets or sets title of the Popup. Declaration public string Title { get; set; } Property Value Type Description System.String Methods Dismiss() Dismisses the ConfirmationPopup. Declaration public void Dismiss() Show() Shows the Popup. Declaration public void Show() Events BackButtonPressed Occurs when the device's back button is pressed. Declaration public event EventHandler BackButtonPressed Event Type Type Description System.EventHandler Implements System.ComponentModel.INotifyPropertyChanged"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Toast.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Toast.html",
    "title": "Class Toast",
    "keywords": "Class Toast The Toast class provides properties that show simple types of messages Inheritance System.Object Toast Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public sealed class Toast Examples Toast.DisplayText(\"Hello World\", 3000) Toast.DisplayIconText(\"Hello World\", new FileImageSource { File = \"icon.jpg\" }, 3000) Methods DisplayIconText(String, FileImageSource, Int32) It shows simplest icon and text messege. Declaration public static void DisplayIconText(string text, FileImageSource icon, int duration = 3000) Parameters Type Name Description System.String text The body text of the toast. Xamarin.Forms.FileImageSource icon The file path of the toast icon. System.Int32 duration How long to display the text in milliseconds. DisplayText(String, Int32) It shows the simplest form of the message. Declaration public static void DisplayText(string text, int duration = 3000) Parameters Type Name Description System.String text The body text of the toast. System.Int32 duration How long to display the text in milliseconds."
  },
  "api/Tizen.Wearable.CircularUI.Forms.CirclePage.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CirclePage.html",
    "title": "Class CirclePage",
    "keywords": "Class CirclePage The CirclePage is a ContentPage, which allows you to insert views that require CircleSurface, and you can show ToolbarItems with MoreOption. It has an ActionButton, and can use the MenuItem type as text, icon, command, and so on. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.VisualElement Xamarin.Forms.Page Xamarin.Forms.TemplatedPage Xamarin.Forms.ContentPage CirclePage Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.ILayout Xamarin.Forms.IPageController Xamarin.Forms.IElementConfiguration < Xamarin.Forms.Page > Inherited Members Xamarin.Forms.ContentPage.ContentProperty Xamarin.Forms.ContentPage.OnBindingContextChanged() Xamarin.Forms.ContentPage.Content Xamarin.Forms.TemplatedPage.ControlTemplateProperty Xamarin.Forms.TemplatedPage.ControlTemplate Xamarin.Forms.Page.BusySetSignalName Xamarin.Forms.Page.AlertSignalName Xamarin.Forms.Page.ActionSheetSignalName Xamarin.Forms.Page.BackgroundImageProperty Xamarin.Forms.Page.IsBusyProperty Xamarin.Forms.Page.PaddingProperty Xamarin.Forms.Page.TitleProperty Xamarin.Forms.Page.IconProperty Xamarin.Forms.Page.DisplayActionSheet(System.String, System.String, System.String, System.String[]) Xamarin.Forms.Page.DisplayAlert(System.String, System.String, System.String) Xamarin.Forms.Page.DisplayAlert(System.String, System.String, System.String, System.String) Xamarin.Forms.Page.ForceLayout() Xamarin.Forms.Page.SendBackButtonPressed() Xamarin.Forms.Page.LayoutChildren(System.Double, System.Double, System.Double, System.Double) Xamarin.Forms.Page.OnAppearing() Xamarin.Forms.Page.OnBackButtonPressed() Xamarin.Forms.Page.OnChildMeasureInvalidated(System.Object, System.EventArgs) Xamarin.Forms.Page.OnDisappearing() Xamarin.Forms.Page.OnParentSet() Xamarin.Forms.Page.OnSizeAllocated(System.Double, System.Double) Xamarin.Forms.Page.UpdateChildrenLayout() Xamarin.Forms.Page.On<T>() Xamarin.Forms.Page.BackgroundImage Xamarin.Forms.Page.Icon Xamarin.Forms.Page.IsBusy Xamarin.Forms.Page.Padding Xamarin.Forms.Page.Title Xamarin.Forms.Page.ToolbarItems Xamarin.Forms.Page.LayoutChanged Xamarin.Forms.Page.Appearing Xamarin.Forms.Page.Disappearing Xamarin.Forms.VisualElement.NavigationProperty Xamarin.Forms.VisualElement.InputTransparentProperty Xamarin.Forms.VisualElement.IsEnabledProperty Xamarin.Forms.VisualElement.XProperty Xamarin.Forms.VisualElement.YProperty Xamarin.Forms.VisualElement.AnchorXProperty Xamarin.Forms.VisualElement.AnchorYProperty Xamarin.Forms.VisualElement.TranslationXProperty Xamarin.Forms.VisualElement.TranslationYProperty Xamarin.Forms.VisualElement.WidthProperty Xamarin.Forms.VisualElement.HeightProperty Xamarin.Forms.VisualElement.RotationProperty Xamarin.Forms.VisualElement.RotationXProperty Xamarin.Forms.VisualElement.RotationYProperty Xamarin.Forms.VisualElement.ScaleProperty Xamarin.Forms.VisualElement.IsVisibleProperty Xamarin.Forms.VisualElement.OpacityProperty Xamarin.Forms.VisualElement.BackgroundColorProperty Xamarin.Forms.VisualElement.BehaviorsProperty Xamarin.Forms.VisualElement.TriggersProperty Xamarin.Forms.VisualElement.StyleProperty Xamarin.Forms.VisualElement.WidthRequestProperty Xamarin.Forms.VisualElement.HeightRequestProperty Xamarin.Forms.VisualElement.MinimumWidthRequestProperty Xamarin.Forms.VisualElement.MinimumHeightRequestProperty Xamarin.Forms.VisualElement.IsFocusedProperty Xamarin.Forms.VisualElement.FlowDirectionProperty Xamarin.Forms.VisualElement.BatchBegin() Xamarin.Forms.VisualElement.BatchCommit() Xamarin.Forms.VisualElement.Focus() Xamarin.Forms.VisualElement.GetSizeRequest(System.Double, System.Double) Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle) Xamarin.Forms.VisualElement.Measure(System.Double, System.Double, Xamarin.Forms.MeasureFlags) Xamarin.Forms.VisualElement.Unfocus() Xamarin.Forms.VisualElement.InvalidateMeasure() Xamarin.Forms.VisualElement.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildrenReordered() Xamarin.Forms.VisualElement.OnMeasure(System.Double, System.Double) Xamarin.Forms.VisualElement.OnSizeRequest(System.Double, System.Double) Xamarin.Forms.VisualElement.SizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.VisualElement.ChangeVisualState() Xamarin.Forms.VisualElement.FlowDirection Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.VisualElement.AnchorX Xamarin.Forms.VisualElement.AnchorY Xamarin.Forms.VisualElement.BackgroundColor Xamarin.Forms.VisualElement.Behaviors Xamarin.Forms.VisualElement.Bounds Xamarin.Forms.VisualElement.Height Xamarin.Forms.VisualElement.HeightRequest Xamarin.Forms.VisualElement.InputTransparent Xamarin.Forms.VisualElement.IsEnabled Xamarin.Forms.VisualElement.IsFocused Xamarin.Forms.VisualElement.IsVisible Xamarin.Forms.VisualElement.MinimumHeightRequest Xamarin.Forms.VisualElement.MinimumWidthRequest Xamarin.Forms.VisualElement.Navigation Xamarin.Forms.VisualElement.Opacity Xamarin.Forms.VisualElement.Rotation Xamarin.Forms.VisualElement.RotationX Xamarin.Forms.VisualElement.RotationY Xamarin.Forms.VisualElement.Scale Xamarin.Forms.VisualElement.Style Xamarin.Forms.VisualElement.StyleClass Xamarin.Forms.VisualElement.class Xamarin.Forms.VisualElement.TranslationX Xamarin.Forms.VisualElement.TranslationY Xamarin.Forms.VisualElement.Triggers Xamarin.Forms.VisualElement.Width Xamarin.Forms.VisualElement.WidthRequest Xamarin.Forms.VisualElement.X Xamarin.Forms.VisualElement.Y Xamarin.Forms.VisualElement.Resources Xamarin.Forms.VisualElement.ChildrenReordered Xamarin.Forms.VisualElement.Focused Xamarin.Forms.VisualElement.MeasureInvalidated Xamarin.Forms.VisualElement.SizeChanged Xamarin.Forms.VisualElement.Unfocused Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.ParentView Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.BindingContextChanged Xamarin.Forms.BindableObject.PropertyChanging System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CirclePage : ContentPage, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IAnimatable, IVisualElementController, IElementController, IResourcesProvider, IFlowDirectionController, IStyleSelectable, IStylable, ILayout, IPageController, IElementConfiguration<Page>, IPaddingElement, IControlTemplated Constructors CirclePage() Creates and initializes a new instance of the CirclePage class. Declaration public CirclePage() Fields ActionButtonProperty BindableProperty. Identifies the ActionButton bindable property. Declaration public static readonly BindableProperty ActionButtonProperty Field Value Type Description Xamarin.Forms.BindableProperty RotaryFocusObjectProperty BindableProperty. Identifies the RotaryFocusObject bindable property. Declaration public static readonly BindableProperty RotaryFocusObjectProperty Field Value Type Description Xamarin.Forms.BindableProperty RotaryFocusTargetNameProperty BindableProperty. Identifies the RotaryFocusTargetName bindable property. Declaration public static readonly BindableProperty RotaryFocusTargetNameProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties ActionButton Gets or sets ActionButton that presents a menu item and associates it with a command Declaration public ActionButtonItem ActionButton { get; set; } Property Value Type Description ActionButtonItem CircleSurfaceItems Gets a list of CircleSurfaceItems represented through CircleSurface. Declaration public IList<ICircleSurfaceItem> CircleSurfaceItems { get; } Property Value Type Description System.Collections.Generic.IList < ICircleSurfaceItem > RotaryFocusObject Gets object of RotaryFocusObject to receive bezel action(take a rotary event) from the current page. Declaration public IRotaryFocusable RotaryFocusObject { get; } Property Value Type Description IRotaryFocusable RotaryFocusTargetName Gets or sets target name of RotaryFocusObject. If RotaryFocusTargetName is set, it registers only a consumer in the RotaryFocusObject property to receive bezel action (take a rotary event) from the current page Declaration public string RotaryFocusTargetName { get; set; } Property Value Type Description System.String Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.ILayout Xamarin.Forms.IPageController Xamarin.Forms.IElementConfiguration<TElement>"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Radio.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Radio.html",
    "title": "Class Radio",
    "keywords": "Class Radio The Radio is a widget that allows one or more options to be displayed and have the user choose only one of them. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.VisualElement Xamarin.Forms.View Radio Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Inherited Members Xamarin.Forms.View.VerticalOptionsProperty Xamarin.Forms.View.HorizontalOptionsProperty Xamarin.Forms.View.MarginProperty Xamarin.Forms.View.OnBindingContextChanged() Xamarin.Forms.View.GestureRecognizers Xamarin.Forms.View.HorizontalOptions Xamarin.Forms.View.Margin Xamarin.Forms.View.VerticalOptions Xamarin.Forms.VisualElement.NavigationProperty Xamarin.Forms.VisualElement.InputTransparentProperty Xamarin.Forms.VisualElement.IsEnabledProperty Xamarin.Forms.VisualElement.XProperty Xamarin.Forms.VisualElement.YProperty Xamarin.Forms.VisualElement.AnchorXProperty Xamarin.Forms.VisualElement.AnchorYProperty Xamarin.Forms.VisualElement.TranslationXProperty Xamarin.Forms.VisualElement.TranslationYProperty Xamarin.Forms.VisualElement.WidthProperty Xamarin.Forms.VisualElement.HeightProperty Xamarin.Forms.VisualElement.RotationProperty Xamarin.Forms.VisualElement.RotationXProperty Xamarin.Forms.VisualElement.RotationYProperty Xamarin.Forms.VisualElement.ScaleProperty Xamarin.Forms.VisualElement.IsVisibleProperty Xamarin.Forms.VisualElement.OpacityProperty Xamarin.Forms.VisualElement.BackgroundColorProperty Xamarin.Forms.VisualElement.BehaviorsProperty Xamarin.Forms.VisualElement.TriggersProperty Xamarin.Forms.VisualElement.StyleProperty Xamarin.Forms.VisualElement.WidthRequestProperty Xamarin.Forms.VisualElement.HeightRequestProperty Xamarin.Forms.VisualElement.MinimumWidthRequestProperty Xamarin.Forms.VisualElement.MinimumHeightRequestProperty Xamarin.Forms.VisualElement.IsFocusedProperty Xamarin.Forms.VisualElement.FlowDirectionProperty Xamarin.Forms.VisualElement.BatchBegin() Xamarin.Forms.VisualElement.BatchCommit() Xamarin.Forms.VisualElement.Focus() Xamarin.Forms.VisualElement.GetSizeRequest(System.Double, System.Double) Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle) Xamarin.Forms.VisualElement.Measure(System.Double, System.Double, Xamarin.Forms.MeasureFlags) Xamarin.Forms.VisualElement.Unfocus() Xamarin.Forms.VisualElement.InvalidateMeasure() Xamarin.Forms.VisualElement.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildrenReordered() Xamarin.Forms.VisualElement.OnMeasure(System.Double, System.Double) Xamarin.Forms.VisualElement.OnParentSet() Xamarin.Forms.VisualElement.OnSizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.OnSizeRequest(System.Double, System.Double) Xamarin.Forms.VisualElement.SizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.VisualElement.ChangeVisualState() Xamarin.Forms.VisualElement.FlowDirection Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.VisualElement.AnchorX Xamarin.Forms.VisualElement.AnchorY Xamarin.Forms.VisualElement.BackgroundColor Xamarin.Forms.VisualElement.Behaviors Xamarin.Forms.VisualElement.Bounds Xamarin.Forms.VisualElement.Height Xamarin.Forms.VisualElement.HeightRequest Xamarin.Forms.VisualElement.InputTransparent Xamarin.Forms.VisualElement.IsEnabled Xamarin.Forms.VisualElement.IsFocused Xamarin.Forms.VisualElement.IsVisible Xamarin.Forms.VisualElement.MinimumHeightRequest Xamarin.Forms.VisualElement.MinimumWidthRequest Xamarin.Forms.VisualElement.Navigation Xamarin.Forms.VisualElement.Opacity Xamarin.Forms.VisualElement.Rotation Xamarin.Forms.VisualElement.RotationX Xamarin.Forms.VisualElement.RotationY Xamarin.Forms.VisualElement.Scale Xamarin.Forms.VisualElement.Style Xamarin.Forms.VisualElement.StyleClass Xamarin.Forms.VisualElement.class Xamarin.Forms.VisualElement.TranslationX Xamarin.Forms.VisualElement.TranslationY Xamarin.Forms.VisualElement.Triggers Xamarin.Forms.VisualElement.Width Xamarin.Forms.VisualElement.WidthRequest Xamarin.Forms.VisualElement.X Xamarin.Forms.VisualElement.Y Xamarin.Forms.VisualElement.Resources Xamarin.Forms.VisualElement.ChildrenReordered Xamarin.Forms.VisualElement.Focused Xamarin.Forms.VisualElement.MeasureInvalidated Xamarin.Forms.VisualElement.SizeChanged Xamarin.Forms.VisualElement.Unfocused Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.ParentView Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.BindingContextChanged Xamarin.Forms.BindableObject.PropertyChanging System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class Radio : View, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IAnimatable, IResourcesProvider, IFlowDirectionController, IStyleSelectable, IStylable, IViewController, IVisualElementController, IElementController Examples var radio1 = new Radio { GroupName = \"SoundMode\", IsSelected = true, Value = \"sound\" } var radio2 = new Radio { GroupName = \"SoundMode\", IsSelected = false, Value = \"vibrate\" } radio1.Selected += (s,e) => { Console.WriteLine($\"radio1 selected! value:{e.Value}\"); }; radio2.Selected += (s,e) => { Console.WriteLine($\"radio2 selected! value:{e.Value}\"); }; Fields GroupNameProperty BindableProperty. Identifies the GroupName bindable property. Declaration public static readonly BindableProperty GroupNameProperty Field Value Type Description Xamarin.Forms.BindableProperty IsSelectedProperty BindableProperty. Identifies the IsSelected bindable property. Declaration public static readonly BindableProperty IsSelectedProperty Field Value Type Description Xamarin.Forms.BindableProperty ValueProperty BindableProperty. Identifies the Value bindable property. Declaration public static readonly BindableProperty ValueProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties GroupName Gets or sets the name that specifies which Radio controls are mutually exclusive. It can be set to null. Declaration public string GroupName { get; set; } Property Value Type Description System.String IsSelected Gets or sets a boolean value that indicates whether this Radio is selected. Declaration public bool IsSelected { get; set; } Property Value Type Description System.Boolean Value Gets or sets the value of the Radio. This is a bindable property. Declaration public string Value { get; set; } Property Value Type Description System.String Events Selected Occurs when the Radio selection was changed. Declaration public event EventHandler<SelectedEventArgs> Selected Event Type Type Description System.EventHandler < SelectedEventArgs > Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleSurfaceEffectBehavior.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleSurfaceEffectBehavior.html",
    "title": "Class CircleSurfaceEffectBehavior",
    "keywords": "Class CircleSurfaceEffectBehavior The CircleSurfaceEffectBehavior is an effect which allows you to insert views that require CircleSurface. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Behavior Xamarin.Forms.Behavior < Xamarin.Forms.Page > CircleSurfaceEffectBehavior Implements System.ComponentModel.INotifyPropertyChanged Inherited Members Xamarin.Forms.Behavior<Xamarin.Forms.Page>.OnAttachedTo(Xamarin.Forms.BindableObject) Xamarin.Forms.Behavior<Xamarin.Forms.Page>.OnDetachingFrom(Xamarin.Forms.BindableObject) Xamarin.Forms.Behavior.AssociatedType Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnBindingContextChanged() Xamarin.Forms.BindableObject.OnPropertyChanged(System.String) Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.BindingContextChanged Xamarin.Forms.BindableObject.PropertyChanging System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleSurfaceEffectBehavior : Behavior<Page>, INotifyPropertyChanged, IDynamicResourceHandler, IAttachedObject Properties RotaryFocusObject Gets object of RotaryFocusObject to receive bezel action(take a rotary event) from the current page. Declaration public IRotaryFocusable RotaryFocusObject { get; set; } Property Value Type Description IRotaryFocusable RotaryFocusTargetName Gets or sets target name of RotaryFocusObject. If RotaryFocusTargetName is set, it registers only a consumer in the RotaryFocusObject property to receive bezel action (take a rotary event) from the current page Declaration public string RotaryFocusTargetName { set; } Property Value Type Description System.String Methods OnAttachedTo(Page) Declaration protected override void OnAttachedTo(Page page) Parameters Type Name Description Xamarin.Forms.Page page Overrides Xamarin.Forms.Behavior<Xamarin.Forms.Page>.OnAttachedTo(Xamarin.Forms.Page) OnDetachingFrom(Page) Declaration protected override void OnDetachingFrom(Page page) Parameters Type Name Description Xamarin.Forms.Page page Overrides Xamarin.Forms.Behavior<Xamarin.Forms.Page>.OnDetachingFrom(Xamarin.Forms.Page) Implements System.ComponentModel.INotifyPropertyChanged"
  },
  "api/Tizen.Wearable.CircularUI.Forms.IndexPage.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.IndexPage.html",
    "title": "Class IndexPage",
    "keywords": "Class IndexPage The IndexPage is extension of Xamarin.Forms.MultiPage. When Page is added/removed at Multipage. circular index is added/removed automatically at the top of window. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.VisualElement Xamarin.Forms.Page Xamarin.Forms.MultiPage < Xamarin.Forms.ContentPage > IndexPage Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.ILayout Xamarin.Forms.IPageController Xamarin.Forms.IElementConfiguration < Xamarin.Forms.Page > Xamarin.Forms.IViewContainer < Xamarin.Forms.ContentPage > Xamarin.Forms.IPageContainer < Xamarin.Forms.ContentPage > Xamarin.Forms.IItemsView < Xamarin.Forms.ContentPage > Xamarin.Forms.IMultiPageController < Xamarin.Forms.ContentPage > Inherited Members Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.ItemsSourceProperty Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.ItemTemplateProperty Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.SelectedItemProperty Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.Xamarin.Forms.IItemsView<Xamarin.Forms.ContentPage>.CreateDefault(System.Object) Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.Xamarin.Forms.IItemsView<Xamarin.Forms.ContentPage>.SetupContent(Xamarin.Forms.ContentPage, System.Int32) Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.Xamarin.Forms.IItemsView<Xamarin.Forms.ContentPage>.UnhookContent(Xamarin.Forms.ContentPage) Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.OnBackButtonPressed() Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.OnCurrentPageChanged() Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.OnPagesChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs) Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.OnPropertyChanged(System.String) Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.SetupContent(Xamarin.Forms.ContentPage, System.Int32) Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.UnhookContent(Xamarin.Forms.ContentPage) Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.ItemsSource Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.ItemTemplate Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.SelectedItem Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.CurrentPage Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.Children Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.CurrentPageChanged Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.PagesChanged Xamarin.Forms.Page.BusySetSignalName Xamarin.Forms.Page.AlertSignalName Xamarin.Forms.Page.ActionSheetSignalName Xamarin.Forms.Page.BackgroundImageProperty Xamarin.Forms.Page.IsBusyProperty Xamarin.Forms.Page.PaddingProperty Xamarin.Forms.Page.TitleProperty Xamarin.Forms.Page.IconProperty Xamarin.Forms.Page.DisplayActionSheet(System.String, System.String, System.String, System.String[]) Xamarin.Forms.Page.DisplayAlert(System.String, System.String, System.String) Xamarin.Forms.Page.DisplayAlert(System.String, System.String, System.String, System.String) Xamarin.Forms.Page.ForceLayout() Xamarin.Forms.Page.SendBackButtonPressed() Xamarin.Forms.Page.LayoutChildren(System.Double, System.Double, System.Double, System.Double) Xamarin.Forms.Page.OnAppearing() Xamarin.Forms.Page.OnBindingContextChanged() Xamarin.Forms.Page.OnChildMeasureInvalidated(System.Object, System.EventArgs) Xamarin.Forms.Page.OnDisappearing() Xamarin.Forms.Page.OnParentSet() Xamarin.Forms.Page.OnSizeAllocated(System.Double, System.Double) Xamarin.Forms.Page.UpdateChildrenLayout() Xamarin.Forms.Page.On<T>() Xamarin.Forms.Page.BackgroundImage Xamarin.Forms.Page.Icon Xamarin.Forms.Page.IsBusy Xamarin.Forms.Page.Padding Xamarin.Forms.Page.Title Xamarin.Forms.Page.ToolbarItems Xamarin.Forms.Page.LayoutChanged Xamarin.Forms.Page.Appearing Xamarin.Forms.Page.Disappearing Xamarin.Forms.VisualElement.NavigationProperty Xamarin.Forms.VisualElement.InputTransparentProperty Xamarin.Forms.VisualElement.IsEnabledProperty Xamarin.Forms.VisualElement.XProperty Xamarin.Forms.VisualElement.YProperty Xamarin.Forms.VisualElement.AnchorXProperty Xamarin.Forms.VisualElement.AnchorYProperty Xamarin.Forms.VisualElement.TranslationXProperty Xamarin.Forms.VisualElement.TranslationYProperty Xamarin.Forms.VisualElement.WidthProperty Xamarin.Forms.VisualElement.HeightProperty Xamarin.Forms.VisualElement.RotationProperty Xamarin.Forms.VisualElement.RotationXProperty Xamarin.Forms.VisualElement.RotationYProperty Xamarin.Forms.VisualElement.ScaleProperty Xamarin.Forms.VisualElement.IsVisibleProperty Xamarin.Forms.VisualElement.OpacityProperty Xamarin.Forms.VisualElement.BackgroundColorProperty Xamarin.Forms.VisualElement.BehaviorsProperty Xamarin.Forms.VisualElement.TriggersProperty Xamarin.Forms.VisualElement.StyleProperty Xamarin.Forms.VisualElement.WidthRequestProperty Xamarin.Forms.VisualElement.HeightRequestProperty Xamarin.Forms.VisualElement.MinimumWidthRequestProperty Xamarin.Forms.VisualElement.MinimumHeightRequestProperty Xamarin.Forms.VisualElement.IsFocusedProperty Xamarin.Forms.VisualElement.FlowDirectionProperty Xamarin.Forms.VisualElement.BatchBegin() Xamarin.Forms.VisualElement.BatchCommit() Xamarin.Forms.VisualElement.Focus() Xamarin.Forms.VisualElement.GetSizeRequest(System.Double, System.Double) Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle) Xamarin.Forms.VisualElement.Measure(System.Double, System.Double, Xamarin.Forms.MeasureFlags) Xamarin.Forms.VisualElement.Unfocus() Xamarin.Forms.VisualElement.InvalidateMeasure() Xamarin.Forms.VisualElement.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildrenReordered() Xamarin.Forms.VisualElement.OnMeasure(System.Double, System.Double) Xamarin.Forms.VisualElement.OnSizeRequest(System.Double, System.Double) Xamarin.Forms.VisualElement.SizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.VisualElement.ChangeVisualState() Xamarin.Forms.VisualElement.FlowDirection Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.VisualElement.AnchorX Xamarin.Forms.VisualElement.AnchorY Xamarin.Forms.VisualElement.BackgroundColor Xamarin.Forms.VisualElement.Behaviors Xamarin.Forms.VisualElement.Bounds Xamarin.Forms.VisualElement.Height Xamarin.Forms.VisualElement.HeightRequest Xamarin.Forms.VisualElement.InputTransparent Xamarin.Forms.VisualElement.IsEnabled Xamarin.Forms.VisualElement.IsFocused Xamarin.Forms.VisualElement.IsVisible Xamarin.Forms.VisualElement.MinimumHeightRequest Xamarin.Forms.VisualElement.MinimumWidthRequest Xamarin.Forms.VisualElement.Navigation Xamarin.Forms.VisualElement.Opacity Xamarin.Forms.VisualElement.Rotation Xamarin.Forms.VisualElement.RotationX Xamarin.Forms.VisualElement.RotationY Xamarin.Forms.VisualElement.Scale Xamarin.Forms.VisualElement.Style Xamarin.Forms.VisualElement.StyleClass Xamarin.Forms.VisualElement.class Xamarin.Forms.VisualElement.TranslationX Xamarin.Forms.VisualElement.TranslationY Xamarin.Forms.VisualElement.Triggers Xamarin.Forms.VisualElement.Width Xamarin.Forms.VisualElement.WidthRequest Xamarin.Forms.VisualElement.X Xamarin.Forms.VisualElement.Y Xamarin.Forms.VisualElement.Resources Xamarin.Forms.VisualElement.ChildrenReordered Xamarin.Forms.VisualElement.Focused Xamarin.Forms.VisualElement.MeasureInvalidated Xamarin.Forms.VisualElement.SizeChanged Xamarin.Forms.VisualElement.Unfocused Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.ParentView Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.BindingContextChanged Xamarin.Forms.BindableObject.PropertyChanging System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class IndexPage : MultiPage<ContentPage>, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IAnimatable, IVisualElementController, IElementController, IResourcesProvider, IFlowDirectionController, IStyleSelectable, IStylable, ILayout, IPageController, IElementConfiguration<Page>, IPaddingElement, IViewContainer<ContentPage>, IPageContainer<ContentPage>, IItemsView<ContentPage>, IMultiPageController<ContentPage> Methods CreateDefault(Object) Declaration protected override ContentPage CreateDefault(object item) Parameters Type Name Description System.Object item Returns Type Description Xamarin.Forms.ContentPage Overrides Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.CreateDefault(System.Object) Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.ILayout Xamarin.Forms.IPageController Xamarin.Forms.IElementConfiguration<TElement> Xamarin.Forms.IViewContainer<T> Xamarin.Forms.IPageContainer<T> Xamarin.Forms.IItemsView<T> Xamarin.Forms.IMultiPageController<T>"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleToolbarItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleToolbarItem.html",
    "title": "Class CircleToolbarItem",
    "keywords": "Class CircleToolbarItem The CircleToolbarItem is a class that extends Xamarin.Forms.ToolbarItem for Circular UI. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.BaseMenuItem Xamarin.Forms.MenuItem Xamarin.Forms.ToolbarItem CircleToolbarItem Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController Xamarin.Forms.IMenuItemController Inherited Members Xamarin.Forms.ToolbarItem.Name Xamarin.Forms.ToolbarItem.Order Xamarin.Forms.ToolbarItem.Priority Xamarin.Forms.ToolbarItem.Activated Xamarin.Forms.MenuItem.AcceleratorProperty Xamarin.Forms.MenuItem.TextProperty Xamarin.Forms.MenuItem.CommandProperty Xamarin.Forms.MenuItem.CommandParameterProperty Xamarin.Forms.MenuItem.IsDestructiveProperty Xamarin.Forms.MenuItem.IconProperty Xamarin.Forms.MenuItem.GetAccelerator(Xamarin.Forms.BindableObject) Xamarin.Forms.MenuItem.SetAccelerator(Xamarin.Forms.BindableObject, Xamarin.Forms.Accelerator) Xamarin.Forms.MenuItem.OnClicked() Xamarin.Forms.MenuItem.Command Xamarin.Forms.MenuItem.CommandParameter Xamarin.Forms.MenuItem.Icon Xamarin.Forms.MenuItem.IsDestructive Xamarin.Forms.MenuItem.Text Xamarin.Forms.MenuItem.Clicked Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnBindingContextChanged() Xamarin.Forms.Element.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.Element.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.Element.OnParentSet() Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.ParentView Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.BindingContextChanged Xamarin.Forms.BindableObject.PropertyChanging System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleToolbarItem : ToolbarItem, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IElementController, IStyleSelectable, IMenuItemController Fields SubTextProperty BindableProperty. Identifies the Subtext bindable property to display on the menu item. Declaration public static readonly BindableProperty SubTextProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties SubText Gets or sets Subtext to display on the menu item Declaration public string SubText { get; set; } Property Value Type Description System.String Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController Xamarin.Forms.IMenuItemController"
  },
  "api/Tizen.Wearable.CircularUI.Forms.DateTimeType.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.DateTimeType.html",
    "title": "Enum DateTimeType",
    "keywords": "Enum DateTimeType Enumeration for style type of CircleDateTimeSelector Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public enum DateTimeType Fields Name Description Date Style type of \"datepicker/circle\" Time Style type of \"timepicker/circle\""
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.ConfirmationPopupImplementation.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.ConfirmationPopupImplementation.html",
    "title": "Class ConfirmationPopupImplementation",
    "keywords": "Class ConfirmationPopupImplementation Inheritance System.Object ConfirmationPopupImplementation Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class ConfirmationPopupImplementation : IConfirmationPopup, IDisposable Constructors ConfirmationPopupImplementation() Declaration public ConfirmationPopupImplementation() Properties Content Declaration public View Content { get; set; } Property Value Type Description Xamarin.Forms.View FirstButton Declaration public MenuItem FirstButton { get; set; } Property Value Type Description Xamarin.Forms.MenuItem SecondButton Declaration public MenuItem SecondButton { get; set; } Property Value Type Description Xamarin.Forms.MenuItem Text Declaration public string Text { get; set; } Property Value Type Description System.String Title Declaration public string Title { get; set; } Property Value Type Description System.String Methods Dismiss() Declaration public void Dismiss() Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Finalize() Declaration protected void Finalize() Show() Declaration public void Show() Events BackButtonPressed Declaration public event EventHandler BackButtonPressed Event Type Type Description System.EventHandler Implements System.IDisposable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.HeaderOrFooterItemClass.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.HeaderOrFooterItemClass.html",
    "title": "Class HeaderOrFooterItemClass",
    "keywords": "Class HeaderOrFooterItemClass Inheritance System.Object GenItemClass HeaderOrFooterItemClass Implements System.IDisposable Inherited Members GenItemClass.Dispose(Boolean) GenItemClass.Dispose() GenItemClass.CreateItemClass() GenItemClass.ReleaseItemClass(IntPtr) GenItemClass.ItemStyle GenItemClass.GetTextHandler GenItemClass.GetContentHandler GenItemClass.DeleteHandler GenItemClass.ReusableContentHandler System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class HeaderOrFooterItemClass : GenItemClass, IDisposable Constructors HeaderOrFooterItemClass() Declaration public HeaderOrFooterItemClass() Methods OnGetContent(Object, String) Declaration protected EvasObject OnGetContent(object data, string part) Parameters Type Name Description System.Object data System.String part Returns Type Description EvasObject Implements System.IDisposable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.TwoButtonPageRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.TwoButtonPageRenderer.html",
    "title": "Class TwoButtonPageRenderer",
    "keywords": "Class TwoButtonPageRenderer Inheritance System.Object Xamarin.Forms.Platform.Tizen.VisualElementRenderer < TwoButtonPage > TwoButtonPageRenderer Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider Inherited Members Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.Dispose() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.GetDesiredSize(System.Double, System.Double) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.SetElement(Tizen.Wearable.CircularUI.Forms.TwoButtonPage) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.SetElement(Xamarin.Forms.VisualElement) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.Xamarin.Forms.IEffectControlProvider.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.OnElementPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.SetNativeView(ElmSharp.EvasObject) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.RegisterPropertyHandler(System.String, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.RegisterPropertyHandler(System.String, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.UpdateAllProperties(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.OnElementReady() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.MinimumSize() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.Measure(System.Int32, System.Int32) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.UpdateOpacity(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.UpdateInputTransparent(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.UpdateThemeStyle() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.ApplyTransformation() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.NativeView Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class TwoButtonPageRenderer : VisualElementRenderer<TwoButtonPage>, IVisualElementRenderer, IRegisterable, IDisposable, IEffectControlProvider Constructors TwoButtonPageRenderer() Declaration public TwoButtonPageRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.Dispose(System.Boolean) GetNativeContentGeometry() Declaration public override Rect GetNativeContentGeometry() Returns Type Description Rect Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.GetNativeContentGeometry() OnElementChanged(ElementChangedEventArgs<TwoButtonPage>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<TwoButtonPage> e) Parameters Type Name Description Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs < TwoButtonPage > e Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>) UpdateBackgroundColor(Boolean) Declaration protected override void UpdateBackgroundColor(bool initialize) Parameters Type Name Description System.Boolean initialize Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.UpdateBackgroundColor(System.Boolean) UpdateLayout() Declaration protected override void UpdateLayout() Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.UpdateLayout() Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleDateTimeSelectorRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleDateTimeSelectorRenderer.html",
    "title": "Class CircleDateTimeSelectorRenderer",
    "keywords": "Class CircleDateTimeSelectorRenderer Inheritance System.Object Xamarin.Forms.Platform.Tizen.VisualElementRenderer < CircleDateTimeSelector > Xamarin.Forms.Platform.Tizen.ViewRenderer < CircleDateTimeSelector , CircleDateTimeSelector > CircleDateTimeSelectorRenderer Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider Inherited Members Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector, ElmSharp.Wearable.CircleDateTimeSelector>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector, ElmSharp.Wearable.CircleDateTimeSelector>.SetNativeControl(ElmSharp.Wearable.CircleDateTimeSelector) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector, ElmSharp.Wearable.CircleDateTimeSelector>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector, ElmSharp.Wearable.CircleDateTimeSelector>.Control Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.Dispose() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.GetDesiredSize(System.Double, System.Double) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.SetElement(Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.SetElement(Xamarin.Forms.VisualElement) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.Xamarin.Forms.IEffectControlProvider.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.Dispose(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.OnElementPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.SetNativeView(ElmSharp.EvasObject) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.RegisterPropertyHandler(System.String, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.RegisterPropertyHandler(System.String, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.UpdateAllProperties(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.OnElementReady() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.UpdateBackgroundColor(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.UpdateOpacity(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.GetNativeContentGeometry() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.UpdateInputTransparent(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.UpdateThemeStyle() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.ApplyTransformation() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.NativeView Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleDateTimeSelectorRenderer : ViewRenderer<CircleDateTimeSelector, CircleDateTimeSelector>, IVisualElementRenderer, IRegisterable, IDisposable, IEffectControlProvider Constructors CircleDateTimeSelectorRenderer() Declaration public CircleDateTimeSelectorRenderer() Methods Measure(Int32, Int32) Declaration protected override Size Measure(int availableWidth, int availableHeight) Parameters Type Name Description System.Int32 availableWidth System.Int32 availableHeight Returns Type Description Size Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.Measure(System.Int32, System.Int32) MinimumSize() Declaration protected override Size MinimumSize() Returns Type Description Xamarin.Forms.Size Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.MinimumSize() OnElementChanged(ElementChangedEventArgs<CircleDateTimeSelector>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<CircleDateTimeSelector> e) Parameters Type Name Description Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs < CircleDateTimeSelector > e Overrides Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector, ElmSharp.Wearable.CircleDateTimeSelector>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>) Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleSliderSurfaceItemImplements.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleSliderSurfaceItemImplements.html",
    "title": "Class CircleSliderSurfaceItemImplements",
    "keywords": "Class CircleSliderSurfaceItemImplements Inheritance System.Object EvasObject AccessibleObject Widget CircleSlider CircleSliderSurfaceItemImplements Implements IAccessibleObject IRotaryActionWidget ICircleWidget Inherited Members CircleSlider.OnRealized() CircleSlider.CreateHandle(EvasObject) CircleSlider.CircleHandle CircleSlider.CircleSurface CircleSlider.Step CircleSlider.IsEnabled CircleSlider.BarColor CircleSlider.BackgroundColor CircleSlider.BarLineWidth CircleSlider.BackgroundLineWidth CircleSlider.BarAngle CircleSlider.BackgroundAngle CircleSlider.BarAngleOffset CircleSlider.BackgroundAngleOffset CircleSlider.BarAngleMinimum CircleSlider.BarAngleMaximum CircleSlider.Minimum CircleSlider.Maximum CircleSlider.Value CircleSlider.BarRadius CircleSlider.BackgroundRadius CircleSlider.ValueChanged Widget.UpdatePartContents(EvasObject, String) Widget.SetFocus(Boolean) Widget.AllowFocus(Boolean) Widget.FocusNext(FocusDirection) Widget.SetNextFocusObject(EvasObject, FocusDirection) Widget.SetPartContent(String, EvasObject) Widget.SetPartContent(String, EvasObject, Boolean) Widget.SetContent(EvasObject) Widget.SetContent(EvasObject, Boolean) Widget.SetPartText(String, String) Widget.GetPartText(String) Widget.SetPartColor(String, Color) Widget.GetPartColor(String) Widget.SetPartOpacity(String, Int32) Widget.GetPartOpacity(String) Widget.SignalEmit(String, String) Widget.Style Widget.IsFocused Widget.IsFocusAllowed Widget.Text Widget.Opacity Widget.AllowTreeFocus Widget.IsMirroredMode Widget.IsAutoMirroredMode Widget.Focused Widget.Unfocused AccessibleObject.IAccessibleObject.AppendRelation(IAccessibleRelation) AccessibleObject.IAccessibleObject.RemoveRelation(IAccessibleRelation) AccessibleObject.Highlight() AccessibleObject.Unhighlight() AccessibleObject.IAccessibleObject.ReadingInfoType AccessibleObject.IAccessibleObject.Role AccessibleObject.IAccessibleObject.CanHighlight AccessibleObject.IAccessibleObject.TranslationDomain AccessibleObject.IAccessibleObject.Name AccessibleObject.IAccessibleObject.Description AccessibleObject.IAccessibleObject.NameProvider AccessibleObject.IAccessibleObject.DescriptionProvider EvasObject.SetClip(EvasObject) EvasObject.SetAlignment(Double, Double) EvasObject.SetWeight(Double, Double) EvasObject.SetTooltipText(String) EvasObject.UnsetTooltip() EvasObject.PushTooltipMoveFreeze() EvasObject.PopTooltipMoveFreeze() EvasObject.HideTooltip() EvasObject.ShowTooltip() EvasObject.Show() EvasObject.Hide() EvasObject.Resize(Int32, Int32) EvasObject.Move(Int32, Int32) EvasObject.Lower() EvasObject.KeyGrab(String, Boolean) EvasObject.KeyUngrab(String) EvasObject.MarkChanged() EvasObject.Calculate() EvasObject.SetSizeHintAspect(AspectControl, Int32, Int32) EvasObject.GetSizeHintAspect(AspectControl, Int32, Int32) EvasObject.StackBelow(EvasObject) EvasObject.StackAbove(EvasObject) EvasObject.RaiseTop() EvasObject.GetTextBlockGeometryByLineNumber(Int32, Int32, Int32, Int32, Int32) EvasObject.OnInvalidate() EvasObject.OnInstantiated() EvasObject.OnUnrealize() EvasObject.Realize(EvasObject) EvasObject.Unrealize() EvasObject.Handle EvasObject.Parent EvasObject.RealHandle EvasObject.IsRealized EvasObject.EvasCanvas EvasObject.ClassName EvasObject.WeightX EvasObject.WeightY EvasObject.AlignmentX EvasObject.AlignmentY EvasObject.MinimumWidth EvasObject.MinimumHeight EvasObject.IsVisible EvasObject.Geometry EvasObject.Color EvasObject.IsMapEnabled EvasObject.EvasMap EvasObject.RepeatEvents EvasObject.PropagateEvents EvasObject.PassEvents EvasObject.TooltipStyle EvasObject.TooltipOrientation EvasObject.TooltipWindowMode EvasObject.TooltipContentDelegate EvasObject.TooltipMoveFreezeCount EvasObject.AllEventsFrozen EvasObject.Layer EvasObject.Deleted EvasObject.KeyUp EvasObject.KeyDown EvasObject.BackButtonPressed EvasObject.MoreButtonPressed EvasObject.Moved EvasObject.Resized EvasObject.RenderPost System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleSliderSurfaceItemImplements : CircleSlider, IAccessibleObject, IRotaryActionWidget, ICircleWidget Constructors CircleSliderSurfaceItemImplements(CircleSliderSurfaceItem, EvasObject, CircleSurface) Declaration public CircleSliderSurfaceItemImplements(CircleSliderSurfaceItem item, EvasObject parent, CircleSurface surface) Parameters Type Name Description CircleSliderSurfaceItem item EvasObject parent CircleSurface surface Implements IAccessibleObject IRotaryActionWidget ICircleWidget"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CirclePageRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CirclePageRenderer.html",
    "title": "Class CirclePageRenderer",
    "keywords": "Class CirclePageRenderer Inheritance System.Object Xamarin.Forms.Platform.Tizen.VisualElementRenderer < CirclePage > CirclePageRenderer Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider Inherited Members Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.Dispose() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.GetDesiredSize(System.Double, System.Double) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.SetElement(Tizen.Wearable.CircularUI.Forms.CirclePage) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.SetElement(Xamarin.Forms.VisualElement) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.Xamarin.Forms.IEffectControlProvider.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.OnElementPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.SetNativeView(ElmSharp.EvasObject) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.RegisterPropertyHandler(System.String, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.RegisterPropertyHandler(System.String, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.UpdateAllProperties(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.OnElementReady() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.MinimumSize() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.Measure(System.Int32, System.Int32) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.UpdateOpacity(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.GetNativeContentGeometry() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.UpdateInputTransparent(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.UpdateThemeStyle() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.ApplyTransformation() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.NativeView Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CirclePageRenderer : VisualElementRenderer<CirclePage>, IVisualElementRenderer, IRegisterable, IDisposable, IEffectControlProvider Constructors CirclePageRenderer() Declaration public CirclePageRenderer() Properties CircleSurface Declaration public CircleSurface CircleSurface { get; } Property Value Type Description CircleSurface Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.Dispose(System.Boolean) OnElementChanged(ElementChangedEventArgs<CirclePage>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<CirclePage> e) Parameters Type Name Description Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs < CirclePage > e Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.CirclePage>) UpdateBackgroundColor(Boolean) Declaration protected override void UpdateBackgroundColor(bool initialize) Parameters Type Name Description System.Boolean initialize Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.UpdateBackgroundColor(System.Boolean) UpdateBackgroundImage(Boolean) Declaration protected void UpdateBackgroundImage(bool initialize) Parameters Type Name Description System.Boolean initialize Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleListView.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleListView.html",
    "title": "Class CircleListView",
    "keywords": "Class CircleListView Inheritance System.Object EvasObject AccessibleObject Widget Container Layout GenList CircleGenList CircleListView Implements IAccessibleObject IRotaryActionWidget ICircleWidget Inherited Members CircleGenList.CreateHandle(EvasObject) CircleGenList.CircleHandle CircleGenList.CircleSurface CircleGenList.IsEnabled CircleGenList.VerticalScrollBackgroundColor CircleGenList.VerticalScrollBackgroundLineWidth CircleGenList.VerticalScrollBackgroundRadius CircleGenList.VerticalScrollBarColor CircleGenList.VerticalScrollBarLineWidth CircleGenList.VerticalScrollBarRadius CircleGenList.VerticalScrollBarVisiblePolicy GenList.Append(GenItemClass, Object) GenList.Append(GenItemClass, Object, GenListItemType) GenList.Append(GenItemClass, Object, GenListItemType, GenListItem) GenList.Prepend(GenItemClass, Object) GenList.Prepend(GenItemClass, Object, GenListItemType) GenList.Prepend(GenItemClass, Object, GenListItemType, GenListItem) GenList.InsertBefore(GenItemClass, Object, GenListItem) GenList.InsertBefore(GenItemClass, Object, GenListItem, GenListItemType) GenList.InsertBefore(GenItemClass, Object, GenListItem, GenListItemType, GenListItem) GenList.InsertAfter(GenItemClass, Object, GenListItem, GenListItemType, GenListItem) GenList.InsertSorted(GenItemClass, Object, Comparison<Object>, GenListItemType, GenListItem) GenList.ScrollTo(GenListItem, ScrollToPosition, Boolean) GenList.UpdateRealizedItems() GenList.GetItemByPosition(Int32, Int32, Int32) GenList.GetItemByIndex(Int32) GenList.Homogeneous GenList.ListMode GenList.FirstItem GenList.LastItem GenList.ReorderMode GenList.BlockCount GenList.IsHighlight GenList.LongPressTimeout GenList.FocusOnSelection GenList.IsMultiSelection GenList.SelectedItem GenList.SelectionMode GenList.Count GenList.ItemSelected GenList.ItemUnselected GenList.ItemPressed GenList.ItemReleased GenList.ItemActivated GenList.ItemDoubleClicked GenList.ItemExpanded GenList.ItemRealized GenList.ItemUnrealized GenList.ItemLongPressed GenList.ItemMoved GenList.ItemMovedAfter GenList.ItemMovedBefore GenList.Changed GenList.ScrollAnimationStarted GenList.ScrollAnimationStopped Layout.Freeze() Layout.Thaw() Layout.Resizing() Layout.Resizing(Boolean, Boolean) Layout.GetEdjeData(String) Layout.GetPartText(String) Layout.SetPartText(String, String) Layout.BoxAppend(String, EvasObject) Layout.BoxPrepend(String, EvasObject) Layout.BoxRemove(String, EvasObject) Layout.BoxRemoveAll(String, Boolean) Layout.BoxInsertAt(String, EvasObject, UInt32) Layout.BoxInsertBefore(String, EvasObject, EvasObject) Layout.SetPartContent(String, EvasObject) Layout.SetPartContent(String, EvasObject, Boolean) Layout.SetTheme(String, String, String) Layout.SetFile(String, String) Layout.SetVerticalTextAlignment(String, Double) Layout.GetVerticalTextAlignment(String) Layout.EdjeObject Layout.TextBlockAccessibility Layout.BackgroundColor Layout.LanguageChanged Layout.ThemeChanged Container.AddChild(EvasObject) Container.RemoveChild(EvasObject) Container.ClearChildren() Container.Children Widget.UpdatePartContents(EvasObject, String) Widget.SetFocus(Boolean) Widget.AllowFocus(Boolean) Widget.FocusNext(FocusDirection) Widget.SetNextFocusObject(EvasObject, FocusDirection) Widget.SetContent(EvasObject) Widget.SetContent(EvasObject, Boolean) Widget.SetPartColor(String, Color) Widget.GetPartColor(String) Widget.SetPartOpacity(String, Int32) Widget.GetPartOpacity(String) Widget.SignalEmit(String, String) Widget.Style Widget.IsFocused Widget.IsFocusAllowed Widget.Text Widget.Opacity Widget.AllowTreeFocus Widget.IsMirroredMode Widget.IsAutoMirroredMode Widget.Focused Widget.Unfocused AccessibleObject.IAccessibleObject.AppendRelation(IAccessibleRelation) AccessibleObject.IAccessibleObject.RemoveRelation(IAccessibleRelation) AccessibleObject.Highlight() AccessibleObject.Unhighlight() AccessibleObject.IAccessibleObject.ReadingInfoType AccessibleObject.IAccessibleObject.Role AccessibleObject.IAccessibleObject.CanHighlight AccessibleObject.IAccessibleObject.TranslationDomain AccessibleObject.IAccessibleObject.Name AccessibleObject.IAccessibleObject.Description AccessibleObject.IAccessibleObject.NameProvider AccessibleObject.IAccessibleObject.DescriptionProvider EvasObject.SetClip(EvasObject) EvasObject.SetAlignment(Double, Double) EvasObject.SetWeight(Double, Double) EvasObject.SetTooltipText(String) EvasObject.UnsetTooltip() EvasObject.PushTooltipMoveFreeze() EvasObject.PopTooltipMoveFreeze() EvasObject.HideTooltip() EvasObject.ShowTooltip() EvasObject.Show() EvasObject.Hide() EvasObject.Resize(Int32, Int32) EvasObject.Move(Int32, Int32) EvasObject.Lower() EvasObject.KeyGrab(String, Boolean) EvasObject.KeyUngrab(String) EvasObject.MarkChanged() EvasObject.Calculate() EvasObject.SetSizeHintAspect(AspectControl, Int32, Int32) EvasObject.GetSizeHintAspect(AspectControl, Int32, Int32) EvasObject.StackBelow(EvasObject) EvasObject.StackAbove(EvasObject) EvasObject.RaiseTop() EvasObject.GetTextBlockGeometryByLineNumber(Int32, Int32, Int32, Int32, Int32) EvasObject.OnInvalidate() EvasObject.OnInstantiated() EvasObject.OnUnrealize() EvasObject.Realize(EvasObject) EvasObject.Unrealize() EvasObject.Handle EvasObject.Parent EvasObject.RealHandle EvasObject.IsRealized EvasObject.EvasCanvas EvasObject.ClassName EvasObject.WeightX EvasObject.WeightY EvasObject.AlignmentX EvasObject.AlignmentY EvasObject.MinimumWidth EvasObject.MinimumHeight EvasObject.IsVisible EvasObject.Geometry EvasObject.Color EvasObject.IsMapEnabled EvasObject.EvasMap EvasObject.RepeatEvents EvasObject.PropagateEvents EvasObject.PassEvents EvasObject.TooltipStyle EvasObject.TooltipOrientation EvasObject.TooltipWindowMode EvasObject.TooltipContentDelegate EvasObject.TooltipMoveFreezeCount EvasObject.AllEventsFrozen EvasObject.Layer EvasObject.Deleted EvasObject.KeyUp EvasObject.KeyDown EvasObject.BackButtonPressed EvasObject.MoreButtonPressed EvasObject.Moved EvasObject.Resized EvasObject.RenderPost System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleListView : CircleGenList, IAccessibleObject, IRotaryActionWidget, ICircleWidget Constructors CircleListView(EvasObject, CircleSurface) Declaration public CircleListView(EvasObject parent, CircleSurface surface) Parameters Type Name Description EvasObject parent CircleSurface surface Properties Footer Declaration public VisualElement Footer { get; set; } Property Value Type Description Xamarin.Forms.VisualElement Header Declaration public VisualElement Header { get; set; } Property Value Type Description Xamarin.Forms.VisualElement Methods AddGroup(TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void AddGroup(TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description Xamarin.Forms.Internals.TemplatedItemsList < Xamarin.Forms.ItemsView < Xamarin.Forms.Cell >, Xamarin.Forms.Cell > group AddItem(Cell, TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void AddItem(Cell cell, TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description Xamarin.Forms.Cell cell Xamarin.Forms.Internals.TemplatedItemsList < Xamarin.Forms.ItemsView < Xamarin.Forms.Cell >, Xamarin.Forms.Cell > group AddSource(IEnumerable) Declaration public void AddSource(IEnumerable source) Parameters Type Name Description System.Collections.IEnumerable source AddSource(IEnumerable, Cell) Declaration public void AddSource(IEnumerable source, Cell before) Parameters Type Name Description System.Collections.IEnumerable source Xamarin.Forms.Cell before AddSource(IEnumerable, TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void AddSource(IEnumerable source, TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description System.Collections.IEnumerable source Xamarin.Forms.Internals.TemplatedItemsList < Xamarin.Forms.ItemsView < Xamarin.Forms.Cell >, Xamarin.Forms.Cell > group AddSource(IEnumerable, TemplatedItemsList<ItemsView<Cell>, Cell>, Cell) Declaration public void AddSource(IEnumerable source, TemplatedItemsList<ItemsView<Cell>, Cell> group, Cell before) Parameters Type Name Description System.Collections.IEnumerable source Xamarin.Forms.Internals.TemplatedItemsList < Xamarin.Forms.ItemsView < Xamarin.Forms.Cell >, Xamarin.Forms.Cell > group Xamarin.Forms.Cell before ApplyScrollTo(Cell, ScrollToPosition, Boolean) Declaration public void ApplyScrollTo(Cell cell, ScrollToPosition position, bool animated) Parameters Type Name Description Xamarin.Forms.Cell cell Xamarin.Forms.ScrollToPosition position System.Boolean animated ApplySelectedItem(Cell) Declaration public void ApplySelectedItem(Cell cell) Parameters Type Name Description Xamarin.Forms.Cell cell Clear() Declaration public void Clear() InsertGroup(TemplatedItemsList<ItemsView<Cell>, Cell>, Cell) Declaration public void InsertGroup(TemplatedItemsList<ItemsView<Cell>, Cell> group, Cell before) Parameters Type Name Description Xamarin.Forms.Internals.TemplatedItemsList < Xamarin.Forms.ItemsView < Xamarin.Forms.Cell >, Xamarin.Forms.Cell > group Xamarin.Forms.Cell before InsertItem(Cell, Cell, TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void InsertItem(Cell cell, Cell before, TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description Xamarin.Forms.Cell cell Xamarin.Forms.Cell before Xamarin.Forms.Internals.TemplatedItemsList < Xamarin.Forms.ItemsView < Xamarin.Forms.Cell >, Xamarin.Forms.Cell > group OnRealized() Declaration protected override void OnRealized() Overrides GenList.OnRealized() Remove(Cell) Declaration public void Remove(Cell cell) Parameters Type Name Description Xamarin.Forms.Cell cell Remove(TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void Remove(TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description Xamarin.Forms.Internals.TemplatedItemsList < Xamarin.Forms.ItemsView < Xamarin.Forms.Cell >, Xamarin.Forms.Cell > group RemoveSource(IEnumerable) Declaration public void RemoveSource(IEnumerable source) Parameters Type Name Description System.Collections.IEnumerable source ResetGroup(TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void ResetGroup(TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description Xamarin.Forms.Internals.TemplatedItemsList < Xamarin.Forms.ItemsView < Xamarin.Forms.Cell >, Xamarin.Forms.Cell > group Implements IAccessibleObject IRotaryActionWidget ICircleWidget"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ActionButtonItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ActionButtonItem.html",
    "title": "Class ActionButtonItem",
    "keywords": "Class ActionButtonItem The ActionButtonItem is a class that presents a menu item and associates it with a command Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.BaseMenuItem Xamarin.Forms.MenuItem ActionButtonItem Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController Xamarin.Forms.IMenuItemController Inherited Members Xamarin.Forms.MenuItem.AcceleratorProperty Xamarin.Forms.MenuItem.TextProperty Xamarin.Forms.MenuItem.CommandProperty Xamarin.Forms.MenuItem.CommandParameterProperty Xamarin.Forms.MenuItem.IsDestructiveProperty Xamarin.Forms.MenuItem.IconProperty Xamarin.Forms.MenuItem.GetAccelerator(Xamarin.Forms.BindableObject) Xamarin.Forms.MenuItem.SetAccelerator(Xamarin.Forms.BindableObject, Xamarin.Forms.Accelerator) Xamarin.Forms.MenuItem.OnClicked() Xamarin.Forms.MenuItem.Command Xamarin.Forms.MenuItem.CommandParameter Xamarin.Forms.MenuItem.Icon Xamarin.Forms.MenuItem.IsDestructive Xamarin.Forms.MenuItem.Text Xamarin.Forms.MenuItem.Clicked Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnBindingContextChanged() Xamarin.Forms.Element.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.Element.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.Element.OnParentSet() Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.ParentView Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.BindingContextChanged Xamarin.Forms.BindableObject.PropertyChanging System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class ActionButtonItem : MenuItem, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IElementController, IStyleSelectable, IMenuItemController Fields IsEnableProperty BindableProperty. Identifies the IsEnable bindable property. Declaration public static BindableProperty IsEnableProperty Field Value Type Description Xamarin.Forms.BindableProperty IsVisibleProperty BindableProperty. Identifies the IsVisible bindable property. Declaration public static BindableProperty IsVisibleProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties IsEnable Gets or sets a boolean value that indicates whether this ActionButtonItem is enabled. Declaration public bool IsEnable { get; set; } Property Value Type Description System.Boolean IsVisible Gets or sets a boolean value that indicates whether this ActionButtonItem is visible. Declaration public bool IsVisible { get; set; } Property Value Type Description System.Boolean Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController Xamarin.Forms.IMenuItemController"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleStackLayout.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleStackLayout.html",
    "title": "Class CircleStackLayout",
    "keywords": "Class CircleStackLayout Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.VisualElement Xamarin.Forms.View Xamarin.Forms.Layout Xamarin.Forms.Layout < Xamarin.Forms.View > Xamarin.Forms.StackLayout CircleStackLayout Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.ILayout Xamarin.Forms.ILayoutController Xamarin.Forms.IViewContainer < Xamarin.Forms.View > Xamarin.Forms.IElementConfiguration < Xamarin.Forms.StackLayout > Inherited Members Xamarin.Forms.StackLayout.OrientationProperty Xamarin.Forms.StackLayout.SpacingProperty Xamarin.Forms.StackLayout.On<T>() Xamarin.Forms.StackLayout.OnSizeRequest(System.Double, System.Double) Xamarin.Forms.StackLayout.Orientation Xamarin.Forms.StackLayout.Spacing Xamarin.Forms.Layout<Xamarin.Forms.View>.OnAdded(Xamarin.Forms.View) Xamarin.Forms.Layout<Xamarin.Forms.View>.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.Layout<Xamarin.Forms.View>.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.Layout<Xamarin.Forms.View>.OnRemoved(Xamarin.Forms.View) Xamarin.Forms.Layout<Xamarin.Forms.View>.Children Xamarin.Forms.Layout.IsClippedToBoundsProperty Xamarin.Forms.Layout.CascadeInputTransparentProperty Xamarin.Forms.Layout.PaddingProperty Xamarin.Forms.Layout.ForceLayout() Xamarin.Forms.Layout.GetSizeRequest(System.Double, System.Double) Xamarin.Forms.Layout.LayoutChildIntoBoundingRegion(Xamarin.Forms.VisualElement, Xamarin.Forms.Rectangle) Xamarin.Forms.Layout.LowerChild(Xamarin.Forms.View) Xamarin.Forms.Layout.RaiseChild(Xamarin.Forms.View) Xamarin.Forms.Layout.InvalidateLayout() Xamarin.Forms.Layout.OnChildMeasureInvalidated(System.Object, System.EventArgs) Xamarin.Forms.Layout.OnChildMeasureInvalidated() Xamarin.Forms.Layout.OnSizeAllocated(System.Double, System.Double) Xamarin.Forms.Layout.ShouldInvalidateOnChildAdded(Xamarin.Forms.View) Xamarin.Forms.Layout.ShouldInvalidateOnChildRemoved(Xamarin.Forms.View) Xamarin.Forms.Layout.UpdateChildrenLayout() Xamarin.Forms.Layout.IsClippedToBounds Xamarin.Forms.Layout.Padding Xamarin.Forms.Layout.CascadeInputTransparent Xamarin.Forms.Layout.LayoutChanged Xamarin.Forms.View.VerticalOptionsProperty Xamarin.Forms.View.HorizontalOptionsProperty Xamarin.Forms.View.MarginProperty Xamarin.Forms.View.OnBindingContextChanged() Xamarin.Forms.View.GestureRecognizers Xamarin.Forms.View.HorizontalOptions Xamarin.Forms.View.Margin Xamarin.Forms.View.VerticalOptions Xamarin.Forms.VisualElement.NavigationProperty Xamarin.Forms.VisualElement.InputTransparentProperty Xamarin.Forms.VisualElement.IsEnabledProperty Xamarin.Forms.VisualElement.XProperty Xamarin.Forms.VisualElement.YProperty Xamarin.Forms.VisualElement.AnchorXProperty Xamarin.Forms.VisualElement.AnchorYProperty Xamarin.Forms.VisualElement.TranslationXProperty Xamarin.Forms.VisualElement.TranslationYProperty Xamarin.Forms.VisualElement.WidthProperty Xamarin.Forms.VisualElement.HeightProperty Xamarin.Forms.VisualElement.RotationProperty Xamarin.Forms.VisualElement.RotationXProperty Xamarin.Forms.VisualElement.RotationYProperty Xamarin.Forms.VisualElement.ScaleProperty Xamarin.Forms.VisualElement.IsVisibleProperty Xamarin.Forms.VisualElement.OpacityProperty Xamarin.Forms.VisualElement.BackgroundColorProperty Xamarin.Forms.VisualElement.BehaviorsProperty Xamarin.Forms.VisualElement.TriggersProperty Xamarin.Forms.VisualElement.StyleProperty Xamarin.Forms.VisualElement.WidthRequestProperty Xamarin.Forms.VisualElement.HeightRequestProperty Xamarin.Forms.VisualElement.MinimumWidthRequestProperty Xamarin.Forms.VisualElement.MinimumHeightRequestProperty Xamarin.Forms.VisualElement.IsFocusedProperty Xamarin.Forms.VisualElement.FlowDirectionProperty Xamarin.Forms.VisualElement.BatchBegin() Xamarin.Forms.VisualElement.BatchCommit() Xamarin.Forms.VisualElement.Focus() Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle) Xamarin.Forms.VisualElement.Measure(System.Double, System.Double, Xamarin.Forms.MeasureFlags) Xamarin.Forms.VisualElement.Unfocus() Xamarin.Forms.VisualElement.InvalidateMeasure() Xamarin.Forms.VisualElement.OnChildrenReordered() Xamarin.Forms.VisualElement.OnParentSet() Xamarin.Forms.VisualElement.SizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.VisualElement.ChangeVisualState() Xamarin.Forms.VisualElement.FlowDirection Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.VisualElement.AnchorX Xamarin.Forms.VisualElement.AnchorY Xamarin.Forms.VisualElement.BackgroundColor Xamarin.Forms.VisualElement.Behaviors Xamarin.Forms.VisualElement.Bounds Xamarin.Forms.VisualElement.Height Xamarin.Forms.VisualElement.HeightRequest Xamarin.Forms.VisualElement.InputTransparent Xamarin.Forms.VisualElement.IsEnabled Xamarin.Forms.VisualElement.IsFocused Xamarin.Forms.VisualElement.IsVisible Xamarin.Forms.VisualElement.MinimumHeightRequest Xamarin.Forms.VisualElement.MinimumWidthRequest Xamarin.Forms.VisualElement.Navigation Xamarin.Forms.VisualElement.Opacity Xamarin.Forms.VisualElement.Rotation Xamarin.Forms.VisualElement.RotationX Xamarin.Forms.VisualElement.RotationY Xamarin.Forms.VisualElement.Scale Xamarin.Forms.VisualElement.Style Xamarin.Forms.VisualElement.StyleClass Xamarin.Forms.VisualElement.class Xamarin.Forms.VisualElement.TranslationX Xamarin.Forms.VisualElement.TranslationY Xamarin.Forms.VisualElement.Triggers Xamarin.Forms.VisualElement.Width Xamarin.Forms.VisualElement.WidthRequest Xamarin.Forms.VisualElement.X Xamarin.Forms.VisualElement.Y Xamarin.Forms.VisualElement.Resources Xamarin.Forms.VisualElement.ChildrenReordered Xamarin.Forms.VisualElement.Focused Xamarin.Forms.VisualElement.MeasureInvalidated Xamarin.Forms.VisualElement.SizeChanged Xamarin.Forms.VisualElement.Unfocused Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.ParentView Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.BindingContextChanged Xamarin.Forms.BindableObject.PropertyChanging System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleStackLayout : StackLayout, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IAnimatable, IResourcesProvider, IFlowDirectionController, IStyleSelectable, IStylable, IViewController, IVisualElementController, IElementController, ILayout, ILayoutController, IPaddingElement, IViewContainer<View>, IElementConfiguration<StackLayout> Methods LayoutChildren(Double, Double, Double, Double) Declaration protected override void LayoutChildren(double x, double y, double width, double height) Parameters Type Name Description System.Double x System.Double y System.Double width System.Double height Overrides Xamarin.Forms.StackLayout.LayoutChildren(System.Double, System.Double, System.Double, System.Double) OnMeasure(Double, Double) Declaration protected override SizeRequest OnMeasure(double widthConstraint, double heightConstraint) Parameters Type Name Description System.Double widthConstraint System.Double heightConstraint Returns Type Description Xamarin.Forms.SizeRequest Overrides Xamarin.Forms.VisualElement.OnMeasure(System.Double, System.Double) Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.ILayout Xamarin.Forms.ILayoutController Xamarin.Forms.IViewContainer<T> Xamarin.Forms.IElementConfiguration<TElement>"
  },
  "api/Tizen.Wearable.CircularUI.Forms.TwoButtonPage.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.TwoButtonPage.html",
    "title": "Class TwoButtonPage",
    "keywords": "Class TwoButtonPage The TwoButtonPage is a page that has a rectangular area inside the circle as contents area. It also has two buttons and a Title area. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.VisualElement Xamarin.Forms.Page Xamarin.Forms.TemplatedPage Xamarin.Forms.ContentPage TwoButtonPage Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.ILayout Xamarin.Forms.IPageController Xamarin.Forms.IElementConfiguration < Xamarin.Forms.Page > Inherited Members Xamarin.Forms.ContentPage.ContentProperty Xamarin.Forms.ContentPage.OnBindingContextChanged() Xamarin.Forms.ContentPage.Content Xamarin.Forms.TemplatedPage.ControlTemplateProperty Xamarin.Forms.TemplatedPage.ControlTemplate Xamarin.Forms.Page.BusySetSignalName Xamarin.Forms.Page.AlertSignalName Xamarin.Forms.Page.ActionSheetSignalName Xamarin.Forms.Page.BackgroundImageProperty Xamarin.Forms.Page.IsBusyProperty Xamarin.Forms.Page.PaddingProperty Xamarin.Forms.Page.TitleProperty Xamarin.Forms.Page.IconProperty Xamarin.Forms.Page.DisplayActionSheet(System.String, System.String, System.String, System.String[]) Xamarin.Forms.Page.DisplayAlert(System.String, System.String, System.String) Xamarin.Forms.Page.DisplayAlert(System.String, System.String, System.String, System.String) Xamarin.Forms.Page.ForceLayout() Xamarin.Forms.Page.SendBackButtonPressed() Xamarin.Forms.Page.LayoutChildren(System.Double, System.Double, System.Double, System.Double) Xamarin.Forms.Page.OnAppearing() Xamarin.Forms.Page.OnBackButtonPressed() Xamarin.Forms.Page.OnChildMeasureInvalidated(System.Object, System.EventArgs) Xamarin.Forms.Page.OnDisappearing() Xamarin.Forms.Page.OnParentSet() Xamarin.Forms.Page.OnSizeAllocated(System.Double, System.Double) Xamarin.Forms.Page.UpdateChildrenLayout() Xamarin.Forms.Page.On<T>() Xamarin.Forms.Page.BackgroundImage Xamarin.Forms.Page.Icon Xamarin.Forms.Page.IsBusy Xamarin.Forms.Page.Padding Xamarin.Forms.Page.Title Xamarin.Forms.Page.ToolbarItems Xamarin.Forms.Page.LayoutChanged Xamarin.Forms.Page.Appearing Xamarin.Forms.Page.Disappearing Xamarin.Forms.VisualElement.NavigationProperty Xamarin.Forms.VisualElement.InputTransparentProperty Xamarin.Forms.VisualElement.IsEnabledProperty Xamarin.Forms.VisualElement.XProperty Xamarin.Forms.VisualElement.YProperty Xamarin.Forms.VisualElement.AnchorXProperty Xamarin.Forms.VisualElement.AnchorYProperty Xamarin.Forms.VisualElement.TranslationXProperty Xamarin.Forms.VisualElement.TranslationYProperty Xamarin.Forms.VisualElement.WidthProperty Xamarin.Forms.VisualElement.HeightProperty Xamarin.Forms.VisualElement.RotationProperty Xamarin.Forms.VisualElement.RotationXProperty Xamarin.Forms.VisualElement.RotationYProperty Xamarin.Forms.VisualElement.ScaleProperty Xamarin.Forms.VisualElement.IsVisibleProperty Xamarin.Forms.VisualElement.OpacityProperty Xamarin.Forms.VisualElement.BackgroundColorProperty Xamarin.Forms.VisualElement.BehaviorsProperty Xamarin.Forms.VisualElement.TriggersProperty Xamarin.Forms.VisualElement.StyleProperty Xamarin.Forms.VisualElement.WidthRequestProperty Xamarin.Forms.VisualElement.HeightRequestProperty Xamarin.Forms.VisualElement.MinimumWidthRequestProperty Xamarin.Forms.VisualElement.MinimumHeightRequestProperty Xamarin.Forms.VisualElement.IsFocusedProperty Xamarin.Forms.VisualElement.FlowDirectionProperty Xamarin.Forms.VisualElement.BatchBegin() Xamarin.Forms.VisualElement.BatchCommit() Xamarin.Forms.VisualElement.Focus() Xamarin.Forms.VisualElement.GetSizeRequest(System.Double, System.Double) Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle) Xamarin.Forms.VisualElement.Measure(System.Double, System.Double, Xamarin.Forms.MeasureFlags) Xamarin.Forms.VisualElement.Unfocus() Xamarin.Forms.VisualElement.InvalidateMeasure() Xamarin.Forms.VisualElement.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildrenReordered() Xamarin.Forms.VisualElement.OnMeasure(System.Double, System.Double) Xamarin.Forms.VisualElement.OnSizeRequest(System.Double, System.Double) Xamarin.Forms.VisualElement.SizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.VisualElement.ChangeVisualState() Xamarin.Forms.VisualElement.FlowDirection Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.VisualElement.AnchorX Xamarin.Forms.VisualElement.AnchorY Xamarin.Forms.VisualElement.BackgroundColor Xamarin.Forms.VisualElement.Behaviors Xamarin.Forms.VisualElement.Bounds Xamarin.Forms.VisualElement.Height Xamarin.Forms.VisualElement.HeightRequest Xamarin.Forms.VisualElement.InputTransparent Xamarin.Forms.VisualElement.IsEnabled Xamarin.Forms.VisualElement.IsFocused Xamarin.Forms.VisualElement.IsVisible Xamarin.Forms.VisualElement.MinimumHeightRequest Xamarin.Forms.VisualElement.MinimumWidthRequest Xamarin.Forms.VisualElement.Navigation Xamarin.Forms.VisualElement.Opacity Xamarin.Forms.VisualElement.Rotation Xamarin.Forms.VisualElement.RotationX Xamarin.Forms.VisualElement.RotationY Xamarin.Forms.VisualElement.Scale Xamarin.Forms.VisualElement.Style Xamarin.Forms.VisualElement.StyleClass Xamarin.Forms.VisualElement.class Xamarin.Forms.VisualElement.TranslationX Xamarin.Forms.VisualElement.TranslationY Xamarin.Forms.VisualElement.Triggers Xamarin.Forms.VisualElement.Width Xamarin.Forms.VisualElement.WidthRequest Xamarin.Forms.VisualElement.X Xamarin.Forms.VisualElement.Y Xamarin.Forms.VisualElement.Resources Xamarin.Forms.VisualElement.ChildrenReordered Xamarin.Forms.VisualElement.Focused Xamarin.Forms.VisualElement.MeasureInvalidated Xamarin.Forms.VisualElement.SizeChanged Xamarin.Forms.VisualElement.Unfocused Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.ParentView Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.BindingContextChanged Xamarin.Forms.BindableObject.PropertyChanging System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class TwoButtonPage : ContentPage, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IAnimatable, IVisualElementController, IElementController, IResourcesProvider, IFlowDirectionController, IStyleSelectable, IStylable, ILayout, IPageController, IElementConfiguration<Page>, IPaddingElement, IControlTemplated Fields FirstButtonProperty BindableProperty. Identifies the FirstButton bindable property. Declaration public static readonly BindableProperty FirstButtonProperty Field Value Type Description Xamarin.Forms.BindableProperty OverlapProperty BindableProperty. Identifies the Overlap bindable property. Declaration public static readonly BindableProperty OverlapProperty Field Value Type Description Xamarin.Forms.BindableProperty SecondButtonProperty BindableProperty. Identifies the SecondButton bindable property. Declaration public static readonly BindableProperty SecondButtonProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties FirstButton Gets or sets left button of TwoButtonPage Declaration public MenuItem FirstButton { get; set; } Property Value Type Description Xamarin.Forms.MenuItem Overlap Gets or sets the overlap or not overlap the buttons and page display. Declaration public bool Overlap { get; set; } Property Value Type Description System.Boolean SecondButton Gets or sets right button of TwoButtonPage Declaration public MenuItem SecondButton { get; set; } Property Value Type Description Xamarin.Forms.MenuItem Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.ILayout Xamarin.Forms.IPageController Xamarin.Forms.IElementConfiguration<TElement>"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.TizenCircleSurfaceEffect.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.TizenCircleSurfaceEffect.html",
    "title": "Class TizenCircleSurfaceEffect",
    "keywords": "Class TizenCircleSurfaceEffect Inheritance System.Object Xamarin.Forms.Effect Xamarin.Forms.PlatformEffect < EvasObject , EvasObject > Xamarin.Forms.Platform.Tizen.PlatformEffect TizenCircleSurfaceEffect Inherited Members Xamarin.Forms.PlatformEffect<ElmSharp.EvasObject, ElmSharp.EvasObject>.OnElementPropertyChanged(System.ComponentModel.PropertyChangedEventArgs) Xamarin.Forms.PlatformEffect<ElmSharp.EvasObject, ElmSharp.EvasObject>.Container Xamarin.Forms.PlatformEffect<ElmSharp.EvasObject, ElmSharp.EvasObject>.Control Xamarin.Forms.Effect.Resolve(System.String) Xamarin.Forms.Effect.Element Xamarin.Forms.Effect.IsAttached Xamarin.Forms.Effect.ResolveId System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class TizenCircleSurfaceEffect : PlatformEffect Methods OnAttached() Declaration protected override void OnAttached() Overrides Xamarin.Forms.Effect.OnAttached() OnDetached() Declaration protected override void OnDetached() Overrides Xamarin.Forms.Effect.OnDetached()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ConfirmPopupEffect.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ConfirmPopupEffect.html",
    "title": "Class ConfirmPopupEffect",
    "keywords": "Class ConfirmPopupEffect The ConfirmPopupEffect is an effect that is proportional to a particular widget or has one or two buttons anywhere on the screen Inheritance System.Object Xamarin.Forms.Effect Xamarin.Forms.RoutingEffect ConfirmPopupEffect Inherited Members Xamarin.Forms.RoutingEffect.OnAttached() Xamarin.Forms.RoutingEffect.OnDetached() Xamarin.Forms.Effect.Resolve(System.String) Xamarin.Forms.Effect.Element Xamarin.Forms.Effect.IsAttached Xamarin.Forms.Effect.ResolveId System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class ConfirmPopupEffect : RoutingEffect Constructors ConfirmPopupEffect() Creates and initializes a new instance of the ConfirmPopupEffect class Declaration public ConfirmPopupEffect() Fields AcceptCommandParameterProperty BindableProperty. Identifies the AcceptCommandParameter bindable property. Declaration public static BindableProperty AcceptCommandParameterProperty Field Value Type Description Xamarin.Forms.BindableProperty AcceptCommandProperty BindableProperty. Identifies the AcceptCommand bindable property. AcceptCommand is executed when the Accept button is pressed. Declaration public static BindableProperty AcceptCommandProperty Field Value Type Description Xamarin.Forms.BindableProperty AcceptTextProperty BindableProperty. Identifies the AcceptText bindable property. AcceptText is to use as Accept button Declaration public static BindableProperty AcceptTextProperty Field Value Type Description Xamarin.Forms.BindableProperty CancelCommandParameterProperty BindableProperty. Identifies the CancelCommandParameter bindable property. Declaration public static BindableProperty CancelCommandParameterProperty Field Value Type Description Xamarin.Forms.BindableProperty CancelCommandProperty BindableProperty. Identifies the CancelCommand bindable property. CancelCommand is executed when the Cancel button is pressed, even if the popup disappears by selecting outside the popup. Declaration public static BindableProperty CancelCommandProperty Field Value Type Description Xamarin.Forms.BindableProperty CancelTextProperty BindableProperty. Identifies the CancelText bindable property. CancelText is to use as Cancel button Declaration public static BindableProperty CancelTextProperty Field Value Type Description Xamarin.Forms.BindableProperty ConfirmVisibilityProperty BindableProperty. Identifies the ConfirmVisibility bindable property. Popup appears if ConfirmVisibility is True, and disappears when it becomes False. CancelCommand works even if it disappears to False. Declaration public static BindableProperty ConfirmVisibilityProperty Field Value Type Description Xamarin.Forms.BindableProperty OffsetProperty BindableProperty. Identifies the Offset bindable property. Offset is a value of how far to move from the base tap position represented by the PositionOption type. If it isn't set, it returns 0,0. Declaration public static BindableProperty OffsetProperty Field Value Type Description Xamarin.Forms.BindableProperty PositionOptionProperty BindableProperty. Identifies the PositionOption bindable property. Declaration public static BindableProperty PositionOptionProperty Field Value Type Description Xamarin.Forms.BindableProperty Methods GetAcceptCommand(BindableObject) Gets command that is executed when the Accept button is pressed. Declaration public static ICommand GetAcceptCommand(BindableObject obj) Parameters Type Name Description Xamarin.Forms.BindableObject obj Binded object Returns Type Description System.Windows.Input.ICommand Command of Accept button GetAcceptCommandParameter(BindableObject) Gets command paramter that is executed when the Accept button is pressed. Declaration public static object GetAcceptCommandParameter(BindableObject obj) Parameters Type Name Description Xamarin.Forms.BindableObject obj Binded object Returns Type Description System.Object Command parameter of Accept button GetAcceptText(BindableObject) Gets text of Accept button Declaration public static string GetAcceptText(BindableObject obj) Parameters Type Name Description Xamarin.Forms.BindableObject obj Binded object Returns Type Description System.String Text of Accept button GetCancelCommand(BindableObject) Gets command that is executed when the Cancel button is pressed, even if the popup disappears by selecting outside the popup. Declaration public static ICommand GetCancelCommand(BindableObject obj) Parameters Type Name Description Xamarin.Forms.BindableObject obj Binded object Returns Type Description System.Windows.Input.ICommand Command of Cancel button GetCancelCommandParameter(BindableObject) Gets command paramter that is executed when the Cancel button is pressed, even if the popup disappears by selecting outside the popup. Declaration public static object GetCancelCommandParameter(BindableObject obj) Parameters Type Name Description Xamarin.Forms.BindableObject obj Binded object Returns Type Description System.Object Command parameter of Cancel button GetCancelText(BindableObject) Gets text of Cancel button Declaration public static string GetCancelText(BindableObject obj) Parameters Type Name Description Xamarin.Forms.BindableObject obj Binded object Returns Type Description System.String Text of Cancel button GetConfirmVisibility(BindableObject) Gets visibility of Confirmation popup. Popup appears if ConfirmVisibility is True, and disappears when it becomes False. CancelCommand works even if it disappears to False. Declaration public static bool GetConfirmVisibility(BindableObject obj) Parameters Type Name Description Xamarin.Forms.BindableObject obj Binded object Returns Type Description System.Boolean Visibility of Confirmation popup GetOffset(BindableObject) Gets offset. Offset is a value of how far to move from the base tap position represented by the PositionOption type. If it isn't set, it returns 0,0. Declaration public static Point GetOffset(BindableObject obj) Parameters Type Name Description Xamarin.Forms.BindableObject obj Binded object Returns Type Description Xamarin.Forms.Point A value of how far to move from the base tap position represented by the PositionOption type GetPositionOption(BindableObject) Gets position type of popup Declaration public static PositionOption GetPositionOption(BindableObject obj) Parameters Type Name Description Xamarin.Forms.BindableObject obj Binded object Returns Type Description PositionOption Position type of popup SetAcceptCommand(BindableObject, ICommand) Sets command that is executed when the Accept button is pressed. Declaration public static void SetAcceptCommand(BindableObject obj, ICommand value) Parameters Type Name Description Xamarin.Forms.BindableObject obj Binded object System.Windows.Input.ICommand value Command of Accept button SetAcceptCommandParameter(BindableObject, Object) Sets command parameter that is executed when the Accept button is pressed. Declaration public static void SetAcceptCommandParameter(BindableObject obj, object value) Parameters Type Name Description Xamarin.Forms.BindableObject obj Binded object System.Object value Command parameter of Accept button SetAcceptText(BindableObject, String) Sets text of Accept button Declaration public static void SetAcceptText(BindableObject obj, string value) Parameters Type Name Description Xamarin.Forms.BindableObject obj Binded object System.String value Text of Accept button SetCancelCommand(BindableObject, ICommand) Sets command that is executed when the Cancel button is pressed, even if the popup disappears by selecting outside the popup. Declaration public static void SetCancelCommand(BindableObject obj, ICommand value) Parameters Type Name Description Xamarin.Forms.BindableObject obj Binded object System.Windows.Input.ICommand value Command of Cancel button SetCancelCommandParameter(BindableObject, Object) Sets command paramter that is executed when the Cancel button is pressed, even if the popup disappears by selecting outside the popup. Declaration public static void SetCancelCommandParameter(BindableObject obj, object value) Parameters Type Name Description Xamarin.Forms.BindableObject obj Binded object System.Object value Command parameter of Cancel button SetCancelText(BindableObject, String) Sets text of Cancel button Declaration public static void SetCancelText(BindableObject obj, string value) Parameters Type Name Description Xamarin.Forms.BindableObject obj Binded object System.String value Text of Cancel button SetConfirmVisibility(BindableObject, Boolean) Sets visibility of Confirmation popup. Popup appears if ConfirmVisibility is True, and disappears when it becomes False. CancelCommand works even if it disappears to False. Declaration public static void SetConfirmVisibility(BindableObject obj, bool value) Parameters Type Name Description Xamarin.Forms.BindableObject obj Binded object System.Boolean value Visibility of Confirmation popup SetOffset(BindableObject, Point) Sets offset. Offset is a value of how far to move from the base tap position represented by the PositionOption type. Declaration public static void SetOffset(BindableObject obj, Point value) Parameters Type Name Description Xamarin.Forms.BindableObject obj Binded object Xamarin.Forms.Point value A value of how far to move from the base tap position represented by the PositionOption type SetPositionOption(BindableObject, PositionOption) Sets position type of popup Declaration public static void SetPositionOption(BindableObject obj, PositionOption value) Parameters Type Name Description Xamarin.Forms.BindableObject obj Binded object PositionOption value Position type of popup"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleSurfaceNotFoundException.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleSurfaceNotFoundException.html",
    "title": "Class CircleSurfaceNotFoundException",
    "keywords": "Class CircleSurfaceNotFoundException Inheritance System.Object System.Exception CircleSurfaceNotFoundException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetType() System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax [Serializable] public class CircleSurfaceNotFoundException : Exception, ISerializable Constructors CircleSurfaceNotFoundException() Declaration public CircleSurfaceNotFoundException() CircleSurfaceNotFoundException(SerializationInfo, StreamingContext) Declaration protected CircleSurfaceNotFoundException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context CircleSurfaceNotFoundException(String) Declaration public CircleSurfaceNotFoundException(string message) Parameters Type Name Description System.String message CircleSurfaceNotFoundException(String, Exception) Declaration public CircleSurfaceNotFoundException(string message, Exception innerException) Parameters Type Name Description System.String message System.Exception innerException Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.ListViewCache.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.ListViewCache.html",
    "title": "Class ListViewCache",
    "keywords": "Class ListViewCache Inheritance System.Object ListViewCache Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public static class ListViewCache Properties InformalItemClass Declaration public static GenItemClass InformalItemClass { get; } Property Value Type Description GenItemClass PaddingItemClass Declaration public static GenItemClass PaddingItemClass { get; } Property Value Type Description GenItemClass Methods Get(Cell, Boolean) Declaration public static CellRenderer Get(Cell cell, bool IsGroupHeader = false) Parameters Type Name Description Xamarin.Forms.Cell cell System.Boolean IsGroupHeader Returns Type Description Xamarin.Forms.Platform.Tizen.CellRenderer"
  },
  "api/Tizen.Wearable.CircularUI.Forms.RotaryEventHandler.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.RotaryEventHandler.html",
    "title": "Delegate RotaryEventHandler",
    "keywords": "Delegate RotaryEventHandler Delegate for a triggering rotary event Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public delegate void RotaryEventHandler(RotaryEventArgs args); Parameters Type Name Description RotaryEventArgs args Rotated direction of Rotary device"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.Watchface.FormsWatchface.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.Watchface.FormsWatchface.html",
    "title": "Class FormsWatchface",
    "keywords": "Class FormsWatchface Inheritance System.Object Application CoreApplication WatchApplication FormsWatchface Implements System.IDisposable Inherited Members WatchApplication.Window WatchApplication.Run(String[]) WatchApplication.OnTick(TimeEventArgs) WatchApplication.OnAmbientTick(TimeEventArgs) WatchApplication.OnAmbientChanged(AmbientEventArgs) WatchApplication.GetCurrentTime() WatchApplication.GetAmbientTickType() WatchApplication.SetAmbientTickType(AmbientTickType) WatchApplication.SetTimeTickFrequency(Int32, TimeTickResolution) WatchApplication.GetTimeTickFrequency(Int32, TimeTickResolution) WatchApplication.Resumed WatchApplication.Paused WatchApplication.TimeTick WatchApplication.AmbientTick WatchApplication.AmbientChanged CoreApplication.Exit() CoreApplication.OnLowMemory(LowMemoryEventArgs) CoreApplication.OnLowBattery(LowBatteryEventArgs) CoreApplication.OnLocaleChanged(LocaleChangedEventArgs) CoreApplication.OnRegionFormatChanged(RegionFormatChangedEventArgs) CoreApplication.OnDeviceOrientationChanged(DeviceOrientationEventArgs) CoreApplication.Dispose(Boolean) CoreApplication.Backend CoreApplication.Created CoreApplication.Terminated CoreApplication.AppControlReceived CoreApplication.LowMemory CoreApplication.LowBattery CoreApplication.LocaleChanged CoreApplication.RegionFormatChanged CoreApplication.DeviceOrientationChanged Application.Dispose() Application.Current Application.DirectoryInfo Application.ApplicationInfo System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer.Watchface Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class FormsWatchface : WatchApplication, IDisposable Constructors FormsWatchface() Declaration public FormsWatchface() Methods LoadWatchface(Application) Declaration public void LoadWatchface(Application application) Parameters Type Name Description Xamarin.Forms.Application application OnAppControlReceived(AppControlReceivedEventArgs) Declaration protected override void OnAppControlReceived(AppControlReceivedEventArgs e) Parameters Type Name Description AppControlReceivedEventArgs e Overrides CoreApplication.OnAppControlReceived(AppControlReceivedEventArgs) OnCreate() Declaration protected override void OnCreate() Overrides WatchApplication.OnCreate() OnPause() Declaration protected override void OnPause() Overrides WatchApplication.OnPause() OnResume() Declaration protected override void OnResume() Overrides WatchApplication.OnResume() OnRootViewUpdated(EvasObject) Declaration protected virtual void OnRootViewUpdated(EvasObject rootView) Parameters Type Name Description EvasObject rootView OnTerminate() Declaration protected override void OnTerminate() Overrides CoreApplication.OnTerminate() Run() Declaration public void Run() Implements System.IDisposable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CheckRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CheckRenderer.html",
    "title": "Class CheckRenderer",
    "keywords": "Class CheckRenderer Inheritance System.Object Xamarin.Forms.Platform.Tizen.VisualElementRenderer < Xamarin.Forms.Switch > Xamarin.Forms.Platform.Tizen.ViewRenderer < Xamarin.Forms.Switch , Check > Xamarin.Forms.Platform.Tizen.SwitchRenderer CheckRenderer Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider Inherited Members Xamarin.Forms.Platform.Tizen.SwitchRenderer.UpdateThemeStyle() Xamarin.Forms.Platform.Tizen.ViewRenderer<Xamarin.Forms.Switch, ElmSharp.Check>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Xamarin.Forms.Switch>) Xamarin.Forms.Platform.Tizen.ViewRenderer<Xamarin.Forms.Switch, ElmSharp.Check>.SetNativeControl(ElmSharp.Check) Xamarin.Forms.Platform.Tizen.ViewRenderer<Xamarin.Forms.Switch, ElmSharp.Check>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.ViewRenderer<Xamarin.Forms.Switch, ElmSharp.Check>.Control Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.Dispose() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.GetDesiredSize(System.Double, System.Double) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.SetElement(Xamarin.Forms.Switch) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.SetElement(Xamarin.Forms.VisualElement) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.Xamarin.Forms.IEffectControlProvider.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.OnElementPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.SetNativeView(ElmSharp.EvasObject) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.RegisterPropertyHandler(System.String, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.RegisterPropertyHandler(System.String, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.UpdateAllProperties(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.OnElementReady() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.MinimumSize() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.Measure(System.Int32, System.Int32) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.UpdateBackgroundColor(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.UpdateOpacity(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.GetNativeContentGeometry() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.UpdateInputTransparent(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.ApplyTransformation() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.NativeView Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CheckRenderer : SwitchRenderer, IVisualElementRenderer, IRegisterable, IDisposable, IEffectControlProvider Constructors CheckRenderer() Declaration public CheckRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Xamarin.Forms.Platform.Tizen.SwitchRenderer.Dispose(System.Boolean) OnElementChanged(ElementChangedEventArgs<Switch>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<Switch> e) Parameters Type Name Description Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs < Xamarin.Forms.Switch > e Overrides Xamarin.Forms.Platform.Tizen.SwitchRenderer.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Xamarin.Forms.Switch>) Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider"
  },
  "api/Tizen.Wearable.CircularUI.Forms.SelectedEventArgs.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.SelectedEventArgs.html",
    "title": "Class SelectedEventArgs",
    "keywords": "Class SelectedEventArgs Event arguments for events of RadioButton. Inheritance System.Object System.EventArgs SelectedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class SelectedEventArgs : EventArgs Constructors SelectedEventArgs(Boolean) Creates a new SelectedEventArgs object that represents a change from RadioButton. Declaration public SelectedEventArgs(bool value) Parameters Type Name Description System.Boolean value The boolean value that checks whether the RadioButton is selected. Properties Value Gets the value object for the SelectedEventArgs object. Declaration public bool Value { get; } Property Value Type Description System.Boolean"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.TwoButtonPageWidget.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.TwoButtonPageWidget.html",
    "title": "Class TwoButtonPageWidget",
    "keywords": "Class TwoButtonPageWidget Inheritance System.Object EvasObject AccessibleObject Widget Container Layout Background TwoButtonPageWidget Implements IAccessibleObject Xamarin.Forms.Platform.Tizen.Native.IContainable < EvasObject > Inherited Members Background.SetFileLoadSize(Int32, Int32) Background.CreateHandle(EvasObject) Background.Color Background.File Background.BackgroundOption Layout.Freeze() Layout.Thaw() Layout.Resizing() Layout.Resizing(Boolean, Boolean) Layout.GetEdjeData(String) Layout.GetPartText(String) Layout.SetPartText(String, String) Layout.BoxAppend(String, EvasObject) Layout.BoxPrepend(String, EvasObject) Layout.BoxRemove(String, EvasObject) Layout.BoxRemoveAll(String, Boolean) Layout.BoxInsertAt(String, EvasObject, UInt32) Layout.BoxInsertBefore(String, EvasObject, EvasObject) Layout.SetPartContent(String, EvasObject) Layout.SetPartContent(String, EvasObject, Boolean) Layout.SetTheme(String, String, String) Layout.SetFile(String, String) Layout.SetVerticalTextAlignment(String, Double) Layout.GetVerticalTextAlignment(String) Layout.OnRealized() Layout.EdjeObject Layout.TextBlockAccessibility Layout.BackgroundColor Layout.LanguageChanged Layout.ThemeChanged Container.AddChild(EvasObject) Container.RemoveChild(EvasObject) Container.ClearChildren() Widget.UpdatePartContents(EvasObject, String) Widget.SetFocus(Boolean) Widget.AllowFocus(Boolean) Widget.FocusNext(FocusDirection) Widget.SetNextFocusObject(EvasObject, FocusDirection) Widget.SetContent(EvasObject) Widget.SetContent(EvasObject, Boolean) Widget.SetPartColor(String, Color) Widget.GetPartColor(String) Widget.SetPartOpacity(String, Int32) Widget.GetPartOpacity(String) Widget.SignalEmit(String, String) Widget.IsEnabled Widget.Style Widget.IsFocused Widget.IsFocusAllowed Widget.Text Widget.Opacity Widget.AllowTreeFocus Widget.IsMirroredMode Widget.IsAutoMirroredMode Widget.Focused Widget.Unfocused AccessibleObject.IAccessibleObject.AppendRelation(IAccessibleRelation) AccessibleObject.IAccessibleObject.RemoveRelation(IAccessibleRelation) AccessibleObject.Highlight() AccessibleObject.Unhighlight() AccessibleObject.IAccessibleObject.ReadingInfoType AccessibleObject.IAccessibleObject.Role AccessibleObject.IAccessibleObject.CanHighlight AccessibleObject.IAccessibleObject.TranslationDomain AccessibleObject.IAccessibleObject.Name AccessibleObject.IAccessibleObject.Description AccessibleObject.IAccessibleObject.NameProvider AccessibleObject.IAccessibleObject.DescriptionProvider EvasObject.SetClip(EvasObject) EvasObject.SetAlignment(Double, Double) EvasObject.SetWeight(Double, Double) EvasObject.SetTooltipText(String) EvasObject.UnsetTooltip() EvasObject.PushTooltipMoveFreeze() EvasObject.PopTooltipMoveFreeze() EvasObject.HideTooltip() EvasObject.ShowTooltip() EvasObject.Show() EvasObject.Hide() EvasObject.Resize(Int32, Int32) EvasObject.Move(Int32, Int32) EvasObject.Lower() EvasObject.KeyGrab(String, Boolean) EvasObject.KeyUngrab(String) EvasObject.MarkChanged() EvasObject.Calculate() EvasObject.SetSizeHintAspect(AspectControl, Int32, Int32) EvasObject.GetSizeHintAspect(AspectControl, Int32, Int32) EvasObject.StackBelow(EvasObject) EvasObject.StackAbove(EvasObject) EvasObject.RaiseTop() EvasObject.GetTextBlockGeometryByLineNumber(Int32, Int32, Int32, Int32, Int32) EvasObject.OnInvalidate() EvasObject.OnInstantiated() EvasObject.Realize(EvasObject) EvasObject.Unrealize() EvasObject.Handle EvasObject.Parent EvasObject.RealHandle EvasObject.IsRealized EvasObject.EvasCanvas EvasObject.ClassName EvasObject.WeightX EvasObject.WeightY EvasObject.AlignmentX EvasObject.AlignmentY EvasObject.MinimumWidth EvasObject.MinimumHeight EvasObject.IsVisible EvasObject.Geometry EvasObject.IsMapEnabled EvasObject.EvasMap EvasObject.RepeatEvents EvasObject.PropagateEvents EvasObject.PassEvents EvasObject.TooltipStyle EvasObject.TooltipOrientation EvasObject.TooltipWindowMode EvasObject.TooltipContentDelegate EvasObject.TooltipMoveFreezeCount EvasObject.AllEventsFrozen EvasObject.Layer EvasObject.Deleted EvasObject.KeyUp EvasObject.KeyDown EvasObject.BackButtonPressed EvasObject.MoreButtonPressed EvasObject.Moved EvasObject.Resized EvasObject.RenderPost System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class TwoButtonPageWidget : Background, IAccessibleObject, IContainable<EvasObject> Constructors TwoButtonPageWidget(EvasObject) Declaration public TwoButtonPageWidget(EvasObject parent) Parameters Type Name Description EvasObject parent Properties Canvas Declaration public Canvas Canvas { get; } Property Value Type Description Xamarin.Forms.Platform.Tizen.Native.Canvas Children Declaration public IList<EvasObject> Children { get; } Property Value Type Description System.Collections.Generic.IList < EvasObject > Overlap Declaration public bool Overlap { get; set; } Property Value Type Description System.Boolean Methods HideButton1() Declaration public void HideButton1() HideButton2() Declaration public void HideButton2() OnUnrealize() Declaration protected override void OnUnrealize() Overrides EvasObject.OnUnrealize() ShowButton1(String, String, Action) Declaration public void ShowButton1(string text, string image = null, Action action = null) Parameters Type Name Description System.String text System.String image System.Action action ShowButton2(String, String, Action) Declaration public void ShowButton2(string text, string image = null, Action action = null) Parameters Type Name Description System.String text System.String image System.Action action Events LayoutUpdated Declaration public event EventHandler<LayoutEventArgs> LayoutUpdated Event Type Type Description System.EventHandler < Xamarin.Forms.Platform.Tizen.Native.LayoutEventArgs > Implements IAccessibleObject Xamarin.Forms.Platform.Tizen.Native.IContainable<T>"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleSurfaceItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleSurfaceItem.html",
    "title": "Class CircleSurfaceItem",
    "keywords": "Class CircleSurfaceItem The CircleSurfaceItem is a class that controls the items represented in the CircleSurface. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element CircleSurfaceItem CircleProgressBarSurfaceItem CircleSliderSurfaceItem Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController ICircleSurfaceItem Inherited Members Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnBindingContextChanged() Xamarin.Forms.Element.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.Element.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.Element.OnParentSet() Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.ParentView Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.BindingContextChanged Xamarin.Forms.BindableObject.PropertyChanging System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleSurfaceItem : Element, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IElementController, IStyleSelectable, ICircleSurfaceItem Fields BackgroundAngleOffsetProperty BindableProperty. Identifies the BackgroundAngleOffset bindable property. Declaration public static readonly BindableProperty BackgroundAngleOffsetProperty Field Value Type Description Xamarin.Forms.BindableProperty BackgroundAngleProperty BindableProperty. Identifies the BackgroundAngle bindable property. Declaration public static readonly BindableProperty BackgroundAngleProperty Field Value Type Description Xamarin.Forms.BindableProperty BackgroundColorProperty BindableProperty. Identifies the BackgroundColor bindable property. Declaration public static readonly BindableProperty BackgroundColorProperty Field Value Type Description Xamarin.Forms.BindableProperty BackgroundLineWidthProperty BindableProperty. Identifies the BackgroundLineWidth bindable property. Declaration public static readonly BindableProperty BackgroundLineWidthProperty Field Value Type Description Xamarin.Forms.BindableProperty BackgroundRadiusProperty BindableProperty. Identifies the BackgroundRadius bindable property. Declaration public static readonly BindableProperty BackgroundRadiusProperty Field Value Type Description Xamarin.Forms.BindableProperty BarAngleMaximumProperty BindableProperty. Identifies the BarAngleMaximum bindable property. Declaration public static readonly BindableProperty BarAngleMaximumProperty Field Value Type Description Xamarin.Forms.BindableProperty BarAngleMinimumProperty BindableProperty. Identifies the BarAngleMinimum bindable property. Declaration public static readonly BindableProperty BarAngleMinimumProperty Field Value Type Description Xamarin.Forms.BindableProperty BarAngleOffsetProperty BindableProperty. Identifies the BarAngleOffset bindable property. Declaration public static readonly BindableProperty BarAngleOffsetProperty Field Value Type Description Xamarin.Forms.BindableProperty BarAngleProperty BindableProperty. Identifies the BarAngle bindable property. Declaration public static readonly BindableProperty BarAngleProperty Field Value Type Description Xamarin.Forms.BindableProperty BarColorProperty BindableProperty. Identifies the BarColor bindable property. Declaration public static readonly BindableProperty BarColorProperty Field Value Type Description Xamarin.Forms.BindableProperty BarLineWidthProperty BindableProperty. Identifies the BarLineWidth bindable property. Declaration public static readonly BindableProperty BarLineWidthProperty Field Value Type Description Xamarin.Forms.BindableProperty BarRadiusProperty BindableProperty. Identifies the BarRadius bindable property. Declaration public static readonly BindableProperty BarRadiusProperty Field Value Type Description Xamarin.Forms.BindableProperty IsEnabledProperty BindableProperty. Identifies the IsEnabled bindable property. Declaration public static readonly BindableProperty IsEnabledProperty Field Value Type Description Xamarin.Forms.BindableProperty IsVisibleProperty BindableProperty. Identifies the IsVisible bindable property. Declaration public static readonly BindableProperty IsVisibleProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties BackgroundAngle Gets or sets the background angle value. If background angle is 180, background of surface item draw 180 degree from background angle offset. Declaration public double BackgroundAngle { get; set; } Property Value Type Description System.Double BackgroundAngleOffset Gets or sets the background angle offset value. if background angle offset is 30, background of surface item start at 30 degree. Declaration public double BackgroundAngleOffset { get; set; } Property Value Type Description System.Double BackgroundColor Gets or sets the background color value. Declaration public Color BackgroundColor { get; set; } Property Value Type Description Xamarin.Forms.Color BackgroundLineWidth Gets or sets the background line width value. Declaration public int BackgroundLineWidth { get; set; } Property Value Type Description System.Int32 BackgroundRadius Gets or sets the background radius value. Declaration public double BackgroundRadius { get; set; } Property Value Type Description System.Double BarAngle Gets or sets the bar angle value. If bar angle is 180, bar of surface item draw 180 degree from bar angle offset. Declaration public double BarAngle { get; set; } Property Value Type Description System.Double BarAngleMaximum Gets or sets the bar angle maximum value. Declaration public double BarAngleMaximum { get; set; } Property Value Type Description System.Double BarAngleMinimum Gets or sets the bar angle minimum value. Declaration public double BarAngleMinimum { get; set; } Property Value Type Description System.Double BarAngleOffset Gets or sets the bar angle offset value. if bar angle offset is 30, bar of surface item start at 30 degree. Declaration public double BarAngleOffset { get; set; } Property Value Type Description System.Double BarColor Gets or sets the bar color value. Declaration public Color BarColor { get; set; } Property Value Type Description Xamarin.Forms.Color BarLineWidth Gets or sets the bar line width value. Declaration public int BarLineWidth { get; set; } Property Value Type Description System.Int32 BarRadius Gets or sets the bar radius value. Declaration public double BarRadius { get; set; } Property Value Type Description System.Double IsEnabled Gets or sets a value indicating whether this element is enabled. Declaration public bool IsEnabled { get; set; } Property Value Type Description System.Boolean IsVisible Gets or sets the visibility value of circle surface item. Declaration public bool IsVisible { get; set; } Property Value Type Description System.Boolean Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController ICircleSurfaceItem"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleListView.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleListView.html",
    "title": "Class CircleListView",
    "keywords": "Class CircleListView The CircleListView is a view that represents Xamarin.Forms.ListView on Circular UI. You can move the list through bezel action. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.VisualElement Xamarin.Forms.View Xamarin.Forms.ItemsView < Xamarin.Forms.Cell > Xamarin.Forms.ListView CircleListView Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITemplatedItemsView < Xamarin.Forms.Cell > Xamarin.Forms.IItemsView < Xamarin.Forms.Cell > Xamarin.Forms.IListViewController Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.IElementConfiguration < Xamarin.Forms.ListView > IRotaryFocusable Inherited Members Xamarin.Forms.ListView.IsPullToRefreshEnabledProperty Xamarin.Forms.ListView.IsRefreshingProperty Xamarin.Forms.ListView.RefreshCommandProperty Xamarin.Forms.ListView.HeaderProperty Xamarin.Forms.ListView.HeaderTemplateProperty Xamarin.Forms.ListView.FooterProperty Xamarin.Forms.ListView.FooterTemplateProperty Xamarin.Forms.ListView.SelectedItemProperty Xamarin.Forms.ListView.SelectionModeProperty Xamarin.Forms.ListView.HasUnevenRowsProperty Xamarin.Forms.ListView.RowHeightProperty Xamarin.Forms.ListView.GroupHeaderTemplateProperty Xamarin.Forms.ListView.IsGroupingEnabledProperty Xamarin.Forms.ListView.SeparatorVisibilityProperty Xamarin.Forms.ListView.SeparatorColorProperty Xamarin.Forms.ListView.OnBindingContextChanged() Xamarin.Forms.ListView.BeginRefresh() Xamarin.Forms.ListView.EndRefresh() Xamarin.Forms.ListView.ScrollTo(System.Object, Xamarin.Forms.ScrollToPosition, System.Boolean) Xamarin.Forms.ListView.ScrollTo(System.Object, System.Object, Xamarin.Forms.ScrollToPosition, System.Boolean) Xamarin.Forms.ListView.CreateDefault(System.Object) Xamarin.Forms.ListView.OnSizeRequest(System.Double, System.Double) Xamarin.Forms.ListView.SetupContent(Xamarin.Forms.Cell, System.Int32) Xamarin.Forms.ListView.UnhookContent(Xamarin.Forms.Cell) Xamarin.Forms.ListView.On<T>() Xamarin.Forms.ListView.ValidateItemTemplate(Xamarin.Forms.DataTemplate) Xamarin.Forms.ListView.Footer Xamarin.Forms.ListView.FooterTemplate Xamarin.Forms.ListView.GroupDisplayBinding Xamarin.Forms.ListView.GroupHeaderTemplate Xamarin.Forms.ListView.GroupShortNameBinding Xamarin.Forms.ListView.HasUnevenRows Xamarin.Forms.ListView.Header Xamarin.Forms.ListView.HeaderTemplate Xamarin.Forms.ListView.IsGroupingEnabled Xamarin.Forms.ListView.IsPullToRefreshEnabled Xamarin.Forms.ListView.IsRefreshing Xamarin.Forms.ListView.RefreshCommand Xamarin.Forms.ListView.RowHeight Xamarin.Forms.ListView.SelectedItem Xamarin.Forms.ListView.SelectionMode Xamarin.Forms.ListView.SeparatorColor Xamarin.Forms.ListView.SeparatorVisibility Xamarin.Forms.ListView.ItemAppearing Xamarin.Forms.ListView.ItemDisappearing Xamarin.Forms.ListView.ItemSelected Xamarin.Forms.ListView.ItemTapped Xamarin.Forms.ListView.Refreshing Xamarin.Forms.ItemsView<Xamarin.Forms.Cell>.ItemsSourceProperty Xamarin.Forms.ItemsView<Xamarin.Forms.Cell>.ItemTemplateProperty Xamarin.Forms.ItemsView<Xamarin.Forms.Cell>.Xamarin.Forms.IItemsView<Xamarin.Forms.Cell>.CreateDefault(System.Object) Xamarin.Forms.ItemsView<Xamarin.Forms.Cell>.Xamarin.Forms.IItemsView<Xamarin.Forms.Cell>.SetupContent(Xamarin.Forms.Cell, System.Int32) Xamarin.Forms.ItemsView<Xamarin.Forms.Cell>.Xamarin.Forms.IItemsView<Xamarin.Forms.Cell>.UnhookContent(Xamarin.Forms.Cell) Xamarin.Forms.ItemsView<Xamarin.Forms.Cell>.ItemsSource Xamarin.Forms.ItemsView<Xamarin.Forms.Cell>.ItemTemplate Xamarin.Forms.ItemsView<Xamarin.Forms.Cell>.Xamarin.Forms.ITemplatedItemsView<Xamarin.Forms.Cell>.ListProxy Xamarin.Forms.ItemsView<Xamarin.Forms.Cell>.Xamarin.Forms.ITemplatedItemsView<Xamarin.Forms.Cell>.TemplatedItems Xamarin.Forms.View.VerticalOptionsProperty Xamarin.Forms.View.HorizontalOptionsProperty Xamarin.Forms.View.MarginProperty Xamarin.Forms.View.GestureRecognizers Xamarin.Forms.View.HorizontalOptions Xamarin.Forms.View.Margin Xamarin.Forms.View.VerticalOptions Xamarin.Forms.VisualElement.NavigationProperty Xamarin.Forms.VisualElement.InputTransparentProperty Xamarin.Forms.VisualElement.IsEnabledProperty Xamarin.Forms.VisualElement.XProperty Xamarin.Forms.VisualElement.YProperty Xamarin.Forms.VisualElement.AnchorXProperty Xamarin.Forms.VisualElement.AnchorYProperty Xamarin.Forms.VisualElement.TranslationXProperty Xamarin.Forms.VisualElement.TranslationYProperty Xamarin.Forms.VisualElement.WidthProperty Xamarin.Forms.VisualElement.HeightProperty Xamarin.Forms.VisualElement.RotationProperty Xamarin.Forms.VisualElement.RotationXProperty Xamarin.Forms.VisualElement.RotationYProperty Xamarin.Forms.VisualElement.ScaleProperty Xamarin.Forms.VisualElement.IsVisibleProperty Xamarin.Forms.VisualElement.OpacityProperty Xamarin.Forms.VisualElement.BackgroundColorProperty Xamarin.Forms.VisualElement.BehaviorsProperty Xamarin.Forms.VisualElement.TriggersProperty Xamarin.Forms.VisualElement.StyleProperty Xamarin.Forms.VisualElement.WidthRequestProperty Xamarin.Forms.VisualElement.HeightRequestProperty Xamarin.Forms.VisualElement.MinimumWidthRequestProperty Xamarin.Forms.VisualElement.MinimumHeightRequestProperty Xamarin.Forms.VisualElement.IsFocusedProperty Xamarin.Forms.VisualElement.FlowDirectionProperty Xamarin.Forms.VisualElement.BatchBegin() Xamarin.Forms.VisualElement.BatchCommit() Xamarin.Forms.VisualElement.Focus() Xamarin.Forms.VisualElement.GetSizeRequest(System.Double, System.Double) Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle) Xamarin.Forms.VisualElement.Measure(System.Double, System.Double, Xamarin.Forms.MeasureFlags) Xamarin.Forms.VisualElement.Unfocus() Xamarin.Forms.VisualElement.InvalidateMeasure() Xamarin.Forms.VisualElement.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildrenReordered() Xamarin.Forms.VisualElement.OnMeasure(System.Double, System.Double) Xamarin.Forms.VisualElement.OnParentSet() Xamarin.Forms.VisualElement.OnSizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.SizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.VisualElement.ChangeVisualState() Xamarin.Forms.VisualElement.FlowDirection Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.VisualElement.AnchorX Xamarin.Forms.VisualElement.AnchorY Xamarin.Forms.VisualElement.BackgroundColor Xamarin.Forms.VisualElement.Behaviors Xamarin.Forms.VisualElement.Bounds Xamarin.Forms.VisualElement.Height Xamarin.Forms.VisualElement.HeightRequest Xamarin.Forms.VisualElement.InputTransparent Xamarin.Forms.VisualElement.IsEnabled Xamarin.Forms.VisualElement.IsFocused Xamarin.Forms.VisualElement.IsVisible Xamarin.Forms.VisualElement.MinimumHeightRequest Xamarin.Forms.VisualElement.MinimumWidthRequest Xamarin.Forms.VisualElement.Navigation Xamarin.Forms.VisualElement.Opacity Xamarin.Forms.VisualElement.Rotation Xamarin.Forms.VisualElement.RotationX Xamarin.Forms.VisualElement.RotationY Xamarin.Forms.VisualElement.Scale Xamarin.Forms.VisualElement.Style Xamarin.Forms.VisualElement.StyleClass Xamarin.Forms.VisualElement.class Xamarin.Forms.VisualElement.TranslationX Xamarin.Forms.VisualElement.TranslationY Xamarin.Forms.VisualElement.Triggers Xamarin.Forms.VisualElement.Width Xamarin.Forms.VisualElement.WidthRequest Xamarin.Forms.VisualElement.X Xamarin.Forms.VisualElement.Y Xamarin.Forms.VisualElement.Resources Xamarin.Forms.VisualElement.ChildrenReordered Xamarin.Forms.VisualElement.Focused Xamarin.Forms.VisualElement.MeasureInvalidated Xamarin.Forms.VisualElement.SizeChanged Xamarin.Forms.VisualElement.Unfocused Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.ParentView Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.BindingContextChanged Xamarin.Forms.BindableObject.PropertyChanging System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleListView : ListView, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IAnimatable, IResourcesProvider, IFlowDirectionController, IStyleSelectable, IStylable, ITemplatedItemsView<Cell>, IItemsView<Cell>, IListViewController, IViewController, IVisualElementController, IElementController, IElementConfiguration<ListView>, IRotaryFocusable Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITemplatedItemsView<TItem> Xamarin.Forms.IItemsView<T> Xamarin.Forms.IListViewController Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.IElementConfiguration<TElement> IRotaryFocusable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleScrollView.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleScrollView.html",
    "title": "Class CircleScrollView",
    "keywords": "Class CircleScrollView The CircleScrollView has circular scroll bar. it can be scrolled by bezel action. The CircleScrollView is extension of Xamarin.Forms.ScrollView. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.VisualElement Xamarin.Forms.View Xamarin.Forms.Layout Xamarin.Forms.ScrollView CircleScrollView Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.ILayout Xamarin.Forms.IScrollViewController Xamarin.Forms.ILayoutController Xamarin.Forms.IElementConfiguration < Xamarin.Forms.ScrollView > IRotaryFocusable Inherited Members Xamarin.Forms.ScrollView.OrientationProperty Xamarin.Forms.ScrollView.ScrollXProperty Xamarin.Forms.ScrollView.ScrollYProperty Xamarin.Forms.ScrollView.ContentSizeProperty Xamarin.Forms.ScrollView.HorizontalScrollBarVisibilityProperty Xamarin.Forms.ScrollView.VerticalScrollBarVisibilityProperty Xamarin.Forms.ScrollView.On<T>() Xamarin.Forms.ScrollView.ScrollToAsync(System.Double, System.Double, System.Boolean) Xamarin.Forms.ScrollView.ScrollToAsync(Xamarin.Forms.Element, Xamarin.Forms.ScrollToPosition, System.Boolean) Xamarin.Forms.ScrollView.LayoutChildren(System.Double, System.Double, System.Double, System.Double) Xamarin.Forms.ScrollView.OnSizeRequest(System.Double, System.Double) Xamarin.Forms.ScrollView.Content Xamarin.Forms.ScrollView.ContentSize Xamarin.Forms.ScrollView.Orientation Xamarin.Forms.ScrollView.ScrollX Xamarin.Forms.ScrollView.ScrollY Xamarin.Forms.ScrollView.HorizontalScrollBarVisibility Xamarin.Forms.ScrollView.VerticalScrollBarVisibility Xamarin.Forms.ScrollView.Scrolled Xamarin.Forms.Layout.IsClippedToBoundsProperty Xamarin.Forms.Layout.CascadeInputTransparentProperty Xamarin.Forms.Layout.PaddingProperty Xamarin.Forms.Layout.ForceLayout() Xamarin.Forms.Layout.GetSizeRequest(System.Double, System.Double) Xamarin.Forms.Layout.LayoutChildIntoBoundingRegion(Xamarin.Forms.VisualElement, Xamarin.Forms.Rectangle) Xamarin.Forms.Layout.LowerChild(Xamarin.Forms.View) Xamarin.Forms.Layout.RaiseChild(Xamarin.Forms.View) Xamarin.Forms.Layout.InvalidateLayout() Xamarin.Forms.Layout.OnChildMeasureInvalidated(System.Object, System.EventArgs) Xamarin.Forms.Layout.OnChildMeasureInvalidated() Xamarin.Forms.Layout.OnSizeAllocated(System.Double, System.Double) Xamarin.Forms.Layout.ShouldInvalidateOnChildAdded(Xamarin.Forms.View) Xamarin.Forms.Layout.ShouldInvalidateOnChildRemoved(Xamarin.Forms.View) Xamarin.Forms.Layout.UpdateChildrenLayout() Xamarin.Forms.Layout.IsClippedToBounds Xamarin.Forms.Layout.Padding Xamarin.Forms.Layout.CascadeInputTransparent Xamarin.Forms.Layout.LayoutChanged Xamarin.Forms.View.VerticalOptionsProperty Xamarin.Forms.View.HorizontalOptionsProperty Xamarin.Forms.View.MarginProperty Xamarin.Forms.View.OnBindingContextChanged() Xamarin.Forms.View.GestureRecognizers Xamarin.Forms.View.HorizontalOptions Xamarin.Forms.View.Margin Xamarin.Forms.View.VerticalOptions Xamarin.Forms.VisualElement.NavigationProperty Xamarin.Forms.VisualElement.InputTransparentProperty Xamarin.Forms.VisualElement.IsEnabledProperty Xamarin.Forms.VisualElement.XProperty Xamarin.Forms.VisualElement.YProperty Xamarin.Forms.VisualElement.AnchorXProperty Xamarin.Forms.VisualElement.AnchorYProperty Xamarin.Forms.VisualElement.TranslationXProperty Xamarin.Forms.VisualElement.TranslationYProperty Xamarin.Forms.VisualElement.WidthProperty Xamarin.Forms.VisualElement.HeightProperty Xamarin.Forms.VisualElement.RotationProperty Xamarin.Forms.VisualElement.RotationXProperty Xamarin.Forms.VisualElement.RotationYProperty Xamarin.Forms.VisualElement.ScaleProperty Xamarin.Forms.VisualElement.IsVisibleProperty Xamarin.Forms.VisualElement.OpacityProperty Xamarin.Forms.VisualElement.BackgroundColorProperty Xamarin.Forms.VisualElement.BehaviorsProperty Xamarin.Forms.VisualElement.TriggersProperty Xamarin.Forms.VisualElement.StyleProperty Xamarin.Forms.VisualElement.WidthRequestProperty Xamarin.Forms.VisualElement.HeightRequestProperty Xamarin.Forms.VisualElement.MinimumWidthRequestProperty Xamarin.Forms.VisualElement.MinimumHeightRequestProperty Xamarin.Forms.VisualElement.IsFocusedProperty Xamarin.Forms.VisualElement.FlowDirectionProperty Xamarin.Forms.VisualElement.BatchBegin() Xamarin.Forms.VisualElement.BatchCommit() Xamarin.Forms.VisualElement.Focus() Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle) Xamarin.Forms.VisualElement.Measure(System.Double, System.Double, Xamarin.Forms.MeasureFlags) Xamarin.Forms.VisualElement.Unfocus() Xamarin.Forms.VisualElement.InvalidateMeasure() Xamarin.Forms.VisualElement.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildrenReordered() Xamarin.Forms.VisualElement.OnMeasure(System.Double, System.Double) Xamarin.Forms.VisualElement.OnParentSet() Xamarin.Forms.VisualElement.SizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.VisualElement.ChangeVisualState() Xamarin.Forms.VisualElement.FlowDirection Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.VisualElement.AnchorX Xamarin.Forms.VisualElement.AnchorY Xamarin.Forms.VisualElement.BackgroundColor Xamarin.Forms.VisualElement.Behaviors Xamarin.Forms.VisualElement.Bounds Xamarin.Forms.VisualElement.Height Xamarin.Forms.VisualElement.HeightRequest Xamarin.Forms.VisualElement.InputTransparent Xamarin.Forms.VisualElement.IsEnabled Xamarin.Forms.VisualElement.IsFocused Xamarin.Forms.VisualElement.IsVisible Xamarin.Forms.VisualElement.MinimumHeightRequest Xamarin.Forms.VisualElement.MinimumWidthRequest Xamarin.Forms.VisualElement.Navigation Xamarin.Forms.VisualElement.Opacity Xamarin.Forms.VisualElement.Rotation Xamarin.Forms.VisualElement.RotationX Xamarin.Forms.VisualElement.RotationY Xamarin.Forms.VisualElement.Scale Xamarin.Forms.VisualElement.Style Xamarin.Forms.VisualElement.StyleClass Xamarin.Forms.VisualElement.class Xamarin.Forms.VisualElement.TranslationX Xamarin.Forms.VisualElement.TranslationY Xamarin.Forms.VisualElement.Triggers Xamarin.Forms.VisualElement.Width Xamarin.Forms.VisualElement.WidthRequest Xamarin.Forms.VisualElement.X Xamarin.Forms.VisualElement.Y Xamarin.Forms.VisualElement.Resources Xamarin.Forms.VisualElement.ChildrenReordered Xamarin.Forms.VisualElement.Focused Xamarin.Forms.VisualElement.MeasureInvalidated Xamarin.Forms.VisualElement.SizeChanged Xamarin.Forms.VisualElement.Unfocused Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.ParentView Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.BindingContextChanged Xamarin.Forms.BindableObject.PropertyChanging System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleScrollView : ScrollView, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IAnimatable, IResourcesProvider, IFlowDirectionController, IStyleSelectable, IStylable, IViewController, IVisualElementController, IElementController, ILayout, IPaddingElement, IScrollViewController, ILayoutController, IElementConfiguration<ScrollView>, IRotaryFocusable Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.ILayout Xamarin.Forms.IScrollViewController Xamarin.Forms.ILayoutController Xamarin.Forms.IElementConfiguration<TElement> IRotaryFocusable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.IRotaryEventReceiver.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.IRotaryEventReceiver.html",
    "title": "Interface IRotaryEventReceiver",
    "keywords": "Interface IRotaryEventReceiver The IRotaryEventReceiver is a receiver interface to take Rotary Events Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public interface IRotaryEventReceiver : IRotaryFocusable Methods Rotate(RotaryEventArgs) Rotate it by the RotaryEventArgs value. Declaration void Rotate(RotaryEventArgs args) Parameters Type Name Description RotaryEventArgs args Rotated direction of Rotary device"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.PopupEntryRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.PopupEntryRenderer.html",
    "title": "Class PopupEntryRenderer",
    "keywords": "Class PopupEntryRenderer Inheritance System.Object Xamarin.Forms.Platform.Tizen.VisualElementRenderer < Xamarin.Forms.Entry > Xamarin.Forms.Platform.Tizen.ViewRenderer < Xamarin.Forms.Entry , Xamarin.Forms.Platform.Tizen.Native.Entry > Xamarin.Forms.Platform.Tizen.EntryRenderer PopupEntryRenderer Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider Inherited Members Xamarin.Forms.Platform.Tizen.EntryRenderer.MinimumSize() Xamarin.Forms.Platform.Tizen.ViewRenderer<Xamarin.Forms.Entry, Xamarin.Forms.Platform.Tizen.Native.Entry>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Xamarin.Forms.Entry>) Xamarin.Forms.Platform.Tizen.ViewRenderer<Xamarin.Forms.Entry, Xamarin.Forms.Platform.Tizen.Native.Entry>.SetNativeControl(Xamarin.Forms.Platform.Tizen.Native.Entry) Xamarin.Forms.Platform.Tizen.ViewRenderer<Xamarin.Forms.Entry, Xamarin.Forms.Platform.Tizen.Native.Entry>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.ViewRenderer<Xamarin.Forms.Entry, Xamarin.Forms.Platform.Tizen.Native.Entry>.Control Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.Dispose() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.GetDesiredSize(System.Double, System.Double) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.SetElement(Xamarin.Forms.Entry) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.SetElement(Xamarin.Forms.VisualElement) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.Xamarin.Forms.IEffectControlProvider.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.OnElementPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.SetNativeView(ElmSharp.EvasObject) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.RegisterPropertyHandler(System.String, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.RegisterPropertyHandler(System.String, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.UpdateAllProperties(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.OnElementReady() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.Measure(System.Int32, System.Int32) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.UpdateBackgroundColor(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.UpdateOpacity(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.GetNativeContentGeometry() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.UpdateInputTransparent(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.UpdateThemeStyle() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.ApplyTransformation() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.NativeView Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class PopupEntryRenderer : EntryRenderer, IVisualElementRenderer, IRegisterable, IDisposable, IEffectControlProvider Constructors PopupEntryRenderer() Declaration public PopupEntryRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Xamarin.Forms.Platform.Tizen.EntryRenderer.Dispose(System.Boolean) OnElementChanged(ElementChangedEventArgs<Entry>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<Entry> e) Parameters Type Name Description Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs < Xamarin.Forms.Entry > e Overrides Xamarin.Forms.Platform.Tizen.EntryRenderer.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Xamarin.Forms.Entry>) Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector.html",
    "title": "Class CircleDateTimeSelector",
    "keywords": "Class CircleDateTimeSelector The CircleDateTimeSelector is a view that can change the value by bezel action by touching each item of \"Year: Month: Day\" and \"Hour: Minute: AM / PM\" Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.VisualElement Xamarin.Forms.View CircleDateTimeSelector Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController IRotaryFocusable Inherited Members Xamarin.Forms.View.VerticalOptionsProperty Xamarin.Forms.View.HorizontalOptionsProperty Xamarin.Forms.View.MarginProperty Xamarin.Forms.View.OnBindingContextChanged() Xamarin.Forms.View.GestureRecognizers Xamarin.Forms.View.HorizontalOptions Xamarin.Forms.View.Margin Xamarin.Forms.View.VerticalOptions Xamarin.Forms.VisualElement.NavigationProperty Xamarin.Forms.VisualElement.InputTransparentProperty Xamarin.Forms.VisualElement.IsEnabledProperty Xamarin.Forms.VisualElement.XProperty Xamarin.Forms.VisualElement.YProperty Xamarin.Forms.VisualElement.AnchorXProperty Xamarin.Forms.VisualElement.AnchorYProperty Xamarin.Forms.VisualElement.TranslationXProperty Xamarin.Forms.VisualElement.TranslationYProperty Xamarin.Forms.VisualElement.WidthProperty Xamarin.Forms.VisualElement.HeightProperty Xamarin.Forms.VisualElement.RotationProperty Xamarin.Forms.VisualElement.RotationXProperty Xamarin.Forms.VisualElement.RotationYProperty Xamarin.Forms.VisualElement.ScaleProperty Xamarin.Forms.VisualElement.IsVisibleProperty Xamarin.Forms.VisualElement.OpacityProperty Xamarin.Forms.VisualElement.BackgroundColorProperty Xamarin.Forms.VisualElement.BehaviorsProperty Xamarin.Forms.VisualElement.TriggersProperty Xamarin.Forms.VisualElement.StyleProperty Xamarin.Forms.VisualElement.WidthRequestProperty Xamarin.Forms.VisualElement.HeightRequestProperty Xamarin.Forms.VisualElement.MinimumWidthRequestProperty Xamarin.Forms.VisualElement.MinimumHeightRequestProperty Xamarin.Forms.VisualElement.IsFocusedProperty Xamarin.Forms.VisualElement.FlowDirectionProperty Xamarin.Forms.VisualElement.BatchBegin() Xamarin.Forms.VisualElement.BatchCommit() Xamarin.Forms.VisualElement.Focus() Xamarin.Forms.VisualElement.GetSizeRequest(System.Double, System.Double) Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle) Xamarin.Forms.VisualElement.Measure(System.Double, System.Double, Xamarin.Forms.MeasureFlags) Xamarin.Forms.VisualElement.Unfocus() Xamarin.Forms.VisualElement.InvalidateMeasure() Xamarin.Forms.VisualElement.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildrenReordered() Xamarin.Forms.VisualElement.OnMeasure(System.Double, System.Double) Xamarin.Forms.VisualElement.OnParentSet() Xamarin.Forms.VisualElement.OnSizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.OnSizeRequest(System.Double, System.Double) Xamarin.Forms.VisualElement.SizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.VisualElement.ChangeVisualState() Xamarin.Forms.VisualElement.FlowDirection Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.VisualElement.AnchorX Xamarin.Forms.VisualElement.AnchorY Xamarin.Forms.VisualElement.BackgroundColor Xamarin.Forms.VisualElement.Behaviors Xamarin.Forms.VisualElement.Bounds Xamarin.Forms.VisualElement.Height Xamarin.Forms.VisualElement.HeightRequest Xamarin.Forms.VisualElement.InputTransparent Xamarin.Forms.VisualElement.IsEnabled Xamarin.Forms.VisualElement.IsFocused Xamarin.Forms.VisualElement.IsVisible Xamarin.Forms.VisualElement.MinimumHeightRequest Xamarin.Forms.VisualElement.MinimumWidthRequest Xamarin.Forms.VisualElement.Navigation Xamarin.Forms.VisualElement.Opacity Xamarin.Forms.VisualElement.Rotation Xamarin.Forms.VisualElement.RotationX Xamarin.Forms.VisualElement.RotationY Xamarin.Forms.VisualElement.Scale Xamarin.Forms.VisualElement.Style Xamarin.Forms.VisualElement.StyleClass Xamarin.Forms.VisualElement.class Xamarin.Forms.VisualElement.TranslationX Xamarin.Forms.VisualElement.TranslationY Xamarin.Forms.VisualElement.Triggers Xamarin.Forms.VisualElement.Width Xamarin.Forms.VisualElement.WidthRequest Xamarin.Forms.VisualElement.X Xamarin.Forms.VisualElement.Y Xamarin.Forms.VisualElement.Resources Xamarin.Forms.VisualElement.ChildrenReordered Xamarin.Forms.VisualElement.Focused Xamarin.Forms.VisualElement.MeasureInvalidated Xamarin.Forms.VisualElement.SizeChanged Xamarin.Forms.VisualElement.Unfocused Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.ParentView Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.BindingContextChanged Xamarin.Forms.BindableObject.PropertyChanging System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleDateTimeSelector : View, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IAnimatable, IResourcesProvider, IFlowDirectionController, IStyleSelectable, IStylable, IViewController, IVisualElementController, IElementController, IRotaryFocusable Fields DateTimeProperty BindableProperty. Identifies the DateTime bindable property. Declaration public static readonly BindableProperty DateTimeProperty Field Value Type Description Xamarin.Forms.BindableProperty IsVisibleOfAmPmProperty BindableProperty. Identifies the IsVisibleOfAmPm bindable property. Declaration public static BindableProperty IsVisibleOfAmPmProperty Field Value Type Description Xamarin.Forms.BindableProperty IsVisibleOfDateProperty BindableProperty. Identifies the IsVisibleOfDate bindable property. Declaration public static BindableProperty IsVisibleOfDateProperty Field Value Type Description Xamarin.Forms.BindableProperty IsVisibleOfHourProperty BindableProperty. Identifies the IsVisibleOfHour bindable property. Declaration public static BindableProperty IsVisibleOfHourProperty Field Value Type Description Xamarin.Forms.BindableProperty IsVisibleOfMinuteProperty BindableProperty. Identifies the IsVisibleOfMinute bindable property. Declaration public static BindableProperty IsVisibleOfMinuteProperty Field Value Type Description Xamarin.Forms.BindableProperty IsVisibleOfMonthProperty BindableProperty. Identifies the IsVisibleOfMonth bindable property. Declaration public static BindableProperty IsVisibleOfMonthProperty Field Value Type Description Xamarin.Forms.BindableProperty IsVisibleOfYearProperty BindableProperty. Identifies the IsVisibleOfYear bindable property. Declaration public static BindableProperty IsVisibleOfYearProperty Field Value Type Description Xamarin.Forms.BindableProperty MarkerColorProperty BindableProperty. Identifies the MarkerColor bindable property. Declaration public static readonly BindableProperty MarkerColorProperty Field Value Type Description Xamarin.Forms.BindableProperty MaximumDateProperty BindableProperty. Identifies the MaximumDate bindable property. Declaration public static readonly BindableProperty MaximumDateProperty Field Value Type Description Xamarin.Forms.BindableProperty MinimumDateProperty BindableProperty. Identifies the MinimumDate bindable property. Declaration public static readonly BindableProperty MinimumDateProperty Field Value Type Description Xamarin.Forms.BindableProperty ValueTypeProperty BindableProperty. Identifies the ValueType bindable property. Declaration public static readonly BindableProperty ValueTypeProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties DateTime Gets or sets the date / time. Declaration public DateTime DateTime { get; set; } Property Value Type Description System.DateTime IsVisibleOfAmPm Gets or sets a boolean value that indicates whether the AmPm field type is visible. Declaration public bool IsVisibleOfAmPm { get; set; } Property Value Type Description System.Boolean IsVisibleOfDate Gets or sets a boolean value that indicates whether the date field type is visible. Declaration public bool IsVisibleOfDate { get; set; } Property Value Type Description System.Boolean IsVisibleOfHour Gets or sets a boolean value that indicates whether the hour field type is visible. Declaration public bool IsVisibleOfHour { get; set; } Property Value Type Description System.Boolean IsVisibleOfMinute Gets or sets a boolean value that indicates whether the minute field type is visible. Declaration public bool IsVisibleOfMinute { get; set; } Property Value Type Description System.Boolean IsVisibleOfMonth Gets or sets a boolean value that indicates whether the month field type is visible. Declaration public bool IsVisibleOfMonth { get; set; } Property Value Type Description System.Boolean IsVisibleOfYear Gets or sets a boolean value that indicates whether the year field type is visible. Declaration public bool IsVisibleOfYear { get; set; } Property Value Type Description System.Boolean MarkerColor Gets or sets Marker color Declaration public Color MarkerColor { get; set; } Property Value Type Description Xamarin.Forms.Color MaximumDate Gets or sets the maximum date when ValueType is Date. Declaration public DateTime MaximumDate { get; set; } Property Value Type Description System.DateTime MinimumDate Gets or sets the minimum date when ValueType is Date. Declaration public DateTime MinimumDate { get; set; } Property Value Type Description System.DateTime ValueType Gets or sets DateTimeType value. If it is Time, the UI will be changed to enable time selection. If it is a Date, the date can be changed. Declaration public DateTimeType ValueType { get; set; } Property Value Type Description DateTimeType Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController IRotaryFocusable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ConfirmationPopup.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ConfirmationPopup.html",
    "title": "Class ConfirmationPopup",
    "keywords": "Class ConfirmationPopup The ConfirmationPopup describe pop-up which has circular two button, title, text, and content area. Inheritance System.Object Xamarin.Forms.BindableObject ConfirmationPopup Implements System.ComponentModel.INotifyPropertyChanged Inherited Members Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnBindingContextChanged() Xamarin.Forms.BindableObject.OnPropertyChanged(System.String) Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.BindingContextChanged Xamarin.Forms.BindableObject.PropertyChanging System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class ConfirmationPopup : BindableObject, INotifyPropertyChanged, IDynamicResourceHandler Examples var leftButton = new MenuItem() { Text = \"Save\", Icon = new FileImageSource{ File = \"icon_save.png\", }, Command = new Command(() => { ... }) }; var rightButton = new MenuItem() { Text = \"Delete\", Icon = new FileImageSource{ File = \"icon_delete.png\", }, Command = new Command(() => { ... }) }; var popup = new ConfirmationPopup(); popup.FirstButton = leftButton; popup.SecondButton = rightButton; popup.Title = \"Popup title\"; popup.Content = new StackLayout() { HorizontalOptions = LayoutOptions.FillAndExpand, Children = { new Label { Text = \"Will be saved\", }, } }; popup.BackButtonPressed += (s, e) => { popup.Dismiss(); }; Constructors ConfirmationPopup() Creates and initializes a new instance of the ConfirmationPopup class. Declaration public ConfirmationPopup() Fields ContentProperty BindableProperty. Identifies the content bindable property. Declaration public static readonly BindableProperty ContentProperty Field Value Type Description Xamarin.Forms.BindableProperty FirstButtonProperty BindableProperty. Identifies the first button bindable property. Declaration public static readonly BindableProperty FirstButtonProperty Field Value Type Description Xamarin.Forms.BindableProperty SecondButtonProperty BindableProperty. Identifies the second button bindable property. Declaration public static readonly BindableProperty SecondButtonProperty Field Value Type Description Xamarin.Forms.BindableProperty TextProperty BindableProperty. Identifies the title bindable property. Declaration public static readonly BindableProperty TextProperty Field Value Type Description Xamarin.Forms.BindableProperty TitleProperty BindableProperty. Identifies the title bindable property. Declaration public static readonly BindableProperty TitleProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties Content Gets or sets content view of the Popup. Declaration public View Content { get; set; } Property Value Type Description Xamarin.Forms.View FirstButton Gets or sets left button of the Popup. Declaration public MenuItem FirstButton { get; set; } Property Value Type Description Xamarin.Forms.MenuItem SecondButton Gets or sets right button of the Popup. Declaration public MenuItem SecondButton { get; set; } Property Value Type Description Xamarin.Forms.MenuItem Text Gets or sets text of the Popup. Declaration public string Text { get; set; } Property Value Type Description System.String Title Gets or sets title of the Popup. Declaration public string Title { get; set; } Property Value Type Description System.String Methods Dismiss() Dismisses the ConfirmationPopup. Declaration public void Dismiss() Show() Shows the ConfirmationPopup. Declaration public void Show() Events BackButtonPressed Occurs when the device's back button is pressed. Declaration public event EventHandler BackButtonPressed Event Type Type Description System.EventHandler Implements System.ComponentModel.INotifyPropertyChanged"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.TizenConfirmPopupEffect.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.TizenConfirmPopupEffect.html",
    "title": "Class TizenConfirmPopupEffect",
    "keywords": "Class TizenConfirmPopupEffect Inheritance System.Object Xamarin.Forms.Effect Xamarin.Forms.PlatformEffect < EvasObject , EvasObject > Xamarin.Forms.Platform.Tizen.PlatformEffect TizenConfirmPopupEffect Inherited Members Xamarin.Forms.PlatformEffect<ElmSharp.EvasObject, ElmSharp.EvasObject>.OnElementPropertyChanged(System.ComponentModel.PropertyChangedEventArgs) Xamarin.Forms.PlatformEffect<ElmSharp.EvasObject, ElmSharp.EvasObject>.Container Xamarin.Forms.PlatformEffect<ElmSharp.EvasObject, ElmSharp.EvasObject>.Control Xamarin.Forms.Effect.Resolve(System.String) Xamarin.Forms.Effect.Element Xamarin.Forms.Effect.IsAttached Xamarin.Forms.Effect.ResolveId System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class TizenConfirmPopupEffect : PlatformEffect Methods OnAttached() Declaration protected override void OnAttached() Overrides Xamarin.Forms.Effect.OnAttached() OnDetached() Declaration protected override void OnDetached() Overrides Xamarin.Forms.Effect.OnDetached() OnElementPropertyChanged(PropertyChangedEventArgs) Declaration protected override void OnElementPropertyChanged(PropertyChangedEventArgs args) Parameters Type Name Description System.ComponentModel.PropertyChangedEventArgs args Overrides Xamarin.Forms.PlatformEffect<ElmSharp.EvasObject, ElmSharp.EvasObject>.OnElementPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)"
  },
  "guide/TwoButtonPage.html": {
    "href": "guide/TwoButtonPage.html",
    "title": "TwoButtonPage",
    "keywords": "TwoButtonPage TwoButtonPage derives from Xamarin.Forms.Page . TwonButtonPage has two semicircular buttons that are located at left side and right side of circle. Create TwoButtonPage you can set control in the TwoButtonPage.Content . In this example, long text Label and two buttons was set for Content. If Overlap property is true . Content area occupies all of the screen. If Overlap property is false . Content area occupies screen that is excluded button's area. Overlap property default value is false . TwoButtonPage.firstButton set left side button. TwoButtonPage.SecondButton set right side button. you can add button using MenuItem . This guide's code example use WearableUIGallery's TCTwoButtonPage code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCTwoButtonPage.xaml For more information . Please refer to TwoButtonPage API reference XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:TwoButtonPage x:Class=\"WearableUIGallery.TC.TCTwoButtonPage\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery.TC\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <w:TwoButtonPage.BindingContext> <local:TCTwoButtonPageViewModel /> </w:TwoButtonPage.BindingContext> <w:TwoButtonPage.Content> <ScrollView> <StackLayout HorizontalOptions=\"FillAndExpand\" VerticalOptions=\"FillAndExpand\"> <Label HorizontalOptions=\"FillAndExpand\" HorizontalTextAlignment=\"Center\" Text=\"{Binding Text}\" VerticalOptions=\"FillAndExpand\" /> <Button Clicked=\"OnRemove1\" Text=\"Remove 1\" /> <Button Clicked=\"OnRemove2\" Text=\"Remove 2\" /> </StackLayout> </ScrollView> </w:TwoButtonPage.Content> <w:TwoButtonPage.FirstButton> <MenuItem Command=\"{Binding Command1}\" Icon=\"image/tw_ic_popup_btn_check.png\" /> </w:TwoButtonPage.FirstButton> <w:TwoButtonPage.SecondButton> <MenuItem Command=\"{Binding Command2}\" Icon=\"image/tw_ic_popup_btn_delete.png\" /> </w:TwoButtonPage.SecondButton> </w:TwoButtonPage>"
  },
  "guide/ConfirmationPopup.html": {
    "href": "guide/ConfirmationPopup.html",
    "title": "ConfirmationPopup",
    "keywords": "ConfirmationPopup ConfirmationPopup represents Tizen Wearable EFL Twobutton-popup style. ConfirmationPopup is usefull to select one of two options. (e.g cancel/done, share/delete)\\ ConfirmationPopup is displayed seperate from any control. So you can't set this in XAML file. Create ConfirmationPopup ConfirmationPopup.Title Property set title of popup. you can set Content property with Layout such as StackLayout or ScrollView . ConfirmationPopup.FirstButton property set left side button. ConfirmationPopup.SecondButton property set right side button. you can set FirstButton and SecondButton using MenuItem . You should add code at Command or Clicked event handler for controlling MenuItem clicked. This guide's code example use WearableUIGallery's TCConfirmationPopup code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCConfirmationPopup.xaml.cs For more information . Please refer to ConfirmationPopup API reference C# file var leftButton = new MenuItem() { Icon = new FileImageSource { File = \"image/b_option_list_icon_share.png\", }, Command = new Command(() => { /* must insert code when user press left button */ }) }; ... _popUp1 = new ConfirmationPopup(); _popUp1.FirstButton = leftButton; _popUp1.SecondButton = rightButton; _popUp1.Title = \"Popup title\"; _popUp1.Content = new StackLayout() { HorizontalOptions = LayoutOptions.FillAndExpand, Children = { new Label { Text = \"Will be saved, and sound, only on the Gear.\", }, new StackLayout { Orientation = StackOrientation.Horizontal, Padding = new Thickness(0, 30, 0, 30), Children = { checkbox, new Label { Text = \"Do not repeat\", } } } } }; } How to set long Text at ConfirmationPopup ConfirmationPopup has Text Property. This Proerpty is usefull to set long text.\\ If long text was set by Text property. you don't need to add StackLayout and ScrollView and Label for displaying long text. Text Property's area overlap Content Property area. So do not use two propery at the same time. C# file _popUp2 = new ConfirmationPopup(); _popUp2.FirstButton = leftButton2; _popUp2.SecondButton = rightButton2; _popUp2.Title = \"Popup title\"; _popUp2.Text = @\"This is scrollable popup text. This part is made by adding long text in popup. Popup internally added scroller to this layout when size of text is greater than total popup height. This has two button in action area and title text in title area\";"
  },
  "guide/Radio.html": {
    "href": "guide/Radio.html",
    "title": "Radio",
    "keywords": "Radio Radio display 1 or more option and allows user to select 1 of them. Radio can select only 1 item among items having same GroupName property. Create Radio GroupName property specifies which Radio controls are mutually exclusive. If user selected one Radio control of radio control group, other items are not selected. IsSelected property sets default selected value of Radio control. Selected event occurs when the Radio selection was changed. Value property sets any value of Radio control. Value property is usefull to distinguish which item was selected if all Radio control has same Selected event handler. please refer to below code. For more information . Please refer to Radio API reference This guide's code example use WearableUIGallery's TCRadio code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCRadio.xaml.cs XAML file <w:CirclePage.Content> <w:CircleScrollView x:Name=\"myscroller\" Orientation=\"Vertical\"> <StackLayout Padding=\"50,50\" Orientation=\"Vertical\"> <Label x:Name=\"label\" FontSize=\"Medium\" HorizontalOptions=\"CenterAndExpand\" Text=\"Selected : Sound\" /> <StackLayout Orientation=\"Horizontal\"> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Sound\" VerticalOptions=\"Center\" /> <w:Radio GroupName=\"SoundMode\" HorizontalOptions=\"End\" IsSelected=\"True\" Selected=\"OnSelected\" Value=\"Sound\" /> </StackLayout> <StackLayout Orientation=\"Horizontal\"> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Vibrate\" VerticalOptions=\"Center\" /> <w:Radio GroupName=\"SoundMode\" HorizontalOptions=\"End\" Selected=\"OnSelected\" Value=\"Vibrate\" /> </StackLayout> <StackLayout Orientation=\"Horizontal\"> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Mute\" VerticalOptions=\"Center\" /> <w:Radio GroupName=\"SoundMode\" HorizontalOptions=\"End\" Selected=\"OnSelected\" Value=\"Mute\" /> </StackLayout> </StackLayout> </w:CircleScrollView> </w:CirclePage.Content> C# file public void OnSelected(object sender, SelectedEventArgs args) { Console.WriteLine($\"OnSoundSelected!! value:{args.Value}\"); Radio radio = sender as Radio; if (radio != null) { if (args.Value) label.Text = \"Selected : \" + radio.Value; } }"
  },
  "guide/Check.html": {
    "href": "guide/Check.html",
    "title": "Check",
    "keywords": "Check Check provides Tizen Wearable specific CheckBox widget. Check accept user input by the method of toggling. Check derives from Xamarin.Forms.Switch . Create Check You can easily add Check control with C# or XAML file. Tizen wearable device support 3 style of DisplayStyle ( Default , Onoff , Small ). Each shape of DisplayStyle depends on the device model. you can set default value of check with IsToggled property. True value set Check selected. False value set Check unselected. If user toggle check. Toggled event will be occurred. You must add code for handling Toggled event. For more information . Please refer to Check API reference C# file var check = new Check { HorizontalOptions = LayoutOptions.Center, VerticalOptions = LayoutOptions.Center, DisplayStyle = \"Onoff\" } check.Toggled += (s, e) => { Console.WriteLine(\"Check is now {0}\", e.Value); } XAML file Refer to TCCheck code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCCeck.xaml <StackLayout Orientation=\"Vertical\"> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Default\" /> <w:Check DisplayStyle=\"Default\" HorizontalOptions=\"CenterAndExpand\" IsToggled=\"False\" Toggled=\"OnToggledDefault\" /> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Onoff\" /> <w:Check DisplayStyle=\"Onoff\" HorizontalOptions=\"FillAndExpand\" IsToggled=\"True\" Toggled=\"OnToggledOnOff\" /> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Small\" /> <w:Check DisplayStyle=\"Small\" HorizontalOptions=\"CenterAndExpand\" IsToggled=\"False\" Toggled=\"OnToggledSmall\" /> </StackLayout>"
  },
  "guide/Overview.html": {
    "href": "guide/Overview.html",
    "title": "Developer Guides",
    "keywords": "Developer Guides Welcome to the Tizen Circular UI guides."
  },
  "guide/Quickstart.html": {
    "href": "guide/Quickstart.html",
    "title": "Quickstart",
    "keywords": "Quickstart This guide show how to create an application that represents Toast and CircleSlider . If user presses the button, Toast pops up and then it automatically disappear after timeout seconds. And If user rotates bezel of Tizen wearable device. CircleSlider bar is moving forward or backward direction. 1. Set up the development enviroment and Create a project Create Tizen Xamarin Forms App following to Tizen.org guide . In this guide project name is SampleCircleApp Select only wearable device at tizen project wizard. Search Tizen.Wearable.CircularUI nuget pakage at Nuget package manager. Package source is nuget.org. Install Tizen.Wearable.CircularUI nuget at portable class library(PCL) project. 2. Insert CircularUI Control code remove SampleCircleApp.cs that is generated automatically at PCL. and then add App.xaml and App.xaml.cs using add item. In App.xaml file, remove all of the template code and replace it with the following code. This code defines the user interface for the page. xmlns:w=clr-namespace:Tizen.Wearable.CircularUI.Forms : w prefix means Tizen.Wearable.CircularUI.Forms namespace. <w:CirclePage> : CirclePage derive from Xamarin.Forms.Page . This Page's content area has Label and Button . <w:CirclePage.CircleSurfaceItems> : CircleSliderSurfaceItem attached for CircleSurfaceItem of CirclePage . RotaryFocusTargetName is set slider name. CircleSliderSurfaceItem has rotary focus. CircleSliderSurfaceItem can receive rotary event from the wearable device's bezel interaction. For more information . Please refer to CirclePage guide App.xaml file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <Application x:Class=\"SampleCircleApp.App\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:SimpleCircleApp\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <Application.MainPage> <NavigationPage x:Name=\"MainNavigation\"> <x:Arguments> <w:CirclePage x:Name=\"page\" NavigationPage.HasNavigationBar=\"False\" RotaryFocusTargetName=\"slider\"> <w:CirclePage.Content> <StackLayout HorizontalOptions=\"Center\" Orientation=\"Vertical\" VerticalOptions=\"Center\"> <Label HorizontalTextAlignment=\"Center\" Text=\"Welcome to Xamarin Forms!\" /> <Button Clicked=\"OnButtonClicked\" Text=\"show toast\" /> </StackLayout> </w:CirclePage.Content> <w:CirclePage.CircleSurfaceItems> <w:CircleSliderSurfaceItem x:Name=\"slider\" Increment=\"0.5\" IsVisible=\"True\" Maximum=\"15\" Minimum=\"0\" Value=\"3\" /> </w:CirclePage.CircleSurfaceItems> </w:CirclePage> </x:Arguments> </NavigationPage> </Application.MainPage> </Application> In App.xaml.cs, remove all of the template code and replace it with the following code. OnButtonClicked is event handler of Button Clicked event. below code simply display Toast popup during 3 second. App.xaml.cs file using Tizen.Wearable.CircularUI.Forms; using System; using Xamarin.Forms; using Xamarin.Forms.Xaml; namespace SampleCircleApp { [XamlCompilation(XamlCompilationOptions.Compile)] public partial class App : Application { public App() { InitializeComponent(); } public void OnButtonClicked(object sender, EventArgs e) { Toast.DisplayText(\"Toast popup\", 3000); } } } For initialize CircularUI instance. Please insert FormsCircularUI.Init() code in Main method at SampleCircleApp.Tizen.Wearable.cs . You should import Tizen.Wearable.CircularUI.Forms.Renderer with using directives. SampleCircleApp.Tizen.Wearable.cs file using Tizen.Wearable.CircularUI.Forms.Renderer; static void Main(string[] args) { var app = new Program(); global::Xamarin.Forms.Platform.Tizen.Forms.Init(app); FormsCircularUI.Init(); //must insert this initialize code app.Run(args); } 3. Build and then launch your application. Build the solution. In the Visual Studio menu, select Build > Build Solution. In the Solution Explorer view, right-click the solution name and select Build. Launch Tizen Emulator Press Launch Tizen Emulator button, refer to below image In Windows OS. copy application tpk from project binary path to sdb tool path.\\ SampleCircleApp tpk locate in ProjectPath\\SampleCircleApp.Tizen.Wearable\\bin\\Debug\\tizen40\\org.tizen.example.SampleCircleApp.Tizen.Wearable-1.0.0.tpk .\\ You can verify your project path. In the Solution Explorer view, right-click the solution name and press open folder in file explorer menu. sdb tool loacted in c:\\tizen\\tools\\sdb.exe ) If your OS is window, launch Tizen Sdb Command Prompt(Tool > Tizen > Tizen Sdb Command Prompt). If you use Linux. you can use sdb command directly in your project path. Install your app with sdb command sdb install org.tizen.example.SampleCircleApp.Tizen.Wearable-1.0.0.tpk Check your App at Wearable emulator"
  },
  "guide/ContextPopup.html": {
    "href": "guide/ContextPopup.html",
    "title": "ContextPopup",
    "keywords": "ContextPopup ContextPopup represents Tizen wearable context popup that has one or two items. ContextPopup has same shape as ConfirmPopupEffect . ConfirmPopupEffect can be attached any control (such as button). ContextPopup is displayed seperate from any control. So you can't set this in XAML file. If you want to attach context popup in XAML file. please use ConfirmPopupEffect instead Create ContextPopup ContextPopupItem is each item of ContextPopup . ContextPopupItem parameter of constructor set item text. One or two ContextPopupItem can be attached at ContextPopup using ContextPopup.Items.Add() . ItemSelected event is occurred when user select item. SelectedItem get the value which item selected. It is possible to add more than 2 items, but any items from 3rd item are hidden. so one or two items are recommended. This guide's code example use WearableUIGallery's TCContextPopup code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCContextPopup.xaml.cs For more information . Please refer to ContextPopup API reference C# file var item1 = new ContextPopupItem(\"item 1\"); var item2 = new ContextPopupItem(\"item 2\"); _popup.Items.Add(item1); _popup.Items.Add(item2); _popup.ItemSelected += (s, e) => { Console.WriteLine($\"{_popup.SelectedItem?.Label} is selected\"); /* insert code when user select item */ };"
  },
  "guide/InformationPopup.html": {
    "href": "guide/InformationPopup.html",
    "title": "InformationPopup",
    "keywords": "InformationPopup InformationPopup can represent 3 types of Tizen Wearable EFL popup style. InformationPopup is usefull to show any information or warnning. InformationPopup is displayed seperate from any control. So you can't set this in XAML file. Create single text InformationPopup Single text informationPopup is used for displaying text. Single text informationPopup is similar to Toast popup. but this popup doesn't disappear automatically.\\ Text property can be set with text. BackButtonPressed event occur when user press back button of device. If you want to dismiss popup when this event occurred. you should add Dismiss() in BackButtonPressed event handle code. This guide's code example use WearableUIGallery's TCInformationPopup code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCInformationPopup.xaml.cs For more information . Please refer to InformationPopup API reference C# file _textPopUp = new InformationPopup(); _textPopUp.Text = \"This is text popup test\"; _textPopUp.BackButtonPressed += (s, e) => { _textPopUp.Dismiss(); label1.Text = \"text popup is dismissed\"; }; Create bottom button InformationPopup You can set BottomButton property with MenuItem . bottom button is used for confirmation of user. InformationPopup has Title property for displaying title. BottomButton.Clicked event occur when user press bottom button. C# file var bottomButton = new MenuItem() { Text = \"OK\", Command = new Command(() => { /* must insert code when user press left button */ }) }; _textButtonPopUp = new InformationPopup(); _textButtonPopUp.Title = \"Popup title\"; _textButtonPopUp.Text = \"This is text and button popup test\"; _textButtonPopUp.BottomButton = bottomButton; _textButtonPopUp.BottomButton.Clicked += (s, e) => { _textButtonPopUp.Dismiss(); label1.Text = \"text&button is dismissed\"; }; Create progress InformationPopup InformationPopup has IsProgressRunning property. If this property set true . small circle progress bar is displayed center of screen. C# file _progressPopUp = new InformationPopup(); _progressPopUp.Title = \"Popup title\"; _progressPopUp.Text = \"This is progress test\"; _progressPopUp.IsProgressRunning = true;"
  },
  "api/Tizen.Wearable.CircularUI.Forms.PopupEntry.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.PopupEntry.html",
    "title": "Class PopupEntry",
    "keywords": "Class PopupEntry The PopupEntry is a class that extends Xamarin.Forms.Entry. It makes a new layer when editing text on the entry. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.VisualElement Xamarin.Forms.View Xamarin.Forms.InputView Xamarin.Forms.Entry PopupEntry Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.IEntryController Xamarin.Forms.IElementConfiguration < Xamarin.Forms.Entry > Inherited Members Xamarin.Forms.Entry.ReturnTypeProperty Xamarin.Forms.Entry.ReturnCommandProperty Xamarin.Forms.Entry.ReturnCommandParameterProperty Xamarin.Forms.Entry.PlaceholderProperty Xamarin.Forms.Entry.IsPasswordProperty Xamarin.Forms.Entry.TextProperty Xamarin.Forms.Entry.TextColorProperty Xamarin.Forms.Entry.HorizontalTextAlignmentProperty Xamarin.Forms.Entry.PlaceholderColorProperty Xamarin.Forms.Entry.FontFamilyProperty Xamarin.Forms.Entry.FontSizeProperty Xamarin.Forms.Entry.FontAttributesProperty Xamarin.Forms.Entry.IsTextPredictionEnabledProperty Xamarin.Forms.Entry.On<T>() Xamarin.Forms.Entry.HorizontalTextAlignment Xamarin.Forms.Entry.IsPassword Xamarin.Forms.Entry.Placeholder Xamarin.Forms.Entry.PlaceholderColor Xamarin.Forms.Entry.Text Xamarin.Forms.Entry.TextColor Xamarin.Forms.Entry.FontAttributes Xamarin.Forms.Entry.FontFamily Xamarin.Forms.Entry.FontSize Xamarin.Forms.Entry.IsTextPredictionEnabled Xamarin.Forms.Entry.ReturnType Xamarin.Forms.Entry.ReturnCommand Xamarin.Forms.Entry.ReturnCommandParameter Xamarin.Forms.Entry.Completed Xamarin.Forms.Entry.TextChanged Xamarin.Forms.InputView.KeyboardProperty Xamarin.Forms.InputView.IsSpellCheckEnabledProperty Xamarin.Forms.InputView.MaxLengthProperty Xamarin.Forms.InputView.MaxLength Xamarin.Forms.InputView.Keyboard Xamarin.Forms.InputView.IsSpellCheckEnabled Xamarin.Forms.View.VerticalOptionsProperty Xamarin.Forms.View.HorizontalOptionsProperty Xamarin.Forms.View.MarginProperty Xamarin.Forms.View.OnBindingContextChanged() Xamarin.Forms.View.GestureRecognizers Xamarin.Forms.View.HorizontalOptions Xamarin.Forms.View.Margin Xamarin.Forms.View.VerticalOptions Xamarin.Forms.VisualElement.NavigationProperty Xamarin.Forms.VisualElement.InputTransparentProperty Xamarin.Forms.VisualElement.IsEnabledProperty Xamarin.Forms.VisualElement.XProperty Xamarin.Forms.VisualElement.YProperty Xamarin.Forms.VisualElement.AnchorXProperty Xamarin.Forms.VisualElement.AnchorYProperty Xamarin.Forms.VisualElement.TranslationXProperty Xamarin.Forms.VisualElement.TranslationYProperty Xamarin.Forms.VisualElement.WidthProperty Xamarin.Forms.VisualElement.HeightProperty Xamarin.Forms.VisualElement.RotationProperty Xamarin.Forms.VisualElement.RotationXProperty Xamarin.Forms.VisualElement.RotationYProperty Xamarin.Forms.VisualElement.ScaleProperty Xamarin.Forms.VisualElement.IsVisibleProperty Xamarin.Forms.VisualElement.OpacityProperty Xamarin.Forms.VisualElement.BackgroundColorProperty Xamarin.Forms.VisualElement.BehaviorsProperty Xamarin.Forms.VisualElement.TriggersProperty Xamarin.Forms.VisualElement.StyleProperty Xamarin.Forms.VisualElement.WidthRequestProperty Xamarin.Forms.VisualElement.HeightRequestProperty Xamarin.Forms.VisualElement.MinimumWidthRequestProperty Xamarin.Forms.VisualElement.MinimumHeightRequestProperty Xamarin.Forms.VisualElement.IsFocusedProperty Xamarin.Forms.VisualElement.FlowDirectionProperty Xamarin.Forms.VisualElement.BatchBegin() Xamarin.Forms.VisualElement.BatchCommit() Xamarin.Forms.VisualElement.Focus() Xamarin.Forms.VisualElement.GetSizeRequest(System.Double, System.Double) Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle) Xamarin.Forms.VisualElement.Measure(System.Double, System.Double, Xamarin.Forms.MeasureFlags) Xamarin.Forms.VisualElement.Unfocus() Xamarin.Forms.VisualElement.InvalidateMeasure() Xamarin.Forms.VisualElement.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildrenReordered() Xamarin.Forms.VisualElement.OnMeasure(System.Double, System.Double) Xamarin.Forms.VisualElement.OnParentSet() Xamarin.Forms.VisualElement.OnSizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.OnSizeRequest(System.Double, System.Double) Xamarin.Forms.VisualElement.SizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.VisualElement.ChangeVisualState() Xamarin.Forms.VisualElement.FlowDirection Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.VisualElement.AnchorX Xamarin.Forms.VisualElement.AnchorY Xamarin.Forms.VisualElement.BackgroundColor Xamarin.Forms.VisualElement.Behaviors Xamarin.Forms.VisualElement.Bounds Xamarin.Forms.VisualElement.Height Xamarin.Forms.VisualElement.HeightRequest Xamarin.Forms.VisualElement.InputTransparent Xamarin.Forms.VisualElement.IsEnabled Xamarin.Forms.VisualElement.IsFocused Xamarin.Forms.VisualElement.IsVisible Xamarin.Forms.VisualElement.MinimumHeightRequest Xamarin.Forms.VisualElement.MinimumWidthRequest Xamarin.Forms.VisualElement.Navigation Xamarin.Forms.VisualElement.Opacity Xamarin.Forms.VisualElement.Rotation Xamarin.Forms.VisualElement.RotationX Xamarin.Forms.VisualElement.RotationY Xamarin.Forms.VisualElement.Scale Xamarin.Forms.VisualElement.Style Xamarin.Forms.VisualElement.StyleClass Xamarin.Forms.VisualElement.class Xamarin.Forms.VisualElement.TranslationX Xamarin.Forms.VisualElement.TranslationY Xamarin.Forms.VisualElement.Triggers Xamarin.Forms.VisualElement.Width Xamarin.Forms.VisualElement.WidthRequest Xamarin.Forms.VisualElement.X Xamarin.Forms.VisualElement.Y Xamarin.Forms.VisualElement.Resources Xamarin.Forms.VisualElement.ChildrenReordered Xamarin.Forms.VisualElement.Focused Xamarin.Forms.VisualElement.MeasureInvalidated Xamarin.Forms.VisualElement.SizeChanged Xamarin.Forms.VisualElement.Unfocused Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.ParentView Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.BindingContextChanged Xamarin.Forms.BindableObject.PropertyChanging System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class PopupEntry : Entry, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IAnimatable, IResourcesProvider, IFlowDirectionController, IStyleSelectable, IStylable, IViewController, IVisualElementController, IElementController, IFontElement, ITextElement, ITextAlignmentElement, IEntryController, IElementConfiguration<Entry> Constructors PopupEntry() Declaration public PopupEntry() Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.IEntryController Xamarin.Forms.IElementConfiguration<TElement>"
  },
  "api/Tizen.Wearable.CircularUI.Forms.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.html",
    "title": "Namespace Tizen.Wearable.CircularUI.Forms",
    "keywords": "Namespace Tizen.Wearable.CircularUI.Forms Classes ActionButtonItem The ActionButtonItem is a class that presents a menu item and associates it with a command Check The check widget allows for toggling a value between true and false. The check is extension of Xamarin.Forms.Switch. CircleDateTimeSelector The CircleDateTimeSelector is a view that can change the value by bezel action by touching each item of \"Year: Month: Day\" and \"Hour: Minute: AM / PM\" CircleListView The CircleListView is a view that represents Xamarin.Forms.ListView on Circular UI. You can move the list through bezel action. CirclePage The CirclePage is a ContentPage, which allows you to insert views that require CircleSurface, and you can show ToolbarItems with MoreOption. It has an ActionButton, and can use the MenuItem type as text, icon, command, and so on. CirclePageNotFoundException The CirclePageNotFoundException is an Exception class that occurs when a CircleSurface has no child. CircleProgressBarSurfaceItem The CircleProgressBarSurfaceItem displays circular progressbar at CirclePage. CircleScrollView The CircleScrollView has circular scroll bar. it can be scrolled by bezel action. The CircleScrollView is extension of Xamarin.Forms.ScrollView. CircleSliderSurfaceItem The CircleSliderSurfaceItem displays circular slider at CirclePage. CircleStackLayout CircleStepper The CircleStepper is a class that extends Xamarin.Forms.Stepper for Circular UI. CircleSurfaceEffectBehavior The CircleSurfaceEffectBehavior is an effect which allows you to insert views that require CircleSurface. CircleSurfaceItem The CircleSurfaceItem is a class that controls the items represented in the CircleSurface. CircleToolbarItem The CircleToolbarItem is a class that extends Xamarin.Forms.ToolbarItem for Circular UI. ConfirmationPopup The ConfirmationPopup describe pop-up which has circular two button, title, text, and content area. ConfirmPopupEffect The ConfirmPopupEffect is an effect that is proportional to a particular widget or has one or two buttons anywhere on the screen ContextPopup The ContextPopup class allows a contextual popup to be anchored at a view. ContextPopupItem The ContextPopupItem is a class to control items in a ContextPopup. IndexPage The IndexPage is extension of Xamarin.Forms.MultiPage. When Page is added/removed at Multipage. circular index is added/removed automatically at the top of window. InformationPopup PopupEntry The PopupEntry is a class that extends Xamarin.Forms.Entry. It makes a new layer when editing text on the entry. Radio The Radio is a widget that allows one or more options to be displayed and have the user choose only one of them. RotaryEventArgs Event arguments for RotaryEvent. SelectedEventArgs Event arguments for events of RadioButton. Toast The Toast class provides properties that show simple types of messages TwoButtonPage The TwoButtonPage is a page that has a rectangular area inside the circle as contents area. It also has two buttons and a Title area. Interfaces ICircleSurfaceItem The ICircleSurfaceItem is an interface that controls the items represented in the CircleSurface. IRotaryEventReceiver The IRotaryEventReceiver is a receiver interface to take Rotary Events IRotaryFocusable The IRotaryFocusable is an interface to take a Rotary Event Enums CheckDisplayStyle Enumeration for the style of the Check. DateTimeType Enumeration for style type of CircleDateTimeSelector PositionOption Enumeration for position type of popup Delegates RotaryEventHandler Delegate for a triggering rotary event"
  },
  "guide/CirclePage.html": {
    "href": "guide/CirclePage.html",
    "title": "CirclePage",
    "keywords": "CirclePage CirclePage derives from Xamarin.Forms.Page. This visual element occupies all of the wearable screen. Overview CirclePage is container of any control that use circleObject or rotary event. if you want to use any circle control or to handle rotary event. you have to use CirclePage. CirclePage can set bottom button and circle ProgressBar and circle Slider and MoreOption on it's own. WARNNING: CircleListView , CircleDateTimeSelector , CircleScroller , CircleStepper must be contained by CirclePage or CircleSurfaceEffectBehavior should be added in Behaviors of Page that contain these Control. If other page contains these control. It may cause exception or control can not be displayed. bottom button Semicircular button is shown at bottom of screen. refer to below image. Circle ProgressBar Circle ProgressBar shows the progress status of a given task with the circular design. Circle Slider Circle Slider changes value corresponding to rotary events. this shows a circle bar at the edge of the circle screen. You can change radius of circle bar with modifying radius value. MoreOption More option contains a cue button (shown on the left in the following figure). When the cue button is clicked, the rotary selector view opens from the cue location (shown on the right in the figure). The rotary selector arranges multiple items around the circular edge of the screen, and switches the focus between items as users rotate the bezel. Create CirclePage First, you should download Tizen.Wearalbe.CircularUI nuget package in your application project, please refer to QuickStart .\\ Add a new XAML page to the Tizen Xamarin.Forms application, First import Tizen.Wearable.CircularUI.Forms and change the base class from ContentPage to CirclePage. This has to be done in both the C# and XAML.\\ In a XAML file. import CircularUI and define namespace like as \\ xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" This guide's code example use WearableUIGallery's TCCirclePage code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCCirclePage.xaml C# file using Tizen.Wearable.CircularUI.Forms; using Xamarin.Forms.Xaml; namespace WearableUIGallery.TC { [XamlCompilation(XamlCompilationOptions.Compile)] public partial class TCCirclePage : CirclePage { public TCCirclePage() { InitializeComponent(); } } } XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:CirclePage x:Class=\"WearableUIGallery.TC.TCCirclePage\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery.TC\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" RotaryFocusTargetName=\"{Binding RotaryFocusName}\"> <w:CirclePage.Content> Adding Content at CirclePage You can set content at CirclePage.Content . The following XAML code show CirclePage set content with CircleDateTimeSelector . RotaryFocusTargetName attribute set the current focused control that is handle by rotating and display the focused control's circle object. If you don't set this value properly. Control can't receive rotary event or circle object can't be shown. For more information . Please refer to CirclePage API reference XAML file <w:CirclePage x:Class=\"WearableUIGallery.TC.TCCirclePage\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery.TC\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" RotaryFocusTargetName=\"{Binding RotaryFocusName}\"> <w:CirclePage.BindingContext> <local:TCCirclePageViewModel /> </w:CirclePage.BindingContext> <w:CirclePage.Content> <StackLayout BackgroundColor=\"Black\" HorizontalOptions=\"FillAndExpand\" Orientation=\"Vertical\" VerticalOptions=\"FillAndExpand\"> <w:CircleDateTimeSelector x:Name=\"DateSelector\" IsVisibleOfDate=\"{Binding DateVisiblity}\" MaximumDate=\"1/1/2020\" MinimumDate=\"1/12/2015\" ValueType=\"Date\" /> </StackLayout> </w:CirclePage.Content> Adding ActionButtonItem at CirclePage ActionButtonItem in CirclePage presents bottom button. ActionButtonItem derive from Xamarin.Forms.Menuitem . ActionButtonItem has the following properties: Command : Gets or sets the ICommand to be invoked on activation(item clicked). Text : Gets or sets button's text. For more information . Please refer to ActionButtonItem API reference XAML file <w:CirclePage.ActionButton> <w:ActionButtonItem Command=\"{Binding ProgressBarVisibleCommand}\" Text=\"OK\" /> </w:CirclePage.ActionButton> Adding ToolbarItems at CirclePage CirclePage ToolbarItems set rotary selector view's items. You can set each item with CircleToolbarItem property.\\ CircleToolbarItem derive from Xamarin.Forms.ToolbarItem . CircleToolbarItem has the following properties: Command : Gets or sets the ICommand to be invoked on activation(item clicked). Icon : Gets or sets item's image. Text : Gets or sets item's title. For more information . Please refer to CircleToolbarItem API reference XAML file <w:CirclePage.ToolbarItems> <w:CircleToolbarItem Command=\"{Binding Play.Action}\" Icon=\"{Binding Play.Icon}\" SubText=\"{Binding Play.SubText}\" Text=\"{Binding Play.Text}\" /> <w:CircleToolbarItem Command=\"{Binding Stop.Action}\" Icon=\"{Binding Stop.Icon}\" SubText=\"{Binding Stop.SubText}\" Text=\"{Binding Stop.Text}\" /> ... </w:CirclePage.ToolbarItems> Adding CircleProgressBarSurfaceItem at CirclePage CirclePage CircleSurfaceItems can set CircleProgressBarSurfaceItem and CircleSliderSurfaceItem .\\ CircleProgressBarSurfaceItem represent Circle ProgressBar. progress1 at XAML code represents outter circle of below image. and progress2 represents inner circle.\\ If you use CircleProgressbar, you don't need to set RotaryFocusTargetName property of CirclePage. When Value property is incread or decrease. circle object extend or shrink following to Value property. CircleProgressBarSurfaceItem has the following properties: Value : Gets or sets the value of the progressbar.. IsVisible : Gets or sets the visibility value of circle surface item. BarRadius : Gets or sets the bar radius value. BackgroundRadius : Gets or sets the background radius value. BarLineWidth : Gets or sets the bar line width value. BackgroundLineWidth : Gets or sets the background line width value. BarColor : Gets or sets the bar color value. BackgroundLineWidth : Gets or sets the background color value. For more information . Please refer to CircleSurfaceItem API reference This guide's code example use XUIComponent's CircleProgressBar.xaml code at the sample\\XUIComponents\\UIComponents\\UIComponents\\Samples\\CircleProgressBar.xaml XAML file <w:CirclePage x:Class=\"UIComponents.Samples.CircleProgressBar\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:UIComponents.Samples\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" NavigationPage.HasNavigationBar=\"False\"> <w:CirclePage.BindingContext> <local:CircleProgressBarViewModel /> </w:CirclePage.BindingContext> <w:CirclePage.Content> <StackLayout Padding=\"0,30,0,0\" BackgroundColor=\"Black\" HorizontalOptions=\"Center\" Orientation=\"Vertical\" VerticalOptions=\"FillAndExpand\"> <Label x:Name=\"label1\" FontAttributes=\"Bold\" FontSize=\"12\" Text=\"{Binding ProgressLabel1}\" TextColor=\"White\" /> <Label x:Name=\"label2\" Margin=\"0,40\" FontAttributes=\"Bold\" FontSize=\"12\" Text=\"{Binding ProgressLabel2}\" TextColor=\"White\" /> </StackLayout> </w:CirclePage.Content> <w:CirclePage.CircleSurfaceItems> <w:CircleProgressBarSurfaceItem x:Name=\"progress1\" IsVisible=\"True\" Value=\"{Binding ProgressValue1}\" /> <w:CircleProgressBarSurfaceItem x:Name=\"progress2\" BackgroundColor=\"Black\" BackgroundLineWidth=\"15\" BackgroundRadius=\"70\" BarColor=\"Red\" BarLineWidth=\"15\" BarRadius=\"70\" IsVisible=\"True\" Value=\"{Binding ProgressValue2}\" /> </w:CirclePage.CircleSurfaceItems> </w:CirclePage>"
  },
  "guide/Toast.html": {
    "href": "guide/Toast.html",
    "title": "Toast",
    "keywords": "Toast Toast provides simple information. Toast automatically disappear after timeout seconds. Tizen Wearable Toast fills the whole screen for displaying message and image. Create Toast Toast is static method. so you don't need to any container or parent control for using this control. Toast provides two method, Toast.DisplayText() shows simple text message. Toast.DisplayIconText() shows simple icon and simple text message.\\ Toast.DisplayText() first parameter is message text. and second parameter is timeout duration(milliseconds). second parameter is optional. If you don't set this value. default value(3000) is set.\\ Toast.DisplayIconText() first parameter is message text. and second parameter is icon file path, you can set file path with new FileImageSource . third parameter is timeout duration that is also optional. For more information . Please refer to Toast API reference C# file Toast.DisplayText(\"Toast popup\", 3000); Toast.DisplayIconText(\"Toast popup2\", new FileImageSource { File = \"image/tw_ic_popup_btn_check.png\" }, 2000);"
  }
}