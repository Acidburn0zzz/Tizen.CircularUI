{
  "guide/PopupEntry.html": {
    "href": "guide/PopupEntry.html",
    "title": "PopupEntry",
    "keywords": "PopupEntry PopupEntry is a control that allows you to enter text with the IME when you click on Entry . Overview PopupEntry control has exactly the same usage as the Entry . However, in the case of a regular Entry in a circular screen, the input text gets hidden behind the IME at the time of input. The PopupEntry allows the input to be on a pop up, hence the written text is visible. The following images shows a screen with a normal Entry and a screen with the text on the IME when you click on Entry . The Entry is not visible because it is masked by the IME. The above image is the same as using PopupEntry , It can type text while watching it properly. When PopupEntry is used: The BackgroundColor of the input pop up is the same as the BackgroundColor of the PopupEntry . The TextColor inside the input pop up is also the same as the TextColor of the PopupEntry . The IsPassword property of the input pop up is also the same as the PopupEntry . How to use PopupEntry uses the same method as the Entry . <?xml version=\"1.0\" encoding=\"utf-8\" ?> <ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" x:Class=\"WearableUIGallery.TC.TCPopupEntry\"> <ContentPage.Content> <w:CircleStackLayout> <w:PopupEntry BackgroundColor=\"Gray\" TextColor=\"Blue\" VerticalOptions=\"CenterAndExpand\" HorizontalOptions=\"CenterAndExpand\" /> <w:PopupEntry Placeholder=\"Foobar\" VerticalOptions=\"CenterAndExpand\" HorizontalOptions=\"CenterAndExpand\" /> <w:PopupEntry IsPassword=\"True\" VerticalOptions=\"CenterAndExpand\" HorizontalOptions=\"CenterAndExpand\" /> </w:CircleStackLayout> </ContentPage.Content> </ContentPage>"
  },
  "guide/ContextPopupEffectBehavior.html": {
    "href": "guide/ContextPopupEffectBehavior.html",
    "title": "ContextPopupEffectBehavior",
    "keywords": "ContextPopupEffectBehavior ContextPopupEffectBehavior is a Behavior for Xamarin.Forms that is used to create the View with one or two buttons. A popup with only one button will have an Accept button only. The default text for Accept button is OK. When Visibility is set to True , the popup appears on the screen. The popup displayed with the Accept or Cancel button is executed automatically. Accept command is executed when click Accept button. After the command is executed, popup disappears and Visibility is set to False . If you touch outside of the popup, the popup is removed. It is same to execute Cancel command. You can adjust the X and Y value to change the position of popup. Add popup with ContextPopupEffectBehavior in CirclePage You can set popup with the ContextPopupEffectBehavior in any View . For more information on how to add CirclePage , see CirclePage guide . ContextPopupEffectBehavior has the following properties: AcceptCommand : System.Windows.Input.ICommand . This command is executed when Accept. CancelCommand : System.Windows.Input.ICommand . This command is executed when Cancel. It is also executed when the popup disappears on touching an area outside the popup. Visibility : This property when set to True , the popup appears and when set to False , the popup disappears. The CancelCommand works even when the popup disappears and the Visibility is set to False . PositionOption : The popup has the following position type BottomOfView : The popup appears at the bottom of the view with ContextPopupEffectBehavior . The position is changed by offset in the center of view. CenterOfParent : In the center of the screen, you can move the values of offset to adjust position of popup. Absolute : The value of offset is X, Y and popup is placed on the screen. Relative : Set the width of the screen to Offset.X * Window.Width and height of the screen to Offset.Y * Window.Height. In the example, you can see a Check with the ContextPopupEffectBehavior in the AbsoluteLayout set into the CirclePage . The text for the AcceptText and the CancelText are set. Also, the commands for AcceptCommand and CancelCommand are set. When selected, Yes will change the background color to green and No will change the background color to red. The PositionOption is set as CenterOfParent . The value of Visibility is set to IsToggled . BottomOfView CenterOfParent Absolute/Relative For more information, see the following links: ContextPopupEffectBehavior API reference Xamarin.Forms.Behaviors Guide Consuming a Xamarin.Forms Behavior To create a context popup in CirclePage, use the following code: C# file [XamlCompilation(XamlCompilationOptions.Compile) public partial class TCConfirm : CirclePage { public TCConfirm () { AcceptedCommand = new Command(() => BackgroundColor = Color.Green); CancelCommand = new Command(() => BackgroundColor = Color.Red); InitializeComponent (); CtxCheck.PropertyChanged += (s, e) => { if (e.PropertyName == Check.IsToggledProperty.PropertyName) System.Diagnostics.Debug.WriteLine($\"IsToggled = {CtxCheck.IsToggled}\"); }; } public ICommand AcceptedCommand { get; private set; } public ICommand CancelCommand { get; private set; } } XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:CirclePage x:Class=\"WearableUIGallery.TC.TCConfirm\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" x:Name=\"mypage\"> <ContentPage.Content> <AbsoluteLayout> <w:Check x:Name=\"CtxCheck\" AbsoluteLayout.LayoutBounds=\"0.5, 0.2, 1, 0.25\" AbsoluteLayout.LayoutFlags=\"All\" HorizontalOptions=\"CenterAndExpand\" IsToggled=\"False\" VerticalOptions=\"CenterAndExpand\"> <w:Check.Behaviors> <w:ContextPopupEffectBehavior AcceptCommand=\"{Binding AcceptedCommand, Source={x:Reference mypage}}\" AcceptText=\"Yes\" CancelCommand=\"{Binding CancelCommand, Source={x:Reference mypage}}\" CancelText=\"No\" Visibility=\"{Binding IsToggled, Source={x:Reference CtxCheck}, Mode=TwoWay}\" PositionOption=\"BottomOfView\"/> </w:Check.Behaviors> </w:Check> </AbsoluteLayout> </ContentPage.Content> </w:CirclePage> Screenshot 1st scene with Check 2nd scene with context popup 3rd scene when selects 'Yes'"
  },
  "guide/IRotaryEventReceiver.html": {
    "href": "guide/IRotaryEventReceiver.html",
    "title": "IRotaryEventReceiver",
    "keywords": "IRotaryEventReceiver IRotaryEventReceiver is a receiver interface to receive Rotary event . When a rotary event occur, IRotaryEventReceiver calls Rotate(RotaryEventArgs) method. You can control the Rotary event using this interface. If you read the following paragraphs, you can easily rotate image according to bezel rotation. Add IRotaryEventReceiver Add IRotaryEventReceiver interface to CirclePage or Page having CircleSurfaceEffectBehavior . Implement Rotate() method to control a rotary event. RotaryEventArgs is event argument for the Rotary Event. RotaryEventArgs.IsClockwise gets the direction of bezel rotation. IsClockwise is true , when the device is rotated in the clockwise direction. The following sample receives rotary event at Rotate() method and add angle of the image following to rotary event direction. And then rotate the image. For more information, see IRotaryEventReceiver API reference . The code example of this guide uses TCIRotaryEventReceiver code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCIRotaryEventReceiver.xaml C# file [XamlCompilation(XamlCompilationOptions.Compile)] public partial class TCIRotaryEventReceiver : CirclePage, IRotaryEventReceiver { bool _rotating; double _angle; public TCIRotaryEventReceiver () { InitializeComponent (); _angle = 0; } public void Rotate(RotaryEventArgs args) { if (_rotating) return; _rotating = true; _angle += args.IsClockwise ? 30 : -30; Cat.RotateTo(_angle).ContinueWith( (b) => { _rotating = false; if (_angle == 360) { Cat.Rotation = 0; _angle = 0; } }); } } XAML file <w:CirclePage.Content> <Image x:Name=\"Cat\" Source=\"image/cat360.png\" /> </w:CirclePage.Content>"
  },
  "guide/Check.html": {
    "href": "guide/Check.html",
    "title": "Check",
    "keywords": "Check Check provides Tizen Wearable specific CheckBox widget. Check accepts user input by the method of toggling. Check derives from Xamarin.Forms.Switch . Create Check You can easily add Check control with C# or XAML file. Tizen wearable device supports 3 styles of DisplayStyle ( Default , Onoff , Small ). Each shape of DisplayStyle depends on the device model. You can set the default value of check with IsToggled property. True value set Check selected. False value set Check unselected. Toggled event is raised when Check is toggled. You must add code for handling Toggled event. For more information, see the following links: Check API reference Xamarin.Forms.Switch API reference C# file var check = new Check { HorizontalOptions = LayoutOptions.Center, VerticalOptions = LayoutOptions.Center, DisplayStyle = \"Onoff\" } check.Toggled += (s, e) => { Console.WriteLine(\"Check is now {0}\", e.Value); } XAML file Refer to TCCheck code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCCeck.xaml <StackLayout Orientation=\"Vertical\"> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Default\" /> <w:Check DisplayStyle=\"Default\" HorizontalOptions=\"CenterAndExpand\" IsToggled=\"False\" Toggled=\"OnToggledDefault\" /> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Onoff\" /> <w:Check DisplayStyle=\"Onoff\" HorizontalOptions=\"FillAndExpand\" IsToggled=\"True\" Toggled=\"OnToggledOnOff\" /> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Small\" /> <w:Check DisplayStyle=\"Small\" HorizontalOptions=\"CenterAndExpand\" IsToggled=\"False\" Toggled=\"OnToggledSmall\" /> </StackLayout>"
  },
  "guide/CircleListView.html": {
    "href": "guide/CircleListView.html",
    "title": "CircleListView",
    "keywords": "CircleListView CircleListView is a view for presenting lists of data, a short list that does not require scrolling, and a long list that requires scrolling. This view is an extension of Xamarin.Forms.ListView . Similar to Xamarin.Forms.ListView , but the Scroller is rendered to CircleSurface . You can move the list using Bezel interaction and Drag . To receive Rotary event , it must be registered as RotaryFocusObject , property of CirclePage . Normal list Group list 2 texts and 1 icon list Components Header : Text or view that is displayed at the beginning of a list. Cells : Data in a CircleListView is presented in cells. Each cell corresponds to a row of data. Footer : Text or view that is displayed at end of a list. WARNING: CircleListView , CircleDateTimeSelector , CircleScrollView , CircleStepper must be confined in the CirclePage container or Page with CircleSurfaceEffectBehavior . If you add these controls in any other way, it may cause an exception or cannot display the controls. Add CircleListView in CirclePage You can set CircleListView in the CirclePage.Content . For more information on how to add a CirclePage , see CirclePage guide . RotaryFocusObject property sets the currently focused control using the rotating interaction, and displays the focused control's circle object. If the value is not set properly, the control will not receive the Rotary Event . You can either set the Header and/or Footer to a simple text, or to a more complex layout. Using HeaderTemplate and FooterTemplate properties you can create more complex layouts for the header and footer that support data binding. The following example has cells, header, footer. And use the DataTemplate to format a data object for display. For more information, see the following links: CircleListView API reference Xamarin.Forms.ListView API reference Xamarin.Forms.ListView Guide The code example of this guide uses TCCircleListView code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCCircleListView.xaml The following code shows CirclePage with CircleListView: XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:CirclePage x:Class=\"WearableUIGallery.TC.TCCircleListView\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" RotaryFocusObject=\"{x:Reference mylist}\"> <w:CirclePage.Content> <w:CircleListView x:Name=\"mylist\"> <w:CircleListView.ItemsSource> <x:Array x:Key=\"array\" Type=\"{x:Type sys:String}\"> <x:String>Item 1</x:String> <x:String>Item 2</x:String> <x:String>Item 3</x:String> <x:String>Item 4</x:String> <x:String>Item 5</x:String> <x:String>Item 6</x:String> <x:String>Item 7</x:String> <x:String>Item 8</x:String> <x:String>Item 9</x:String> <x:String>Item 10</x:String> <x:String>Item 11</x:String> <x:String>Item 12</x:String> </x:Array> </w:CircleListView.ItemsSource> <w:CircleListView.Header> <x:String>Header</x:String> </w:CircleListView.Header> <w:CircleListView.Footer> <x:String>Footer</x:String> </w:CircleListView.Footer> <w:CircleListView.ItemTemplate> <DataTemplate> <TextCell Text=\"{Binding .}\" /> </DataTemplate> </w:CircleListView.ItemTemplate> <w:CircleListView.HeaderTemplate> <DataTemplate> <Label FontAttributes=\"Bold\" FontSize=\"Large\" HorizontalTextAlignment=\"Center\" Text=\"{Binding .}\" TextColor=\"Red\" /> </DataTemplate> </w:CircleListView.HeaderTemplate> <w:CircleListView.FooterTemplate> <DataTemplate> <Label FontAttributes=\"Bold\" FontSize=\"Large\" HorizontalTextAlignment=\"Center\" Text=\"{Binding .}\" TextColor=\"Blue\" /> </DataTemplate> </w:CircleListView.FooterTemplate> </w:CircleListView> </w:CirclePage.Content> </w:CirclePage> Add Group List as list contents You can add group list as contents of CircleListView . To enable grouping: Create a list of List<>. Set ItemsSource to that list. Set IsGroupingEnabled to true. Set GroupDisplayBinding to bind to the property of the groups that is being used as the title of the group. The code example of this guide uses TCGroupList code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCGroupList.xaml C# file namespace WearableUIGallery.TC { ... public class GroupModel : List<NamedList<string>> { public GroupModel() { Add(new NamedList<string>(\"group1\") { \"Aaliyah\", \"Aamir\", \"Aaralyn \", \"Aaron\", \"Abagail\", \"Babitha\", \"Bahuratna\", \"Bandana\", \"Bulbul\", \"Cade\", \"Caldwell\" }); Add(new NamedList<string>(\"group2\") { \"Chandan\", \"Caster\", \"Dagan \", \"Daulat\", \"Dag\", \"Earl\", \"Ebenzer\", \"Ellison\", \"Elizabeth\", \"Filbert\", \"Fitzpatrick\", \"Florian\", \"Fulton\" }); Add(new NamedList<string>(\"group3\") { \"Frazer\", \"Gabriel\", \"Gage\", \"Galen\", \"Garland\", \"Gauhar\", \"Hadden\", \"Hafiz\", \"Hakon\", \"Haleem\", \"Hank\", \"Hanuman\" }); Add(new NamedList<string>(\"group4\") { \"Jabali \", \"Jaimini\", \"Jayadev\", \"Jake\", \"Jayatsena\", \"Jonathan\", \"Kamaal\", \"Jeirk\", \"Jasper\", \"Jack\", \"Mac\", \"Macy\", \"Marlon\", \"Milson\" }); } } public class NamedList<T> : List<T> { public NamedList(string name) => Name = name; public string Name { get; set; } }} XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:CirclePage x:Class=\"WearableUIGallery.TC.TCGroupList\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery.TC\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <w:CirclePage.BindingContext> <local:GroupModel /> </w:CirclePage.BindingContext> <w:CirclePage.Content> <w:CircleListView x:Name=\"mylist\" GroupDisplayBinding=\"{Binding Name}\" IsGroupingEnabled=\"True\" ItemsSource=\"{Binding .}\"> <w:CircleListView.Header> <x:String>TITLE</x:String> </w:CircleListView.Header> <w:CircleListView.HeaderTemplate> <DataTemplate> <Label FontAttributes=\"Bold\" FontSize=\"10\" HeightRequest=\"120\" HorizontalTextAlignment=\"Center\" Text=\"{Binding .}\" TextColor=\"#6CC3F1\" /> </DataTemplate> </w:CircleListView.HeaderTemplate> </w:CircleListView> </w:CirclePage.Content> </w:CirclePage> Add a list with 2 texts and 1 icon as list contents You can add a list with two texts and one icon as contents of CircleListView . This can easily be done using ViewCell . It is nested inside a DataTemplate , which is inside CircleListView.ItemTemplate . The Layout of ViewCell is managed by a StackLayout . You can place it in the StackLayout with your desired configuration. The code example of this guide uses XUIComponent's CircleList of Style2text1icon1 code. The code is available in sample\\XUIComponents\\UIComponents\\UIComponents\\Samples\\CircleList/ListViewModel.cs and Style2text1icon1.xaml C# file namespace WearableUIGallery.TC { public class ListViewModel : INotifyPropertyChanged { static List<string> _names = new List<string> { \"Aaliyah\", \"Aamir\", \"Aaralyn\", \"Aaron\", \"Abagail\", \"Babitha\", \"Bahuratna\", \"Bandana\", \"Bulbul\", \"Cade\", \"Caldwell\", \"Chandan\", \"Caster\", \"Dagan \", \"Daulat\", \"Dag\", \"Earl\", \"Ebenzer\", \"Ellison\", \"Elizabeth\", \"Filbert\", \"Fitzpatrick\", \"Florian\", \"Fulton\", \"Frazer\", \"Gabriel\", \"Gage\", \"Galen\", \"Garland\", \"Gauhar\", \"Hadden\", \"Hafiz\", \"Hakon\", \"Haleem\", \"Hank\", \"Hanuman\", \"Jabali \", \"Jaimini\", \"Jayadev\", \"Jake\", \"Jayatsena\", \"Jonathan\", \"Kamaal\", \"Jeirk\", \"Jasper\", \"Jack\", \"Mac\", \"Macy\", \"Marlon\", \"Milson\" }; ... public List<string> Names => _names; public ObservableCollection<CheckableName> CheckableNames { get; private set; } public int CheckedNamesCount { get => _checkedNamesCount; private set { if (_checkedNamesCount != value) { _checkedNamesCount = value; OnPropertyChanged(); UpdateSelectOptionMessage(); } } } public ListViewModel() { CheckableNames = new ObservableCollection<CheckableName>(); foreach (var name in _names) { var data = new CheckableName(name, false); data.PropertyChanged += (s, e) => { if (e.PropertyName == \"Checked\") { CheckedNamesCount += data.Checked ? 1 : -1; } }; CheckableNames.Add(data); } ... } } public class CheckableName : INotifyPropertyChanged { string _name; bool _checked; public CheckableName(string name, bool isChecked) { _name = name; _checked = isChecked; } public event PropertyChangedEventHandler PropertyChanged; public string Name { get => _name; set { if (_name != value) { _name = value; OnPropertyChanged(); } } } public bool Checked { get => _checked; set { if (_checked != value) { _checked = value; OnPropertyChanged(); } } } ... } XAML file <w:CirclePage x:Class=\"UIComponents.Samples.CircleList.Style2text1icon1\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:UIComponents.Samples.CircleList\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" RotaryFocusObject=\"{x:Reference mylist}\"> <w:CirclePage.BindingContext> <local:ListViewModel /> </w:CirclePage.BindingContext> <w:CirclePage.Content> <w:CircleListView x:Name=\"mylist\" ItemsSource=\"{Binding Names}\"> <w:CircleListView.ItemTemplate> <DataTemplate> <ViewCell> <StackLayout HeightRequest=\"120\" HorizontalOptions=\"FillAndExpand\" Orientation=\"Horizontal\" VerticalOptions=\"FillAndExpand\" WidthRequest=\"360\"> <StackLayout HorizontalOptions=\"CenterAndExpand\" Orientation=\"Vertical\" VerticalOptions=\"Center\"> <Label FontSize=\"8\" HorizontalOptions=\"Center\" HorizontalTextAlignment=\"Center\" Text=\"{Binding ., StringFormat='elm.text:{0}'}\" VerticalOptions=\"Center\" VerticalTextAlignment=\"Center\" /> <Label FontSize=\"5\" HorizontalOptions=\"Center\" HorizontalTextAlignment=\"Center\" Text=\"{Binding ., StringFormat='elm.text.1:{0}'}\" VerticalOptions=\"Center\" VerticalTextAlignment=\"Center\" /> </StackLayout> <w:Check DisplayStyle=\"Default\" HorizontalOptions=\"End\" VerticalOptions=\"Center\" /> </StackLayout> </ViewCell> </DataTemplate> </w:CircleListView.ItemTemplate> </w:CircleListView> </w:CirclePage.Content> </w:CirclePage>"
  },
  "index.html": {
    "href": "index.html",
    "title": "Tizen CircularUI",
    "keywords": "Tizen CircularUI The Tizen CircularUI is a set of helpful extensions to the Xamarin Forms framework on the Samsung Gear device. The binaries are available via NuGet (package name CircularUI) with the source available here. Controls Name Description Check A subclass of Xamarin.Forms.Switch control with some different styles. CircleDateTimeSelector A control to select date or time fits in the circular screen. CircleListView A subclass of Xamarin.Forms.ListView control fits in the circular screen. CirclePage A subclass of Xamarin.Forms.Page that can show Circular ProgressBar and Circular Slider and the button on the bottom of the screen. it can also show MenuItems on the circular menu.(MoreOption) CircleProgressBarSurfaceItem A control fits in the circular screen. it can be shown in CirclePage only. CircleSliderSurfaceItem A Slider control that responds to the bezel action and fits in the circular screen. CircleScrollView A subclass of Xamarin.Forms.ScrollView that can be scrolled by the bezel action. CircleStackLayout A container to layout children linear in the circular area. CircleStepper A control to select a number of steps fits in the circular screen. CircleSurfaceEffectBehavior The CircleSurfaceEffectBehavior is an behavior which allows you to insert views that require CircleSurface. TwoButtonPopup A popup has two button in left and right side of the circular screen. ContextPopupEffectBehavior The behavior to show a small popup has one or two buttons sticky with any control. IndexPage A subclass of multiple Pages that can slide child page horizontal and has dots on top of the screen for the number of child pages. InformationPopup A popup has a control to show progress and one button in the bottom side of the circular screen. IRotaryEventReceiver A event receiver for using the bezel action. Radio A radio control fits in the circular screen. PopupEntry The PopupEntry is a class that extends Xamarin.Forms.Entry. It makes a new layer when editing text on the entry. Toast A popup for simple feedback. TwoButtonPage A subclass of Xamarin.Forms.Page has two buttons on the left and right side of the circular screen."
  },
  "guide/TwoButtonPage.html": {
    "href": "guide/TwoButtonPage.html",
    "title": "TwoButtonPage",
    "keywords": "TwoButtonPage TwoButtonPage is derived from Xamarin.Forms.Page . TwoButtonPage has two semicircular buttons that are located at the left side and the right side of the circle. Non-overlapped Overlapped Create TwoButtonPage You can set controls in the TwoButtonPage.Content tag. In the XAML file example, a long text Label and two buttons are set as the content. If the Overlap property is set to true , the Content area occupies the entire screen. If the Overlap property is set to false , the Content area occupies the available area on the screen excluding the button area. The default value of Overlap property is always false . TwoButtonPage.firstButton sets left side button. TwoButtonPage.SecondButton sets right side button. You can add buttons using MenuItem . For more information, see the following links: TwoButtonPage API reference Xamarin.Forms.Page guide Xamarin.Forms.MenuItem API reference The code example of this guide uses TCTwoButtonPage code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCTwoButtonPage.xaml XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:TwoButtonPage x:Class=\"WearableUIGallery.TC.TCTwoButtonPage\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery.TC\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <w:TwoButtonPage.BindingContext> <local:TCTwoButtonPageViewModel /> </w:TwoButtonPage.BindingContext> <w:TwoButtonPage.Content> <ScrollView> <StackLayout HorizontalOptions=\"FillAndExpand\" VerticalOptions=\"FillAndExpand\"> <Label HorizontalOptions=\"FillAndExpand\" HorizontalTextAlignment=\"Center\" Text=\"{Binding Text}\" VerticalOptions=\"FillAndExpand\" /> <Button Clicked=\"OnRemove1\" Text=\"Remove 1\" /> <Button Clicked=\"OnRemove2\" Text=\"Remove 2\" /> </StackLayout> </ScrollView> </w:TwoButtonPage.Content> <w:TwoButtonPage.FirstButton> <MenuItem Command=\"{Binding Command1}\" Icon=\"image/tw_ic_popup_btn_check.png\" /> </w:TwoButtonPage.FirstButton> <w:TwoButtonPage.SecondButton> <MenuItem Command=\"{Binding Command2}\" Icon=\"image/tw_ic_popup_btn_delete.png\" /> </w:TwoButtonPage.SecondButton> </w:TwoButtonPage>"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.TwoButtonPageRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.TwoButtonPageRenderer.html",
    "title": "Class TwoButtonPageRenderer",
    "keywords": "Class TwoButtonPageRenderer Inheritance VisualElementRenderer < TwoButtonPage > TwoButtonPageRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class TwoButtonPageRenderer : VisualElementRenderer<TwoButtonPage> Constructors TwoButtonPageRenderer() Declaration public TwoButtonPageRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing GetNativeContentGeometry() Declaration public override Rect GetNativeContentGeometry() Returns Type Description Rect OnElementChanged(ElementChangedEventArgs<TwoButtonPage>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<TwoButtonPage> e) Parameters Type Name Description ElementChangedEventArgs < TwoButtonPage > e UpdateBackgroundColor(Boolean) Declaration protected override void UpdateBackgroundColor(bool initialize) Parameters Type Name Description System.Boolean initialize UpdateLayout() Declaration protected override void UpdateLayout()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.IndexPageRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.IndexPageRenderer.html",
    "title": "Class IndexPageRenderer",
    "keywords": "Class IndexPageRenderer Inheritance VisualElementRenderer < IndexPage > IndexPageRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class IndexPageRenderer : VisualElementRenderer<IndexPage> Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing OnElementChanged(ElementChangedEventArgs<IndexPage>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<IndexPage> e) Parameters Type Name Description ElementChangedEventArgs < IndexPage > e"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleListView.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleListView.html",
    "title": "Class CircleListView",
    "keywords": "Class CircleListView The CircleListView is a view that represents Xamarin.Forms.ListView on Circular UI. You can move the list through bezel action. Inheritance ListView CircleListView Implements IRotaryFocusable Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleListView : ListView, IRotaryFocusable Implements IRotaryFocusable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.InformationPopupImplementation.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.InformationPopupImplementation.html",
    "title": "Class InformationPopupImplementation",
    "keywords": "Class InformationPopupImplementation Inheritance System.Object InformationPopupImplementation Implements Tizen.Wearable.CircularUI.Forms.IInformationPopup IDisposable Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class InformationPopupImplementation : object, IInformationPopup, IDisposable Constructors InformationPopupImplementation() Declaration public InformationPopupImplementation() Properties BottomButton Declaration public MenuItem BottomButton { get; set; } Property Value Type Description MenuItem IsProgressRunning Declaration public bool IsProgressRunning { get; set; } Property Value Type Description System.Boolean Text Declaration public string Text { get; set; } Property Value Type Description System.String Title Declaration public string Title { get; set; } Property Value Type Description System.String Methods Dismiss() Declaration public void Dismiss() Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Finalize() Declaration protected void Finalize() Show() Declaration public void Show() Events BackButtonPressed Declaration public event EventHandler BackButtonPressed Event Type Type Description EventHandler Implements Tizen.Wearable.CircularUI.Forms.IInformationPopup IDisposable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleProgressBarSurfaceItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleProgressBarSurfaceItem.html",
    "title": "Class CircleProgressBarSurfaceItem",
    "keywords": "Class CircleProgressBarSurfaceItem The CircleProgressBarSurfaceItem displays circular progressbar at CirclePage. Inheritance Element CircleSurfaceItem CircleProgressBarSurfaceItem Implements ICircleSurfaceItem Inherited Members CircleSurfaceItem.BackgroundAngleProperty CircleSurfaceItem.BackgroundAngleOffsetProperty CircleSurfaceItem.BackgroundColorProperty CircleSurfaceItem.BackgroundLineWidthProperty CircleSurfaceItem.BackgroundRadiusProperty CircleSurfaceItem.BarAngleProperty CircleSurfaceItem.BarAngleOffsetProperty CircleSurfaceItem.BarAngleMaximumProperty CircleSurfaceItem.BarAngleMinimumProperty CircleSurfaceItem.BarColorProperty CircleSurfaceItem.BarLineWidthProperty CircleSurfaceItem.BarRadiusProperty CircleSurfaceItem.IsVisibleProperty CircleSurfaceItem.IsEnabledProperty CircleSurfaceItem.BackgroundAngle CircleSurfaceItem.BackgroundAngleOffset CircleSurfaceItem.BackgroundColor CircleSurfaceItem.BackgroundLineWidth CircleSurfaceItem.BackgroundRadius CircleSurfaceItem.BarAngle CircleSurfaceItem.BarAngleOffset CircleSurfaceItem.BarAngleMaximum CircleSurfaceItem.BarAngleMinimum CircleSurfaceItem.BarColor CircleSurfaceItem.BarLineWidth CircleSurfaceItem.BarRadius CircleSurfaceItem.IsVisible CircleSurfaceItem.IsEnabled Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleProgressBarSurfaceItem : CircleSurfaceItem, ICircleSurfaceItem Fields ValueProperty BindableProperty. Identifies the Value bindable property. Declaration public static readonly BindableProperty ValueProperty Field Value Type Description BindableProperty Properties Value Gets or sets the value of the progressbar. Declaration public double Value { get; set; } Property Value Type Description System.Double Implements ICircleSurfaceItem"
  },
  "api/Tizen.Wearable.CircularUI.Forms.InformationPopup.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.InformationPopup.html",
    "title": "Class InformationPopup",
    "keywords": "Class InformationPopup Inheritance BindableObject InformationPopup Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class InformationPopup : BindableObject Constructors InformationPopup() Declaration public InformationPopup() Fields BottomButtonProperty BindableProperty. Identifies the first button bindable property. Declaration public static readonly BindableProperty BottomButtonProperty Field Value Type Description BindableProperty IsProgressRunningProperty BindableProperty. Identifies the IsProgressRunning bindable property. Declaration public static readonly BindableProperty IsProgressRunningProperty Field Value Type Description BindableProperty TextProperty BindableProperty. Identifies the title bindable property. Declaration public static readonly BindableProperty TextProperty Field Value Type Description BindableProperty TitleProperty BindableProperty. Identifies the title bindable property. Declaration public static readonly BindableProperty TitleProperty Field Value Type Description BindableProperty Properties BottomButton Gets or sets bottom button of the Popup. You should use only one property between Icon property and Text property because two area has the same position. Declaration public MenuItem BottomButton { get; set; } Property Value Type Description MenuItem IsProgressRunning Gets or sets progress visibility of the Popup. If this value is true. Popup displays circular progress and hides Title automatically. Declaration public bool IsProgressRunning { get; set; } Property Value Type Description System.Boolean Text Gets or sets text of the Popup. Declaration public string Text { get; set; } Property Value Type Description System.String Title Gets or sets title of the Popup. Declaration public string Title { get; set; } Property Value Type Description System.String Methods Dismiss() Dismisses the InformationPopup. Declaration public void Dismiss() Show() Shows the Popup. Declaration public void Show() Events BackButtonPressed Occurs when the device's back button is pressed. Declaration public event EventHandler BackButtonPressed Event Type Type Description EventHandler"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleListView.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleListView.html",
    "title": "Class CircleListView",
    "keywords": "Class CircleListView Inheritance CircleGenList CircleListView Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleListView : CircleGenList Constructors CircleListView(EvasObject, CircleSurface) Declaration public CircleListView(EvasObject parent, CircleSurface surface) Parameters Type Name Description EvasObject parent CircleSurface surface Properties Footer Declaration public VisualElement Footer { get; set; } Property Value Type Description VisualElement Header Declaration public VisualElement Header { get; set; } Property Value Type Description VisualElement Methods AddGroup(TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void AddGroup(TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description TemplatedItemsList < ItemsView < Cell >, Cell > group AddItem(Cell, TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void AddItem(Cell cell, TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description Cell cell TemplatedItemsList < ItemsView < Cell >, Cell > group AddSource(IEnumerable) Declaration public void AddSource(IEnumerable source) Parameters Type Name Description IEnumerable source AddSource(IEnumerable, Cell) Declaration public void AddSource(IEnumerable source, Cell before) Parameters Type Name Description IEnumerable source Cell before AddSource(IEnumerable, TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void AddSource(IEnumerable source, TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description IEnumerable source TemplatedItemsList < ItemsView < Cell >, Cell > group AddSource(IEnumerable, TemplatedItemsList<ItemsView<Cell>, Cell>, Cell) Declaration public void AddSource(IEnumerable source, TemplatedItemsList<ItemsView<Cell>, Cell> group, Cell before) Parameters Type Name Description IEnumerable source TemplatedItemsList < ItemsView < Cell >, Cell > group Cell before ApplyScrollTo(Cell, Xamarin.Forms.ScrollToPosition, Boolean) Declaration public void ApplyScrollTo(Cell cell, Xamarin.Forms.ScrollToPosition position, bool animated) Parameters Type Name Description Cell cell Xamarin.Forms.ScrollToPosition position System.Boolean animated ApplySelectedItem(Cell) Declaration public void ApplySelectedItem(Cell cell) Parameters Type Name Description Cell cell Clear() Declaration public void Clear() InsertGroup(TemplatedItemsList<ItemsView<Cell>, Cell>, Cell) Declaration public void InsertGroup(TemplatedItemsList<ItemsView<Cell>, Cell> group, Cell before) Parameters Type Name Description TemplatedItemsList < ItemsView < Cell >, Cell > group Cell before InsertItem(Cell, Cell, TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void InsertItem(Cell cell, Cell before, TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description Cell cell Cell before TemplatedItemsList < ItemsView < Cell >, Cell > group OnRealized() Declaration protected override void OnRealized() Remove(Cell) Declaration public void Remove(Cell cell) Parameters Type Name Description Cell cell Remove(TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void Remove(TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description TemplatedItemsList < ItemsView < Cell >, Cell > group RemoveSource(IEnumerable) Declaration public void RemoveSource(IEnumerable source) Parameters Type Name Description IEnumerable source ResetGroup(TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void ResetGroup(TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description TemplatedItemsList < ItemsView < Cell >, Cell > group"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleSurfaceNotFoundException.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleSurfaceNotFoundException.html",
    "title": "Class CircleSurfaceNotFoundException",
    "keywords": "Class CircleSurfaceNotFoundException Inheritance Exception CircleSurfaceNotFoundException Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleSurfaceNotFoundException : Exception Constructors CircleSurfaceNotFoundException() Declaration public CircleSurfaceNotFoundException() CircleSurfaceNotFoundException(SerializationInfo, StreamingContext) Declaration protected CircleSurfaceNotFoundException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context CircleSurfaceNotFoundException(String) Declaration public CircleSurfaceNotFoundException(string message) Parameters Type Name Description System.String message CircleSurfaceNotFoundException(String, Exception) Declaration public CircleSurfaceNotFoundException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "guide/Radio.html": {
    "href": "guide/Radio.html",
    "title": "Radio",
    "keywords": "Radio Radio displays one or more options. You can select only one of the options having same GroupName property. Radio can select only one item among items having same GroupName property. Create Radio The GroupName property specifies mutually exclusive Radio controls. If you select one Radio control of radio control group, other items are not selected. IsSelected property sets default selected value of Radio control. Selected event occurs when the Radio selection is changed. Value property sets any value of Radio control. Value property is useful to distinguish which item is selected if all Radio control has the same Selected event handler. The following code explains the process of creating Radio . For more information, see Radio API reference . The code example of this guide uses TCRadioStackLayout code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCRadioStackLayout.xaml.cs XAML file <w:CirclePage.Content> <w:CircleScrollView x:Name=\"myscroller\" Orientation=\"Vertical\"> <StackLayout Padding=\"50,50\" Orientation=\"Vertical\"> <Label x:Name=\"label1\" FontSize=\"Medium\" HorizontalOptions=\"CenterAndExpand\" Text=\"{Binding RadioLabel1, StringFormat='SoundMode:{0}'}\"/> <StackLayout Orientation=\"Horizontal\"> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"{Binding Sound.Text}\" VerticalOptions=\"Center\" /> <w:Radio GroupName=\"{Binding Sound.GroupName}\" HorizontalOptions=\"End\" IsSelected=\"{Binding Sound.IsSelected, Mode=TwoWay}\" Selected=\"OnSelected\" Value=\"{Binding Sound.Value}\" /> </StackLayout> <StackLayout Orientation=\"Horizontal\"> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"{Binding Vibrate.Text}\" VerticalOptions=\"Center\" /> <w:Radio GroupName=\"{Binding Vibrate.GroupName}\" HorizontalOptions=\"End\" IsSelected=\"{Binding Vibrate.IsSelected, Mode=TwoWay}\" Selected=\"OnSelected\" Value=\"{Binding Vibrate.Value}\" /> </StackLayout> <StackLayout Orientation=\"Horizontal\"> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"{Binding Mute.Text}\" VerticalOptions=\"Center\" /> <w:Radio GroupName=\"{Binding Mute.GroupName}\" HorizontalOptions=\"End\" IsSelected=\"{Binding Mute.IsSelected, Mode=TwoWay}\" Selected=\"OnSelected\" Value=\"{Binding Mute.Value}\" /> </StackLayout> </StackLayout> </StackLayout> </w:CircleScrollView> </w:CirclePage.Content> C# file public void OnSelected(object sender, SelectedEventArgs args) { Radio radio = sender as Radio; if (radio != null) { Console.WriteLine($\"<<OnSelected>> Radio Value:{radio.Value}, GroupName:{radio.GroupName}, IsSelected:{radio.IsSelected}\"); } } Add Radio in ListViewItem If you want to use Radio control on ListView, you can add Radio control in ViewCell for customizing item. When you use Radio on ListView, you must set HasUnevenRows property True . If you don't set this property, Unwanted item's radio can be selected when you scroll up the ListView Since Xamarin.Forms reuse ListView Item rendering The code example of this guide uses TCRadioListView code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCRadioListView.xaml.cs XAML file <w:CirclePage.BindingContext> <local:TCRadioViewModel /> </w:CirclePage.BindingContext> <w:CirclePage.Content> <w:CircleListView x:Name=\"mylist\" HasUnevenRows=\"True\" ItemsSource=\"{Binding SampleData}\"> <w:CircleListView.ItemTemplate> <DataTemplate> <ViewCell> <StackLayout HeightRequest=\"120\" Orientation=\"Horizontal\"> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"{Binding Text}\" VerticalOptions=\"Center\" /> <w:Radio GroupName=\"{Binding GroupName}\" HorizontalOptions=\"End\" IsSelected=\"{Binding IsSelected, Mode=TwoWay}\" Selected=\"OnSelected\" VerticalOptions=\"Center\" Value=\"{Binding Value}\" /> </StackLayout> </ViewCell> </DataTemplate> </w:CircleListView.ItemTemplate>"
  },
  "guide/CircleSurfaceEffectBehavior.html": {
    "href": "guide/CircleSurfaceEffectBehavior.html",
    "title": "CircleSurfaceEffectBehavior",
    "keywords": "CircleSurfaceEffectBehavior The CircleSurfaceEffectBehavior is a Behavior , which allows you to attach the CircleSurface to the Xamarin.Forms.Page . CircleSurface is a Tizen specific component that manages circle objects . Following are the two ways to add circle control such as CircleListView , CircleDateTimeSelector , CircleScrollView and CircleStepper at Page in Tizen Xamarin Forms application: Inserting these controls to CirclePage . Adding CircleSurfaceEffectBehavior in Page that includes circle control. Add CircleSurfaceEffectBehavior in Page Add the CircleSurfaceEffectBehavior in the <Page.Behaviors> and set RotaryFocusObject property to Attached Page with circle control name. The RotaryFocusObject sets the currently focused control that is handled by rotating and display the focused control's circle object. For more information, see the following links: CircleSurfaceEffectBehavior API reference Xamarin.Forms.Page guide Xamarin.Forms.Behaviors Guide Consuming a Xamarin.Forms Behavior The code example of this guide uses TCListAppender code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCListAppender.xaml XAML file <w:TwoButtonPage xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" x:Class=\"WearableUIGallery.TC.TCListAppender\" w:CircleSurfaceEffectBehavior.RotaryFocusObject=\"{x:Reference mylist}\"> <w:TwoButtonPage.Behaviors> <w:CircleSurfaceEffectBehavior/> </w:TwoButtonPage.Behaviors> <w:TwoButtonPage.Content> <w:CircleListView x:Name=\"mylist\" HorizontalOptions=\"FillAndExpand\" VerticalOptions=\"FillAndExpand\"> <w:CircleListView.Header> <x:String>Head</x:String> </w:CircleListView.Header> <w:CircleListView.HeaderTemplate> <DataTemplate> <Label FontAttributes=\"Bold\" FontSize=\"Large\" HorizontalTextAlignment=\"Center\" Text=\"{Binding .}\" TextColor=\"Red\" /> </DataTemplate> </w:CircleListView.HeaderTemplate> </w:CircleListView> </w:TwoButtonPage.Content> <w:TwoButtonPage.FirstButton> <MenuItem Clicked=\"DoAdd\" Icon=\"image/tw_ic_popup_btn_check.png\" /> </w:TwoButtonPage.FirstButton> <w:TwoButtonPage.SecondButton> <MenuItem Clicked=\"DoDel\" Icon=\"image/tw_ic_popup_btn_delete.png\" /> </w:TwoButtonPage.SecondButton> </w:TwoButtonPage>"
  },
  "guide/CircleScrollView.html": {
    "href": "guide/CircleScrollView.html",
    "title": "CircleScrollView",
    "keywords": "CircleScrollView CircleScrollView is to ensure that larger views display well on smaller wearable devices. It is an extension of Xamarin.Forms.ScrollView . Similar to Xamarin.Forms.ScrollView , but the Scroller is rendered to CircleSurface . Scrolling is possible with Bezel interaction . To receive Rotary event , it must be registered as RotaryFocusObject , property of CirclePage . Horizontal Vertical WARNING: CircleListView , CircleDateTimeSelector , CircleScrollView , CircleStepper must be confined in the CirclePage container or Page with CircleSurfaceEffectBehavior . If you add these controls in any other way, it may cause an exception or cannot display the controls. Add CircleScrollView in CirclePage You can set CircleScrollView in CirclePage.Content . For more information about how to add a CirclePage , see CirclePage guide . The following XAML code shows CirclePage with CircleScrollView . RotaryFocusObject property sets the currently focused control that is handled by rotating and displays the circle object of focused control. If the value is not set properly, the control does not receive the Rotary Event . The direction of the scroller depends on the setting of the Orientation value. In the following example, the Orientation of the CircleScrollView is set to Horizontal and is placed in the StackLayout to contain many images: For more information, see the following links: CircleScrollView API reference Xamarin.Forms.ScrollView API reference Xamarin.Forms.ScrollView Guide The code example of this guide uses HorizontalScroller.xaml code of XUIComponent. The code is available in sample\\XUIComponents\\UIComponents\\UIComponents\\Samples\\CircleScroller/HorizontalScroller.xaml The following code shows CirclePage with CircleScrollView: XAML file <w:CirclePage x:Class=\"UIComponents.Samples.CircleScroller.HorizontalScroller\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:UIComponents.Samples.CircleScroller\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" RotaryFocusObject=\"{x:Reference myscroller}\"> <w:CirclePage.Content> <w:CircleScrollView x:Name=\"myscroller\" Orientation=\"Horizontal\"> <StackLayout HorizontalOptions=\"FillAndExpand\" Orientation=\"Horizontal\" VerticalOptions=\"FillAndExpand\"> <Image Source=\"tw_btn_delete_holo_dark.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_ringtone_mute.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_ic_popup_btn_check.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_alert.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_bell.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_ringtone_sound.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_btn_delete_holo_dark.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_ringtone_mute.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_ic_popup_btn_check.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_alert.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_bell.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_ringtone_sound.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_btn_delete_holo_dark.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_ringtone_mute.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_ic_popup_btn_check.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_alert.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_bell.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_ringtone_sound.png\" VerticalOptions=\"CenterAndExpand\" /> </StackLayout> </w:CircleScrollView> </w:CirclePage.Content> </w:CirclePage>"
  },
  "guide/CircleStackLayout.html": {
    "href": "guide/CircleStackLayout.html",
    "title": "CircleStackLayout",
    "keywords": "CircleStackLayout CircleStackLayout organizes views in a one-dimensional line (\"stack\"), either horizontally or vertically. CircleStackLayout is similar to Xamarin.Forms.StackLayout , but it arranges internal components in a form that fits the circular screen. Rectangular components are placed in close proximity to the circle. Margin is calculated after placement. If Orientation is not set, Vertical is used. The larger the Spacing value, the greater the distance between the components placed. At the right end of the following figure, the Spacing value is 50: Horizontal Vertical Spacing Add CircleStackLayout in ContentPage You can set CircleStackLayout in ContentPage . In the following example, there is a large number of BoxView . Therefore, the entire content is larger than the screen size and uses CircleStackLayout in ScrollView . For more information, see the following links: CircleStackLayout API reference Xamarin.Forms.StackLayout API reference Xamarin.Forms.StackLayout Guide The code example of this guide uses TCCircleStackLayout.xaml code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCCircleStackLayout.xaml XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:IndexPage x:Class=\"WearableUIGallery.TC.TCCircleStackLayout\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> ... <ContentPage> <ScrollView> <w:CircleStackLayout> <BoxView BackgroundColor=\"Red\" /> <BoxView BackgroundColor=\"Orange\" /> <BoxView BackgroundColor=\"Yellow\" /> <BoxView BackgroundColor=\"Green\" /> <BoxView BackgroundColor=\"Blue\" /> <BoxView BackgroundColor=\"Navy\" /> <BoxView BackgroundColor=\"Purple\" /> <BoxView BackgroundColor=\"Red\" /> <BoxView BackgroundColor=\"Orange\" /> <BoxView BackgroundColor=\"Yellow\" /> <BoxView BackgroundColor=\"Green\" /> <BoxView BackgroundColor=\"Blue\" /> <BoxView BackgroundColor=\"Navy\" /> <BoxView BackgroundColor=\"Purple\" /> </w:CircleStackLayout> </ScrollView> </ContentPage> ... </w:IndexPage>"
  },
  "guide/Toast.html": {
    "href": "guide/Toast.html",
    "title": "Toast",
    "keywords": "Toast Toast provides simple information. Toast automatically disappears after timeout (in seconds). Tizen Wearable Toast fills the entire screen with display message and image. Single text Icon and text Create Toast Toast is a static method. Therefore, you do not need any container or parent control for using this control. Toast provides two methods, Toast.DisplayText() displays simple text message and Toast.DisplayIconText() displays simple icon and simple text message. The first parameter of Toast.DisplayText() method is message text. The second parameter is timeout duration (milliseconds). The second parameter is optional. If you do not set this value, the default value is set to 3000 milliseconds (three seconds). The first parameter of Toast.DisplayIconText() method is message text. The second parameter is icon file path. You can set file path with new FileImageSource . The third parameter is timeout duration, which is optional. For more information, see Toast API reference . C# file Toast.DisplayText(\"Toast popup\", 3000); Toast.DisplayIconText(\"Toast popup2\", new FileImageSource { File = \"image/tw_ic_popup_btn_check.png\" }, 2000);"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Tizen Wearable CircularUI",
    "keywords": "Tizen Wearable CircularUI This document is the API Specification for the Tizen Wearable CircularUI. Namespace Description Tizen.Wearable.CircularUI.Forms Provide the classes for the Circular screen with Tizen wearable devices. Tizen.Wearable.CircularUI.Forms.Renderer Contains the renderer classes on tizen platform for Tizen.Wearable.CircularUI.Forms. Tizen.Wearable.CircularUI.Forms.Renderer.Watchface Provide the classes for creating the Watchface on Tizen wearable devices."
  },
  "guide/TwoButtonPopup.html": {
    "href": "guide/TwoButtonPopup.html",
    "title": "TwoButtonPopup",
    "keywords": "TwoButtonPopup The TwoButtonPopup represents The Tizen Wearable EFL two button popup style. The TwoButtonPopup is used to select one of the two options such as cancel or done, and share or delete. Since TwoButtonPopup does not adhere as a control, this popup cannot be set in the XAML file. Create TwoButtonPopup The TwoButtonPopup.Title property sets the title of the popup. You can set the Content property with layouts such as StackLayout or ScrollView . The TwoButtonPopup.FirstButton property sets the left side button. The TwoButtonPopup.SecondButton property sets the right side button. You can set FirstButton and SecondButton using the MenuItem . You must add code at Command or Clicked event handler for controlling MenuItem clicked. For more information, see TwoButtonPopup API reference . The code example of this guide uses TCTwoButtonPopup code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCTwoButtonPopup.xaml.cs C# file var leftButton = new MenuItem() { Icon = new FileImageSource { File = \"image/b_option_list_icon_share.png\", }, Command = new Command(() => { /* must insert code when user press left button */ }) }; ... _popUp1 = new TwoButtonPopup(); _popUp1.FirstButton = leftButton; _popUp1.SecondButton = rightButton; _popUp1.Title = \"Popup title\"; _popUp1.Content = new StackLayout() { HorizontalOptions = LayoutOptions.FillAndExpand, Children = { new Label { Text = \"Will be saved, and sound, only on the Gear.\", }, new StackLayout { Orientation = StackOrientation.Horizontal, Padding = new Thickness(0, 30, 0, 30), Children = { checkbox, new Label { Text = \"Do not repeat\", } } } } }; } How to Set Long Text in TwoButtonPopup The TwoButtonPopup has Text property. This property is useful to set long text. If a long text is set using the Text property, you do not need to add StackLayout , ScrollView , Label to display long text. The area of the Text property overlaps the area of the Content property. Therefore, do not use two properties at the same time. C# file _popUp2 = new TwoButtonPopup(); _popUp2.FirstButton = leftButton2; _popUp2.SecondButton = rightButton2; _popUp2.Title = \"Popup title\"; _popUp2.Text = @\"This is scrollable popup text. This part is made by adding long text in popup. Popup internally added scroller to this layout when size of text is greater than total popup height. This has two button in action area and title text in title area\";"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.TizenCircleSurfaceEffect.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.TizenCircleSurfaceEffect.html",
    "title": "Class TizenCircleSurfaceEffect",
    "keywords": "Class TizenCircleSurfaceEffect Inheritance PlatformEffect TizenCircleSurfaceEffect Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class TizenCircleSurfaceEffect : PlatformEffect Methods OnAttached() Declaration protected override void OnAttached() OnDetached() Declaration protected override void OnDetached()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleDateTimeSelectorRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleDateTimeSelectorRenderer.html",
    "title": "Class CircleDateTimeSelectorRenderer",
    "keywords": "Class CircleDateTimeSelectorRenderer Inheritance ViewRenderer < CircleDateTimeSelector , ElmSharp.Wearable.CircleDateTimeSelector > CircleDateTimeSelectorRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleDateTimeSelectorRenderer : ViewRenderer<CircleDateTimeSelector, ElmSharp.Wearable.CircleDateTimeSelector> Constructors CircleDateTimeSelectorRenderer() Declaration public CircleDateTimeSelectorRenderer() Methods Measure(Int32, Int32) Declaration protected override ElmSharp.Size Measure(int availableWidth, int availableHeight) Parameters Type Name Description System.Int32 availableWidth System.Int32 availableHeight Returns Type Description ElmSharp.Size MinimumSize() Declaration protected override Xamarin.Forms.Size MinimumSize() Returns Type Description Xamarin.Forms.Size OnElementChanged(ElementChangedEventArgs<CircleDateTimeSelector>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<CircleDateTimeSelector> e) Parameters Type Name Description ElementChangedEventArgs < CircleDateTimeSelector > e"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.Watchface.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.Watchface.html",
    "title": "Namespace Tizen.Wearable.CircularUI.Forms.Renderer.Watchface",
    "keywords": "Namespace Tizen.Wearable.CircularUI.Forms.Renderer.Watchface Classes FormsWatchface"
  },
  "api/Tizen.Wearable.CircularUI.Forms.SelectedEventArgs.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.SelectedEventArgs.html",
    "title": "Class SelectedEventArgs",
    "keywords": "Class SelectedEventArgs Event arguments for events of RadioButton. Inheritance EventArgs SelectedEventArgs Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class SelectedEventArgs : EventArgs Constructors SelectedEventArgs(Boolean) Creates a new SelectedEventArgs object that represents a change from RadioButton. Declaration public SelectedEventArgs(bool value) Parameters Type Name Description System.Boolean value The boolean value that checks whether the RadioButton is selected. Properties Value Gets the value object for the SelectedEventArgs object. Declaration public bool Value { get; } Property Value Type Description System.Boolean"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.TizenConfirmPopupEffect.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.TizenConfirmPopupEffect.html",
    "title": "Class TizenConfirmPopupEffect",
    "keywords": "Class TizenConfirmPopupEffect Inheritance PlatformEffect TizenConfirmPopupEffect Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class TizenConfirmPopupEffect : PlatformEffect Methods OnAttached() Declaration protected override void OnAttached() OnDetached() Declaration protected override void OnDetached()"
  },
  "guide/CircleDateTimeSelector.html": {
    "href": "guide/CircleDateTimeSelector.html",
    "title": "CircleDateTimeSelector",
    "keywords": "CircleDateTimeSelector CircleDateTimeSelector is a view for Date Picker and Time Picker. You can rotate the bezel to explore the screen using the Bezel interaction . The view of this selector covers the entire screen. To receive Rotary event , it must be registered as RotaryFocusObject , property of CirclePage . The Date display screen is a touch screen. You can set the value of the year: month: day by touch and by rotating the bezel. The Time display screen is also a touch screen. You can set the value of the hour: minute: AM / PM by touch and by rotating the bezel. Date Time WARNING: CircleListView , CircleDateTimeSelector , CircleScrollView , CircleStepper must be confined in the CirclePage container or Page with CircleSurfaceEffectBehavior . If you add these controls in any other way, it may cause an exception or cannot display the controls. Add CircleDateTimeSelector in CirclePage You can set CircleDateTimeSelector in the CirclePage.Content . For more information on how to add a CirclePage , see CirclePage guide . RotaryFocusObject property sets the currently focused control using the rotating interaction, and displays the focused control's circle object. If the value is not set properly, the control will not receive the Rotary Event . CircleDateTimeSelector has the following properties: ValueType : The value of time is changed in Time, and the value of date is changed in Date. DateTime : Sets or gets date/time. MaximumDate : Sets or gets maximum date. MimimumDate : Sets or gets minimum date. The following example explains how to set a timepicker. Assign ValueType value for \"Time\" and set the current time to the DateTime property. When the code is executed, the current time will be displayed on the screen. Since the focussed area on the screen shows the hour item, the hour item is changed when the bezel is turned. To change the minutes, touch the minute item and turn the bezel. For more information, see CircleDateTimeSelector API reference . The code example of this guide uses CircleDateTime code of XUIComponent. The code is available in sample\\XUIComponents\\UIComponents\\UIComponents\\Samples\\CircleDateTime/DateTimeViewModel.cs and CircleTime.xaml The following code shows CirclePage with CircleDateTimeSelector: C# file public class DateTimeViewModel : INotifyPropertyChanged { static DateTime _dateTime = DateTime.Now; public DateTime Datetime { get => _dateTime; set { //Console.WriteLine($\"Set Datetime value : {value.ToString()}\"); if (_dateTime == value) return; _dateTime = value; OnPropertyChanged(); } } XAML file <w:CirclePage x:Class=\"UIComponents.Samples.CircleDateTime.CircleTime\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:UIComponents.Samples.CircleDateTime\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" RotaryFocusObject=\"{x:Reference timeSelector}\"> <w:CirclePage.BindingContext> <local:DateTimeViewModel /> </w:CirclePage.BindingContext> <w:CirclePage.Content> <StackLayout BackgroundColor=\"Black\" HorizontalOptions=\"FillAndExpand\" Orientation=\"Vertical\" VerticalOptions=\"FillAndExpand\"> <w:CircleDateTimeSelector x:Name=\"timeSelector\" DateTime=\"{Binding Datetime, Mode=TwoWay}\" MaximumDate=\"1/1/2022\" MinimumDate=\"1/12/2010\" ValueType=\"Time\" /> </StackLayout> </w:CirclePage.Content> <w:CirclePage.ActionButton> <w:ActionButtonItem Command=\"{Binding ButtonPressedExit}\" Text=\"OK\" /> </w:CirclePage.ActionButton> </w:CirclePage>"
  },
  "guide/Overview.html": {
    "href": "guide/Overview.html",
    "title": "Developer Guides",
    "keywords": "Developer Guides Welcome to the Tizen Circular UI guides."
  },
  "guide/CircleStepper.html": {
    "href": "guide/CircleStepper.html",
    "title": "CircleStepper",
    "keywords": "CircleStepper CircleStepper allows you to select a value from a range of incremental values specified with Minimum , Maximum , and Increment properties. It is an extension of Xamarin.Forms.Stepper . MarkerColor, MarkerLineWidth, and LabelFormat have been added to the Xamarin.Forms.Stepper . You can modify the value with Bezel interaction . To receive Rotary event , it must be registered as RotaryFocusObject , property of CirclePage . WARNING: CircleListView , CircleDateTimeSelector , CircleScrollView , CircleStepper must be confined in the CirclePage container or Page with CircleSurfaceEffectBehavior . If you add these controls in any other way, it may cause an exception or cannot display the controls. Add CircleStepper in CirclePage You can set the CircleStepper in the CirclePage.Content . For more information on how to add CirclePage , see CirclePage guide . RotaryFocusObject property sets the currently focused control that is handled by rotating and displaying the focused control's circle object. If this value properly is not set, then control can not receive Rotary Event . CircleStepper has the following properties: LabelFormat: This property gets or sets the format in which the value is shown. MarkerColor: This property changes the color of the marker to the value selected. MarkerLineWidth: This property gets and sets the length of the marker. This example consists of StackLayout with a CircleStepper and two Labels in the CirclePage . Since 9 is set to Minimum and LabelFormat is set to \"% 1.1f\", \"9.0\" appears on the screen. Since the Increment is 7.5, it increases by 7.5 when you turn the bezel and increase the Value . The Maximum defined value is 99, hence the marker does not exceed this value. Since the MarkerColor is set to \"Coral\", it will be displayed as the corresponding color. For more information, see the following links: CircleStepper API reference Xamarin.Forms.Stepper API reference Xamarin.Forms.Stepper Guide The code example of this guide uses XUIComponent's SpinnerDefault of CircleSpinner code. The code is available in sample\\XUIComponents\\UIComponents\\UIComponents\\Samples\\CircleSpinner\\SpinnerViewModel.cs and SpinnerDefault.xaml The following code shows CirclePage with CircleStepper: C# file public class SpinnerViewModel : INotifyPropertyChanged { double _value= 9.0; ... public double Value { get => _value; set { if (_value == value) return; _value = value; OnPropertyChanged(); } } XAML file <w:CirclePage x:Class=\"UIComponents.Samples.CircleSpinner.SpinnerDefault\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:UIComponents.Samples.CircleSpinner\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" RotaryFocusObject=\"{x:Reference stepper}\"> <w:CirclePage.BindingContext> <local:SpinnerViewModel /> </w:CirclePage.BindingContext> <w:CirclePage.Content> <StackLayout Padding=\"0,50,0,0\" Orientation=\"Vertical\"> <Label FontAttributes=\"Bold\" FontSize=\"11\" HorizontalTextAlignment=\"Center\" Text=\"Title\" TextColor=\"#0FB4EF\" /> <Label FontSize=\"8\" HorizontalTextAlignment=\"Center\" Text=\"unit\" TextColor=\"White\" /> <w:CircleStepper x:Name=\"stepper\" HorizontalOptions=\"CenterAndExpand\" Increment=\"7.5\" LabelFormat=\"%1.1f\" MarkerColor=\"Coral\" Maximum=\"99.0\" Minimum=\"9.0\" Value=\"{Binding Value}\" /> </StackLayout> </w:CirclePage.Content> <w:CirclePage.ActionButton> <w:ActionButtonItem Command=\"{Binding ButtonPressedExit}\" Text=\"SET\" /> </w:CirclePage.ActionButton> </w:CirclePage>"
  },
  "guide/InformationPopup.html": {
    "href": "guide/InformationPopup.html",
    "title": "InformationPopup",
    "keywords": "InformationPopup InformationPopup can represent three types of Tizen Wearable EFL popup style shown in the following figures. This popup is used to display any information or warning. Since InformationPopup does not adhere as a control, this popup cannot be set in the XAML file. Single text Bottom button Progress Create single text InformationPopup Single text InformationPopup is used for displaying text. It is similar to the Toast popup, but this popup does not disappear automatically. Text property can be set with text. When you press the back button of the device, BackButtonPressed event occurs. To dismiss the popup that occurs during this event, add Dismiss() in the BackButtonPressed event handle code. For more information, see InformationPopup API reference . The code example of this guide uses TCInformationPopup code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCInformationPopup.xaml.cs C# file _textPopUp = new InformationPopup(); _textPopUp.Text = \"This is text popup test\"; _textPopUp.BackButtonPressed += (s, e) => { _textPopUp.Dismiss(); label1.Text = \"text popup is dismissed\"; }; Create bottom button InformationPopup You can set BottomButton property with MenuItem . The bottom button is used for confirmation dialog purpose, that asks user to approve requested operation. InformationPopup has Title property for displaying title. When you click the bottom button, BottomButton.Clicked event occurs. C# file var bottomButton = new MenuItem() { Text = \"OK\", Command = new Command(() => { /* must insert code when user press left button */ }) }; _textButtonPopUp = new InformationPopup(); _textButtonPopUp.Title = \"Popup title\"; _textButtonPopUp.Text = \"This is text and button popup test\"; _textButtonPopUp.BottomButton = bottomButton; _textButtonPopUp.BottomButton.Clicked += (s, e) => { _textButtonPopUp.Dismiss(); label1.Text = \"text&button is dismissed\"; }; Create progress InformationPopup InformationPopup has IsProgressRunning property. If this property sets true , small circle progress bar is displayed in the center of the screen. C# file _progressPopUp = new InformationPopup(); _progressPopUp.Title = \"Popup title\"; _progressPopUp.Text = \"This is progress test\"; _progressPopUp.IsProgressRunning = true;"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Check.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Check.html",
    "title": "Class Check",
    "keywords": "Class Check The check widget allows for toggling a value between true and false. The check is extension of Xamarin.Forms.Switch. Inheritance Switch Check Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class Check : Switch Examples var check = new Check { HorizontalOptions = LayoutOptions.Center, VerticalOptions = LayoutOptions.Center, DisplayStyle = \"Onoff\" } Fields DisplayStyleProperty BindableProperty. Identifies the DisplayStyle bindable property. Declaration public static readonly BindableProperty DisplayStyleProperty Field Value Type Description BindableProperty Properties DisplayStyle Gets or sets display style of Check. Declaration public CheckDisplayStyle DisplayStyle { get; set; } Property Value Type Description CheckDisplayStyle"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.TwoButtonPageWidget.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.TwoButtonPageWidget.html",
    "title": "Class TwoButtonPageWidget",
    "keywords": "Class TwoButtonPageWidget Inheritance Background TwoButtonPageWidget Implements IContainable < EvasObject > Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class TwoButtonPageWidget : Background, IContainable<EvasObject> Constructors TwoButtonPageWidget(EvasObject) Declaration public TwoButtonPageWidget(EvasObject parent) Parameters Type Name Description EvasObject parent Properties Canvas Declaration public Canvas Canvas { get; } Property Value Type Description Canvas Children Declaration public IList<EvasObject> Children { get; } Property Value Type Description IList < EvasObject > Overlap Declaration public bool Overlap { get; set; } Property Value Type Description System.Boolean Methods HideButton1() Declaration public void HideButton1() HideButton2() Declaration public void HideButton2() OnUnrealize() Declaration protected override void OnUnrealize() ShowButton1(String, String, Action) Declaration public void ShowButton1(string text, string image = null, Action action = null) Parameters Type Name Description System.String text System.String image Action action ShowButton2(String, String, Action) Declaration public void ShowButton2(string text, string image = null, Action action = null) Parameters Type Name Description System.String text System.String image Action action Events LayoutUpdated Declaration public event EventHandler<LayoutEventArgs> LayoutUpdated Event Type Type Description EventHandler < LayoutEventArgs > Implements IContainable<>"
  },
  "api/Tizen.Wearable.CircularUI.Forms.IRotaryFocusable.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.IRotaryFocusable.html",
    "title": "Interface IRotaryFocusable",
    "keywords": "Interface IRotaryFocusable The IRotaryFocusable is an interface to take a Rotary Event Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public interface IRotaryFocusable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleStepperRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleStepperRenderer.html",
    "title": "Class CircleStepperRenderer",
    "keywords": "Class CircleStepperRenderer Inheritance ViewRenderer < CircleStepper , ElmSharp.Wearable.CircleSpinner > CircleStepperRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleStepperRenderer : ViewRenderer<CircleStepper, ElmSharp.Wearable.CircleSpinner> Constructors CircleStepperRenderer() Declaration public CircleStepperRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Measure(Int32, Int32) Declaration protected override ElmSharp.Size Measure(int availableWidth, int availableHeight) Parameters Type Name Description System.Int32 availableWidth System.Int32 availableHeight Returns Type Description ElmSharp.Size MinimumSize() Declaration protected override Size MinimumSize() Returns Type Description Size OnElementChanged(ElementChangedEventArgs<CircleStepper>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<CircleStepper> e) Parameters Type Name Description ElementChangedEventArgs < CircleStepper > e"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleScrollView.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleScrollView.html",
    "title": "Class CircleScrollView",
    "keywords": "Class CircleScrollView The CircleScrollView has circular scroll bar. it can be scrolled by bezel action. The CircleScrollView is extension of Xamarin.Forms.ScrollView. Inheritance ScrollView CircleScrollView Implements IRotaryFocusable Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleScrollView : ScrollView, IRotaryFocusable Implements IRotaryFocusable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.html",
    "title": "Namespace Tizen.Wearable.CircularUI.Forms",
    "keywords": "Namespace Tizen.Wearable.CircularUI.Forms Classes ActionButtonItem The ActionButtonItem is a class that presents a menu item and associates it with a command Check The check widget allows for toggling a value between true and false. The check is extension of Xamarin.Forms.Switch. CircleDateTimeSelector The CircleDateTimeSelector is a view that can change the value by bezel action by touching each item of \"Year: Month: Day\" and \"Hour: Minute: AM / PM\" CircleListView The CircleListView is a view that represents Xamarin.Forms.ListView on Circular UI. You can move the list through bezel action. CirclePage The CirclePage is a ContentPage, which allows you to insert views that require CircleSurface, and you can show ToolbarItems with MoreOption. It has an ActionButton, and can use the MenuItem type as text, icon, command, and so on. CirclePageNotFoundException The CirclePageNotFoundException is an Exception class that occurs when a CircleSurface has no child. CircleProgressBarSurfaceItem The CircleProgressBarSurfaceItem displays circular progressbar at CirclePage. CircleScrollView The CircleScrollView has circular scroll bar. it can be scrolled by bezel action. The CircleScrollView is extension of Xamarin.Forms.ScrollView. CircleSliderSurfaceItem The CircleSliderSurfaceItem displays circular slider at CirclePage. CircleStackLayout CircleStepper The CircleStepper is a class that extends Xamarin.Forms.Stepper for Circular UI. CircleSurfaceEffectBehavior The CircleSurfaceEffectBehavior is a behavior which allows you to add views that require CircleSurface. CircleSurfaceItem The CircleSurfaceItem is a class that controls the items represented in the CircleSurface. CircleToolbarItem The CircleToolbarItem is a class that extends Xamarin.Forms.ToolbarItem for Circular UI. ContextPopupEffectBehavior The ContextPopupEffectBehavior is a behavior which allows you to add a context popup. IndexPage The IndexPage is extension of Xamarin.Forms.MultiPage. When Page is added/removed at Multipage. circular index is added/removed automatically at the top of window. InformationPopup PopupEntry The PopupEntry is a class that extends Xamarin.Forms.Entry. It makes a new layer when editing text on the entry. Radio The Radio is a widget that allows one or more options to be displayed and have the user choose only one of them. RotaryEventArgs Event arguments for RotaryEvent. SelectedEventArgs Event arguments for events of RadioButton. Toast The Toast class provides properties that show simple types of messages TwoButtonPage The TwoButtonPage is a page that has a rectangular area inside the circle as contents area. It also has two buttons and a Title area. TwoButtonPopup The TwoButtonPopup describe pop-up which has circular two button, title, text, and content area. Interfaces ICircleSurfaceItem The ICircleSurfaceItem is an interface that controls the items represented in the CircleSurface. IRotaryEventReceiver The IRotaryEventReceiver is a receiver interface to take Rotary Events IRotaryFocusable The IRotaryFocusable is an interface to take a Rotary Event Enums CheckDisplayStyle Enumeration for the style of the Check. DateTimeType Enumeration for style type of CircleDateTimeSelector PositionOption Enumeration for position type of popup Delegates RotaryEventHandler Delegate for a triggering rotary event"
  },
  "api/Tizen.Wearable.CircularUI.Forms.PopupEntry.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.PopupEntry.html",
    "title": "Class PopupEntry",
    "keywords": "Class PopupEntry The PopupEntry is a class that extends Xamarin.Forms.Entry. It makes a new layer when editing text on the entry. Inheritance Entry PopupEntry Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class PopupEntry : Entry Constructors PopupEntry() Declaration public PopupEntry()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleSurfaceItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleSurfaceItem.html",
    "title": "Class CircleSurfaceItem",
    "keywords": "Class CircleSurfaceItem The CircleSurfaceItem is a class that controls the items represented in the CircleSurface. Inheritance Element CircleSurfaceItem CircleProgressBarSurfaceItem CircleSliderSurfaceItem Implements ICircleSurfaceItem Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleSurfaceItem : Element, ICircleSurfaceItem Fields BackgroundAngleOffsetProperty BindableProperty. Identifies the BackgroundAngleOffset bindable property. Declaration public static readonly BindableProperty BackgroundAngleOffsetProperty Field Value Type Description BindableProperty BackgroundAngleProperty BindableProperty. Identifies the BackgroundAngle bindable property. Declaration public static readonly BindableProperty BackgroundAngleProperty Field Value Type Description BindableProperty BackgroundColorProperty BindableProperty. Identifies the BackgroundColor bindable property. Declaration public static readonly BindableProperty BackgroundColorProperty Field Value Type Description BindableProperty BackgroundLineWidthProperty BindableProperty. Identifies the BackgroundLineWidth bindable property. Declaration public static readonly BindableProperty BackgroundLineWidthProperty Field Value Type Description BindableProperty BackgroundRadiusProperty BindableProperty. Identifies the BackgroundRadius bindable property. Declaration public static readonly BindableProperty BackgroundRadiusProperty Field Value Type Description BindableProperty BarAngleMaximumProperty BindableProperty. Identifies the BarAngleMaximum bindable property. Declaration public static readonly BindableProperty BarAngleMaximumProperty Field Value Type Description BindableProperty BarAngleMinimumProperty BindableProperty. Identifies the BarAngleMinimum bindable property. Declaration public static readonly BindableProperty BarAngleMinimumProperty Field Value Type Description BindableProperty BarAngleOffsetProperty BindableProperty. Identifies the BarAngleOffset bindable property. Declaration public static readonly BindableProperty BarAngleOffsetProperty Field Value Type Description BindableProperty BarAngleProperty BindableProperty. Identifies the BarAngle bindable property. Declaration public static readonly BindableProperty BarAngleProperty Field Value Type Description BindableProperty BarColorProperty BindableProperty. Identifies the BarColor bindable property. Declaration public static readonly BindableProperty BarColorProperty Field Value Type Description BindableProperty BarLineWidthProperty BindableProperty. Identifies the BarLineWidth bindable property. Declaration public static readonly BindableProperty BarLineWidthProperty Field Value Type Description BindableProperty BarRadiusProperty BindableProperty. Identifies the BarRadius bindable property. Declaration public static readonly BindableProperty BarRadiusProperty Field Value Type Description BindableProperty IsEnabledProperty BindableProperty. Identifies the IsEnabled bindable property. Declaration public static readonly BindableProperty IsEnabledProperty Field Value Type Description BindableProperty IsVisibleProperty BindableProperty. Identifies the IsVisible bindable property. Declaration public static readonly BindableProperty IsVisibleProperty Field Value Type Description BindableProperty Properties BackgroundAngle Gets or sets the background angle value. If background angle is 180, background of surface item draw 180 degree from background angle offset. Declaration public double BackgroundAngle { get; set; } Property Value Type Description System.Double BackgroundAngleOffset Gets or sets the background angle offset value. if background angle offset is 30, background of surface item start at 30 degree. Declaration public double BackgroundAngleOffset { get; set; } Property Value Type Description System.Double BackgroundColor Gets or sets the background color value. Declaration public Color BackgroundColor { get; set; } Property Value Type Description Color BackgroundLineWidth Gets or sets the background line width value. Declaration public int BackgroundLineWidth { get; set; } Property Value Type Description System.Int32 BackgroundRadius Gets or sets the background radius value. Declaration public double BackgroundRadius { get; set; } Property Value Type Description System.Double BarAngle Gets or sets the bar angle value. If bar angle is 180, bar of surface item draw 180 degree from bar angle offset. Declaration public double BarAngle { get; set; } Property Value Type Description System.Double BarAngleMaximum Gets or sets the bar angle maximum value. Declaration public double BarAngleMaximum { get; set; } Property Value Type Description System.Double BarAngleMinimum Gets or sets the bar angle minimum value. Declaration public double BarAngleMinimum { get; set; } Property Value Type Description System.Double BarAngleOffset Gets or sets the bar angle offset value. if bar angle offset is 30, bar of surface item start at 30 degree. Declaration public double BarAngleOffset { get; set; } Property Value Type Description System.Double BarColor Gets or sets the bar color value. Declaration public Color BarColor { get; set; } Property Value Type Description Color BarLineWidth Gets or sets the bar line width value. Declaration public int BarLineWidth { get; set; } Property Value Type Description System.Int32 BarRadius Gets or sets the bar radius value. Declaration public double BarRadius { get; set; } Property Value Type Description System.Double IsEnabled Gets or sets a value indicating whether this element is enabled. Declaration public bool IsEnabled { get; set; } Property Value Type Description System.Boolean IsVisible Gets or sets the visibility value of circle surface item. Declaration public bool IsVisible { get; set; } Property Value Type Description System.Boolean Implements ICircleSurfaceItem"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.RadioRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.RadioRenderer.html",
    "title": "Class RadioRenderer",
    "keywords": "Class RadioRenderer Inheritance ViewRenderer < Radio , ElmSharp.Radio > RadioRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class RadioRenderer : ViewRenderer<Radio, ElmSharp.Radio> Constructors RadioRenderer() Declaration public RadioRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing OnElementChanged(ElementChangedEventArgs<Radio>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<Radio> e) Parameters Type Name Description ElementChangedEventArgs < Radio > e"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.PaddingItemClass.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.PaddingItemClass.html",
    "title": "Class PaddingItemClass",
    "keywords": "Class PaddingItemClass Inheritance GenItemClass PaddingItemClass Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class PaddingItemClass : GenItemClass Constructors PaddingItemClass() Declaration public PaddingItemClass()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.TwoButtonPopup.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.TwoButtonPopup.html",
    "title": "Class TwoButtonPopup",
    "keywords": "Class TwoButtonPopup The TwoButtonPopup describe pop-up which has circular two button, title, text, and content area. Inheritance BindableObject TwoButtonPopup Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class TwoButtonPopup : BindableObject Examples var leftButton = new MenuItem() { Text = \"Save\", Icon = new FileImageSource{ File = \"icon_save.png\", }, Command = new Command(() => { ... }) }; var rightButton = new MenuItem() { Text = \"Delete\", Icon = new FileImageSource{ File = \"icon_delete.png\", }, Command = new Command(() => { ... }) }; var popup = new TwoButtonPopup(); popup.FirstButton = leftButton; popup.SecondButton = rightButton; popup.Title = \"Popup title\"; popup.Content = new StackLayout() { HorizontalOptions = LayoutOptions.FillAndExpand, Children = { new Label { Text = \"Will be saved\", }, } }; popup.BackButtonPressed += (s, e) => { popup.Dismiss(); }; Constructors TwoButtonPopup() Creates and initializes a new instance of the TwoButtonPopup class. Declaration public TwoButtonPopup() Fields ContentProperty BindableProperty. Identifies the content bindable property. Declaration public static readonly BindableProperty ContentProperty Field Value Type Description BindableProperty FirstButtonProperty BindableProperty. Identifies the first button bindable property. Declaration public static readonly BindableProperty FirstButtonProperty Field Value Type Description BindableProperty SecondButtonProperty BindableProperty. Identifies the second button bindable property. Declaration public static readonly BindableProperty SecondButtonProperty Field Value Type Description BindableProperty TextProperty BindableProperty. Identifies the title bindable property. Declaration public static readonly BindableProperty TextProperty Field Value Type Description BindableProperty TitleProperty BindableProperty. Identifies the title bindable property. Declaration public static readonly BindableProperty TitleProperty Field Value Type Description BindableProperty Properties Content Gets or sets content view of the Popup. Declaration public View Content { get; set; } Property Value Type Description View FirstButton Gets or sets left button of the Popup. Text property of MenuItem is ignored since button has no space to display text. Declaration public MenuItem FirstButton { get; set; } Property Value Type Description MenuItem SecondButton Gets or sets right button of the Popup. Text property of MenuItem is ignored since button has no space to display text. Declaration public MenuItem SecondButton { get; set; } Property Value Type Description MenuItem Text Gets or sets text of the Popup. Declaration public string Text { get; set; } Property Value Type Description System.String Title Gets or sets title of the Popup. Declaration public string Title { get; set; } Property Value Type Description System.String Methods Dismiss() Dismisses the TwoButtonPopup. Declaration public void Dismiss() Show() Shows the TwoButtonPopup. Declaration public void Show() Events BackButtonPressed Occurs when the device's back button is pressed. Declaration public event EventHandler BackButtonPressed Event Type Type Description EventHandler"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Radio.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Radio.html",
    "title": "Class Radio",
    "keywords": "Class Radio The Radio is a widget that allows one or more options to be displayed and have the user choose only one of them. Inheritance View Radio Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class Radio : View Examples var radio1 = new Radio { GroupName = \"SoundMode\", IsSelected = true, Value = \"sound\" } var radio2 = new Radio { GroupName = \"SoundMode\", IsSelected = false, Value = \"vibrate\" } radio1.Selected += (s,e) => { Console.WriteLine($\"radio1 selected! value:{e.Value}\"); }; radio2.Selected += (s,e) => { Console.WriteLine($\"radio2 selected! value:{e.Value}\"); }; Fields GroupNameProperty BindableProperty. Identifies the GroupName bindable property. Declaration public static readonly BindableProperty GroupNameProperty Field Value Type Description BindableProperty IsSelectedProperty BindableProperty. Identifies the IsSelected bindable property. Declaration public static readonly BindableProperty IsSelectedProperty Field Value Type Description BindableProperty ValueProperty BindableProperty. Identifies the Value bindable property. Declaration public static readonly BindableProperty ValueProperty Field Value Type Description BindableProperty Properties GroupName Gets or sets the name that specifies which Radio controls are mutually exclusive. It can be set to null. Declaration public string GroupName { get; set; } Property Value Type Description System.String IsSelected Gets or sets a boolean value that indicates whether this Radio is selected. Declaration public bool IsSelected { get; set; } Property Value Type Description System.Boolean Value Gets or sets the value of the Radio. This is a bindable property. Declaration public string Value { get; set; } Property Value Type Description System.String Events Selected Occurs when the Radio selection was changed. Declaration public event EventHandler<SelectedEventArgs> Selected Event Type Type Description EventHandler < SelectedEventArgs >"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.FormsCircularUI.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.FormsCircularUI.html",
    "title": "Class FormsCircularUI",
    "keywords": "Class FormsCircularUI Inheritance System.Object FormsCircularUI Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public static class FormsCircularUI : object Properties IsInitialized Declaration public static bool IsInitialized { get; } Property Value Type Description System.Boolean Methods Init() Declaration public static void Init()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ICircleSurfaceItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ICircleSurfaceItem.html",
    "title": "Interface ICircleSurfaceItem",
    "keywords": "Interface ICircleSurfaceItem The ICircleSurfaceItem is an interface that controls the items represented in the CircleSurface. Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public interface ICircleSurfaceItem Properties IsVisible Gets or sets CircleSurfaceItem's visibility Declaration bool IsVisible { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.ListViewCache.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.ListViewCache.html",
    "title": "Class ListViewCache",
    "keywords": "Class ListViewCache Inheritance System.Object ListViewCache Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public static class ListViewCache : object Properties InformalItemClass Declaration public static GenItemClass InformalItemClass { get; } Property Value Type Description GenItemClass PaddingItemClass Declaration public static GenItemClass PaddingItemClass { get; } Property Value Type Description GenItemClass Methods Get(Cell, Boolean) Declaration public static CellRenderer Get(Cell cell, bool IsGroupHeader = false) Parameters Type Name Description Cell cell System.Boolean IsGroupHeader Returns Type Description CellRenderer"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CheckRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CheckRenderer.html",
    "title": "Class CheckRenderer",
    "keywords": "Class CheckRenderer Inheritance SwitchRenderer CheckRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CheckRenderer : SwitchRenderer Constructors CheckRenderer() Declaration public CheckRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing OnElementChanged(ElementChangedEventArgs<Switch>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<Switch> e) Parameters Type Name Description ElementChangedEventArgs < Switch > e"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.Watchface.FormsWatchface.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.Watchface.FormsWatchface.html",
    "title": "Class FormsWatchface",
    "keywords": "Class FormsWatchface Inheritance WatchApplication FormsWatchface Namespace : Tizen.Wearable.CircularUI.Forms.Renderer.Watchface Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class FormsWatchface : WatchApplication Constructors FormsWatchface() Declaration public FormsWatchface() Methods LoadWatchface(Xamarin.Forms.Application) Declaration public void LoadWatchface(Xamarin.Forms.Application application) Parameters Type Name Description Xamarin.Forms.Application application OnAppControlReceived(AppControlReceivedEventArgs) Declaration protected override void OnAppControlReceived(AppControlReceivedEventArgs e) Parameters Type Name Description AppControlReceivedEventArgs e OnCreate() Declaration protected override void OnCreate() OnPause() Declaration protected override void OnPause() OnResume() Declaration protected override void OnResume() OnRootViewUpdated(EvasObject) Declaration protected virtual void OnRootViewUpdated(EvasObject rootView) Parameters Type Name Description EvasObject rootView OnTerminate() Declaration protected override void OnTerminate() Run() Declaration public void Run()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CirclePageNotFoundException.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CirclePageNotFoundException.html",
    "title": "Class CirclePageNotFoundException",
    "keywords": "Class CirclePageNotFoundException The CirclePageNotFoundException is an Exception class that occurs when a CircleSurface has no child. Inheritance Exception CirclePageNotFoundException Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CirclePageNotFoundException : Exception Constructors CirclePageNotFoundException() Creates and initializes a new instance of the CirclePageNotFoundException class. Declaration public CirclePageNotFoundException()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.html",
    "title": "Namespace Tizen.Wearable.CircularUI.Forms.Renderer",
    "keywords": "Namespace Tizen.Wearable.CircularUI.Forms.Renderer Classes CheckRenderer CircleDateTimeSelectorRenderer CircleListView CircleListViewRenderer CirclePageRenderer CircleSliderSurfaceItemImplements CircleStepperRenderer CircleSurfaceNotFoundException FormsCircularUI HeaderOrFooterItemClass IndexPageRenderer InformationPopupImplementation ListViewCache PaddingItemClass PopupEntryRenderer RadioRenderer TizenCircleSurfaceEffect TizenConfirmPopupEffect TwoButtonPageRenderer TwoButtonPageWidget TwoButtonPopupImplementation"
  },
  "guide/IndexPage.html": {
    "href": "guide/IndexPage.html",
    "title": "IndexPage",
    "keywords": "IndexPage The IndexPage allows you to know in advance the number of pages you have when you configure the application on multiple pages. It also shows the number of pages you are viewing. It is an extension of Xamarin.Forms.MultiPage . When the Page is added and removed in the Xamarin.Forms.MultiPage , the number of dot marks increases or decreases automatically at the top of window. It is similar to the CarouselPage in the Xamarin.Forms, with the addition of Index . When the Page is scrolled, the Index operates internally. Add IndexPage You can add pages and this will increase the number of dot mark by index accordingly. The maximum number of dot mark is 20 follow as the Samsung device UI limitation. In the illustrated example, three pages are added. The number of dot mark is three. Since, it is on the first page, only the first dot mark is shown as white, and the remaining dot marks are shown as grey. Since the maximun number of dot mark is limited by the samsung device UI guide, you will run into unwanted issue if you add pages more than the maximum number For more information, see the following links: IndexPage API reference Xamarin.Forms.MultiPage API reference The code example of this guide uses TCIndexPage code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCIndexPage.xaml XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:IndexPage x:Class=\"WearableUIGallery.TC.TCIndexPage\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <ContentPage> <StackLayout> <BoxView VerticalOptions=\"FillAndExpand\" Color=\"Red\" /> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Red\" /> </StackLayout> </ContentPage> <ContentPage> <StackLayout> <BoxView VerticalOptions=\"FillAndExpand\" Color=\"Green\" /> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Green\" /> </StackLayout> </ContentPage> <ContentPage> <StackLayout> <BoxView VerticalOptions=\"FillAndExpand\" Color=\"Blue\" /> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Blue\" /> </StackLayout> </ContentPage> </w:IndexPage>"
  },
  "api/Tizen.Wearable.CircularUI.Forms.IndexPage.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.IndexPage.html",
    "title": "Class IndexPage",
    "keywords": "Class IndexPage The IndexPage is extension of Xamarin.Forms.MultiPage. When Page is added/removed at Multipage. circular index is added/removed automatically at the top of window. Inheritance MultiPage < ContentPage > IndexPage Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class IndexPage : MultiPage<ContentPage> Methods CreateDefault(Object) Declaration protected override ContentPage CreateDefault(object item) Parameters Type Name Description System.Object item Returns Type Description ContentPage"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleSurfaceEffectBehavior.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleSurfaceEffectBehavior.html",
    "title": "Class CircleSurfaceEffectBehavior",
    "keywords": "Class CircleSurfaceEffectBehavior The CircleSurfaceEffectBehavior is a behavior which allows you to add views that require CircleSurface. Inheritance Behavior < Page > CircleSurfaceEffectBehavior Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleSurfaceEffectBehavior : Behavior<Page> Fields RotaryFocusObjectProperty Declaration public static readonly BindableProperty RotaryFocusObjectProperty Field Value Type Description BindableProperty Methods GetRotaryFocusObject(BindableObject) Declaration public static IRotaryFocusable GetRotaryFocusObject(BindableObject obj) Parameters Type Name Description BindableObject obj Returns Type Description IRotaryFocusable OnAttachedTo(Page) Declaration protected override void OnAttachedTo(Page page) Parameters Type Name Description Page page OnDetachingFrom(Page) Declaration protected override void OnDetachingFrom(Page page) Parameters Type Name Description Page page SetRotaryFocusObject(BindableObject, IRotaryFocusable) Declaration public static void SetRotaryFocusObject(BindableObject obj, IRotaryFocusable focusable) Parameters Type Name Description BindableObject obj IRotaryFocusable focusable"
  },
  "guide/Quickstart.html": {
    "href": "guide/Quickstart.html",
    "title": "Quickstart",
    "keywords": "Quickstart This guide explains how to create an application that represents Toast and CircleSlider . If you press the button, Toast pops up and it automatically disappears after timeout (in seconds). If you rotate the bezel of Tizen wearable device, CircleSlider bar is moves forward or backward direction. 1. Set up development environment and create project Create a Tizen Xamarin Forms application. For more information, see Tizen.org guide . In this guide, project name is SampleCircleApp Select only wearable device at Tizen project wizard. Add myget ( https://tizen.myget.org/F/dotnet/api/v3/index.json ) package source at Tools > Options > Nuget Package Manager > Pakage Sources. Search Xamarin.Forms NuGet package and install latest version (supports version 3.1.0.469394-pre1 and higher) via NuGet package manager. Package source is Nuget.org . Search Tizen.Wearable.CircularUI NuGet package and install latest version via NuGet package manager. Package source is myget . Install Tizen.Wearable.CircularUI NuGet at portable class library (PCL) project. 2. Insert CircularUI control code Remove SampleCircleApp.cs that is generated automatically at PCL. Then add App.xaml and App.xaml.cs using add item. In App.xaml file, remove all of the template code and replace it with the following code. This code defines the user interface for the page: xmlns:w=clr-namespace:Tizen.Wearable.CircularUI.Forms : w prefix means Tizen.Wearable.CircularUI.Forms namespace. <w:CirclePage> : CirclePage derive from Xamarin.Forms.Page . This Page content area has Label and Button . <w:CirclePage.CircleSurfaceItems> : CircleSliderSurfaceItem attached for CircleSurfaceItem of CirclePage . RotaryFocusObject is set reference of the slider . CircleSliderSurfaceItem has rotary focus. CircleSliderSurfaceItem can receive a Rotary Event from the wearable device's bezel interaction. For more information, see CirclePage guide . App.xaml file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <Application x:Class=\"SampleCircleApp.App\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:SimpleCircleApp\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <Application.MainPage> <NavigationPage x:Name=\"MainNavigation\"> <x:Arguments> <w:CirclePage x:Name=\"page\" NavigationPage.HasNavigationBar=\"False\" RotaryFocusObject=\"{x:Reference slider}\"> <w:CirclePage.Content> <StackLayout HorizontalOptions=\"Center\" Orientation=\"Vertical\" VerticalOptions=\"Center\"> <Label HorizontalTextAlignment=\"Center\" Text=\"Welcome to Xamarin Forms!\" /> <Button Clicked=\"OnButtonClicked\" Text=\"show toast\" /> </StackLayout> </w:CirclePage.Content> <w:CirclePage.CircleSurfaceItems> <w:CircleSliderSurfaceItem x:Name=\"slider\" Increment=\"0.5\" IsVisible=\"True\" Maximum=\"15\" Minimum=\"0\" Value=\"3\" /> </w:CirclePage.CircleSurfaceItems> </w:CirclePage> </x:Arguments> </NavigationPage> </Application.MainPage> </Application> In App.xaml.cs, remove all of the template code and replace it with the following code: OnButtonClicked is an event handler of Button Clicked event. The following code simply displays Toast popup during three seconds: App.xaml.cs file using Tizen.Wearable.CircularUI.Forms; using System; using Xamarin.Forms; using Xamarin.Forms.Xaml; namespace SampleCircleApp { [XamlCompilation(XamlCompilationOptions.Compile)] public partial class App : Application { public App() { InitializeComponent(); } public void OnButtonClicked(object sender, EventArgs e) { Toast.DisplayText(\"Toast popup\", 3000); } } } For initializing CircularUI instance, insert FormsCircularUI.Init() code in the Main method in SampleCircleApp.Tizen.Wearable.cs . You must import Tizen.Wearable.CircularUI.Forms.Renderer with using directives. SampleCircleApp.Tizen.Wearable.cs file using Tizen.Wearable.CircularUI.Forms.Renderer; static void Main(string[] args) { var app = new Program(); global::Xamarin.Forms.Platform.Tizen.Forms.Init(app); FormsCircularUI.Init(); //must insert this initialize code app.Run(args); } 3. Build and launch your application. Build the solution In the Visual Studio menu, select Build > Build Solution. In the Solution Explorer view, right-click the solution name and select Build. Launch Tizen Emulator Click Launch Tizen Emulator button, as displayed in the following image: For Windows OS, copy the application tpk file from the project binary path to sdb tool path. SampleCircleApp tpk: The file is located in ProjectPath\\SampleCircleApp.Tizen.Wearable\\bin\\Debug\\tizen40\\org.tizen.example.SampleCircleApp.Tizen.Wearable-1.0.0.tpk . Project path: To locate the project path, in the Solution Explorer view, right-click the solution name and click open folder in file explorer . sdb tool: This is located in c:\\tizen\\tools\\sdb.exe For Windows OS, launch Tizen Sdb Command Prompt (Tool > Tizen > Tizen Sdb Command Prompt). For Linux, you can use sdb command directly in your project path. Install your app with sdb command sdb install org.tizen.example.SampleCircleApp.Tizen.Wearable-1.0.0.tpk Launch wearable emulator to verify the application"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CirclePage.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CirclePage.html",
    "title": "Class CirclePage",
    "keywords": "Class CirclePage The CirclePage is a ContentPage, which allows you to insert views that require CircleSurface, and you can show ToolbarItems with MoreOption. It has an ActionButton, and can use the MenuItem type as text, icon, command, and so on. Inheritance ContentPage CirclePage Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CirclePage : ContentPage Constructors CirclePage() Creates and initializes a new instance of the CirclePage class. Declaration public CirclePage() Fields ActionButtonProperty BindableProperty. Identifies the ActionButton bindable property. Declaration public static readonly BindableProperty ActionButtonProperty Field Value Type Description BindableProperty RotaryFocusObjectProperty BindableProperty. Identifies the RotaryFocusObject bindable property Key. Declaration public static readonly BindableProperty RotaryFocusObjectProperty Field Value Type Description BindableProperty Properties ActionButton Gets or sets ActionButton that presents a menu item and associates it with a command Declaration public ActionButtonItem ActionButton { get; set; } Property Value Type Description ActionButtonItem CircleSurfaceItems Gets a list of CircleSurfaceItems represented through CircleSurface. Declaration public IList<ICircleSurfaceItem> CircleSurfaceItems { get; } Property Value Type Description IList < ICircleSurfaceItem > RotaryFocusObject Gets or sets object of RotaryFocusObject to receive bezel action(take a rotary event) from the current page. Declaration public IRotaryFocusable RotaryFocusObject { get; set; } Property Value Type Description IRotaryFocusable Methods OnBindingContextChanged() Declaration protected override void OnBindingContextChanged()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CheckDisplayStyle.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CheckDisplayStyle.html",
    "title": "Enum CheckDisplayStyle",
    "keywords": "Enum CheckDisplayStyle Enumeration for the style of the Check. Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public enum CheckDisplayStyle : int Fields Name Description Default The default style is checkbox style. Onoff The toggle switch style. Small The small checkbox style. this style is only for circular devices"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Toast.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Toast.html",
    "title": "Class Toast",
    "keywords": "Class Toast The Toast class provides properties that show simple types of messages Inheritance System.Object Toast Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public sealed class Toast : object Examples Toast.DisplayText(\"Hello World\", 3000) Toast.DisplayIconText(\"Hello World\", new FileImageSource { File = \"icon.jpg\" }, 3000) Methods DisplayIconText(String, FileImageSource, Int32) It shows simplest icon and text messege. Declaration public static void DisplayIconText(string text, FileImageSource icon, int duration = 3000) Parameters Type Name Description System.String text The body text of the toast. FileImageSource icon The file path of the toast icon. System.Int32 duration How long to display the text in milliseconds. DisplayText(String, Int32) It shows the simplest form of the message. Declaration public static void DisplayText(string text, int duration = 3000) Parameters Type Name Description System.String text The body text of the toast. System.Int32 duration How long to display the text in milliseconds."
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleStepper.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleStepper.html",
    "title": "Class CircleStepper",
    "keywords": "Class CircleStepper The CircleStepper is a class that extends Xamarin.Forms.Stepper for Circular UI. Inheritance Xamarin.Forms.Stepper CircleStepper Implements IRotaryFocusable Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleStepper : Xamarin.Forms.Stepper, IRotaryFocusable Fields LabelFormatProperty BindableProperty. Identifies the LabelFormat bindable property. Declaration public static readonly BindableProperty LabelFormatProperty Field Value Type Description BindableProperty MarkerColorProperty BindableProperty. Identifies the MarkerColor bindable property. Declaration public static readonly BindableProperty MarkerColorProperty Field Value Type Description BindableProperty MarkerLineWidthProperty BindableProperty. Identifies the MarkerLineWidth bindable property. Declaration public static readonly BindableProperty MarkerLineWidthProperty Field Value Type Description BindableProperty Properties LabelFormat Gets or sets format in which Value is shown Declaration public string LabelFormat { get; set; } Property Value Type Description System.String MarkerColor Gets or sets Marker color Declaration public Color MarkerColor { get; set; } Property Value Type Description Color MarkerLineWidth Gets or sets length of Marker Declaration public int MarkerLineWidth { get; set; } Property Value Type Description System.Int32 Implements IRotaryFocusable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.DateTimeType.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.DateTimeType.html",
    "title": "Enum DateTimeType",
    "keywords": "Enum DateTimeType Enumeration for style type of CircleDateTimeSelector Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public enum DateTimeType : int Fields Name Description Date Style type of \"datepicker/circle\" Time Style type of \"timepicker/circle\""
  },
  "api/Tizen.Wearable.CircularUI.Forms.IRotaryEventReceiver.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.IRotaryEventReceiver.html",
    "title": "Interface IRotaryEventReceiver",
    "keywords": "Interface IRotaryEventReceiver The IRotaryEventReceiver is a receiver interface to take Rotary Events Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public interface IRotaryEventReceiver : IRotaryFocusable Methods Rotate(RotaryEventArgs) Rotate it by the RotaryEventArgs value. Declaration void Rotate(RotaryEventArgs args) Parameters Type Name Description RotaryEventArgs args Rotated direction of Rotary device"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ActionButtonItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ActionButtonItem.html",
    "title": "Class ActionButtonItem",
    "keywords": "Class ActionButtonItem The ActionButtonItem is a class that presents a menu item and associates it with a command Inheritance MenuItem ActionButtonItem Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class ActionButtonItem : MenuItem Fields IsEnableProperty BindableProperty. Identifies the IsEnable bindable property. Declaration public static BindableProperty IsEnableProperty Field Value Type Description BindableProperty IsVisibleProperty BindableProperty. Identifies the IsVisible bindable property. Declaration public static BindableProperty IsVisibleProperty Field Value Type Description BindableProperty Properties IsEnable Gets or sets a boolean value that indicates whether this ActionButtonItem is enabled. Declaration public bool IsEnable { get; set; } Property Value Type Description System.Boolean IsVisible Gets or sets a boolean value that indicates whether this ActionButtonItem is visible. Declaration public bool IsVisible { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleToolbarItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleToolbarItem.html",
    "title": "Class CircleToolbarItem",
    "keywords": "Class CircleToolbarItem The CircleToolbarItem is a class that extends Xamarin.Forms.ToolbarItem for Circular UI. Inheritance ToolbarItem CircleToolbarItem Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleToolbarItem : ToolbarItem Fields SubTextProperty BindableProperty. Identifies the Subtext bindable property to display on the menu item. Declaration public static readonly BindableProperty SubTextProperty Field Value Type Description BindableProperty Properties SubText Gets or sets Subtext to display on the menu item Declaration public string SubText { get; set; } Property Value Type Description System.String"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.PopupEntryRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.PopupEntryRenderer.html",
    "title": "Class PopupEntryRenderer",
    "keywords": "Class PopupEntryRenderer Inheritance EntryRenderer PopupEntryRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class PopupEntryRenderer : EntryRenderer Constructors PopupEntryRenderer() Declaration public PopupEntryRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing OnElementChanged(ElementChangedEventArgs<Entry>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<Entry> e) Parameters Type Name Description ElementChangedEventArgs < Entry > e"
  },
  "api/Tizen.Wearable.CircularUI.Forms.TwoButtonPage.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.TwoButtonPage.html",
    "title": "Class TwoButtonPage",
    "keywords": "Class TwoButtonPage The TwoButtonPage is a page that has a rectangular area inside the circle as contents area. It also has two buttons and a Title area. Inheritance ContentPage TwoButtonPage Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class TwoButtonPage : ContentPage Fields FirstButtonProperty BindableProperty. Identifies the FirstButton bindable property. Declaration public static readonly BindableProperty FirstButtonProperty Field Value Type Description BindableProperty OverlapProperty BindableProperty. Identifies the Overlap bindable property. Declaration public static readonly BindableProperty OverlapProperty Field Value Type Description BindableProperty SecondButtonProperty BindableProperty. Identifies the SecondButton bindable property. Declaration public static readonly BindableProperty SecondButtonProperty Field Value Type Description BindableProperty Properties FirstButton Gets or sets left button of TwoButtonPage. Text property of MenuItem is ignored since button has no space to display text. Declaration public MenuItem FirstButton { get; set; } Property Value Type Description MenuItem Overlap Gets or sets the overlap or not overlap the buttons and page display. Declaration public bool Overlap { get; set; } Property Value Type Description System.Boolean SecondButton Gets or sets right button of TwoButtonPage. Text property of MenuItem is ignored since button has no space to display text. Declaration public MenuItem SecondButton { get; set; } Property Value Type Description MenuItem"
  },
  "guide/CirclePage.html": {
    "href": "guide/CirclePage.html",
    "title": "CirclePage",
    "keywords": "CirclePage CirclePage, is a visual element, which is derived from Xamarin.Forms.Page . This occupies entire wearable screen. Overview CirclePage is a container of any control that uses circle object or Rotary Event . If you want to use any circle control or you want to handle the Rotary Event , you must use CirclePage . CirclePage can set BOTTOM button ( ActionButtonItem ), CircleProgressBar , CircleSlider and MoreOption on its own. WARNING: CircleListView , CircleDateTimeSelector , CircleScrollView , CircleStepper must be confined in the CirclePage container or Page with CircleSurfaceEffectBehavior . If you add these controls in any other way, it may cause an exception or cannot display the controls. BOTTOM button (ActionButtonItem) A semicircular button is shown at bottom of screen. See the following image: CircleProgressBar CircleProgressBar displays the progress status of a given task with the circular design. CircleSlider CircleSlider changes value corresponding to the Rotary Event . This displays a circle bar at the edge of the circle screen. You can change the radius of circle bar by modifying radius value. MoreOption MoreOption contains a cue button (in the figure on the left). When the cue button is clicked, the rotary selector view opens from the cue location (in the figure on the right). The rotary selector arranges multiple items around the circular edge of the screen. The focus switches between items when you rotate the bezel. Create CirclePage To create CirclePage, you must download Tizen.Wearable.CircularUI NuGet package in your application project. For more information, see QuickStart . Add a new XAML page to the Tizen Xamarin.Forms application. Import Tizen.Wearable.CircularUI.Forms and change the base class from ContentPage to CirclePage. This must be done in both the C# and XAML. In a XAML file, import CircularUI and define namespace as xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" The code example of this guide uses TCCirclePage code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCCirclePage.xaml C# file using Tizen.Wearable.CircularUI.Forms; using Xamarin.Forms.Xaml; namespace WearableUIGallery.TC { [XamlCompilation(XamlCompilationOptions.Compile)] public partial class TCCirclePage : CirclePage { public TCCirclePage() { InitializeComponent(); } } } XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:CirclePage x:Class=\"WearableUIGallery.TC.TCCirclePage\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery.TC\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" RotaryFocusObject=\"{Binding RotaryFocusTarget}\"> <w:CirclePage.Content> Add content in CirclePage You can set content in the CirclePage.Content . In the XAML file, code explains that CirclePage adds content with CircleDateTimeSelector . RotaryFocusObject property sets the currently focused control that is handled by rotating and display the circle object of the focused control. If the value is not set properly, the control will not receive the Rotary Event . For more information, see the following links: CirclePage API reference Xamarin.Forms.Page guide XAML file <w:CirclePage x:Class=\"WearableUIGallery.TC.TCCirclePage\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery.TC\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" RotaryFocusObject=\"{Binding RotaryFocusTarget}\"> <w:CirclePage.BindingContext> <local:TCCirclePageViewModel RotaryFocusTarget=\"{x:Reference DateSelector}\"/> </w:CirclePage.BindingContext> <w:CirclePage.Content> <StackLayout BackgroundColor=\"Black\" HorizontalOptions=\"FillAndExpand\" Orientation=\"Vertical\" VerticalOptions=\"FillAndExpand\"> <w:CircleDateTimeSelector x:Name=\"DateSelector\" IsVisibleOfDate=\"{Binding DateVisiblity}\" MaximumDate=\"1/1/2020\" MinimumDate=\"1/12/2015\" ValueType=\"Date\" /> </StackLayout> </w:CirclePage.Content> Add ActionButtonItem in CirclePage The ActionButtonItem in CirclePage displays BOTTOM button. The ActionButtonItem is derives from Xamarin.Forms.Menuitem . ActionButtonItem has the following properties: Command : Gets or sets the ICommand to be invoked on activation (item clicked). Text : Gets or sets text of button. For more information, see the following links: ActionButtonItem API reference Xamarin.Forms.MenuItem API reference XAML file <w:CirclePage.ActionButton> <w:ActionButtonItem Command=\"{Binding ProgressBarVisibleCommand}\" Text=\"OK\" /> </w:CirclePage.ActionButton> Add ToolbarItems in CirclePage CirclePage ToolbarItems set items of rotary selector views. You can set each item with CircleToolbarItem property. CircleToolbarItem derives from Xamarin.Forms.ToolbarItem . CircleToolbarItem has the following properties: Command : Gets or sets the ICommand to be invoked on activation (item clicked). Icon : Gets or sets image of item. Text : Gets or sets title of item. For more information, see the following links: CircleToolbarItem API reference Xamarin.Forms.ToolbarItem API reference XAML file <w:CirclePage.ToolbarItems> <w:CircleToolbarItem Command=\"{Binding Play.Action}\" Icon=\"{Binding Play.Icon}\" SubText=\"{Binding Play.SubText}\" Text=\"{Binding Play.Text}\" /> <w:CircleToolbarItem Command=\"{Binding Stop.Action}\" Icon=\"{Binding Stop.Icon}\" SubText=\"{Binding Stop.SubText}\" Text=\"{Binding Stop.Text}\" /> ... </w:CirclePage.ToolbarItems> Add CircleProgressBarSurfaceItem in CirclePage CirclePage CircleSurfaceItems can set CircleProgressBarSurfaceItem and CircleSliderSurfaceItem . CircleProgressBarSurfaceItem represents Circle ProgressBar. progress1 at XAML code represents the outer circle of following image. progress2 represents the inner circle. If you use CircleProgressbar, you do not need to set the RotaryFocusObject property of CirclePage. When Value property is increased or decreased, circle object extends or shrinks the following to the Value property. CircleProgressBarSurfaceItem has the following properties: Value : Gets or sets the value of the progress bar. IsVisible : Gets or sets the visibility value of circle surface item. BarRadius : Gets or sets the bar radius value. BackgroundRadius : Gets or sets the background radius value. BarLineWidth : Gets or sets the bar line width value. BackgroundLineWidth : Gets or sets the background line width value. BarColor : Gets or sets the bar color value. BackgroundLineWidth : Gets or sets the background color value. For more information, see the following links: CircleSurfaceItem API reference CircleProgressBarSurfaceItem API reference The code example of this guide uses CircleProgressBar.xaml code of XUIComponent. The code is available in sample\\XUIComponents\\UIComponents\\UIComponents\\Samples\\CircleProgressBar.xaml XAML file <w:CirclePage x:Class=\"UIComponents.Samples.CircleProgressBar\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:UIComponents.Samples\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" NavigationPage.HasNavigationBar=\"False\"> <w:CirclePage.BindingContext> <local:CircleProgressBarViewModel /> </w:CirclePage.BindingContext> <w:CirclePage.Content> <StackLayout Padding=\"0,30,0,0\" BackgroundColor=\"Black\" HorizontalOptions=\"Center\" Orientation=\"Vertical\" VerticalOptions=\"FillAndExpand\"> <Label x:Name=\"label1\" FontAttributes=\"Bold\" FontSize=\"12\" Text=\"{Binding ProgressLabel1}\" TextColor=\"White\" /> <Label x:Name=\"label2\" Margin=\"0,40\" FontAttributes=\"Bold\" FontSize=\"12\" Text=\"{Binding ProgressLabel2}\" TextColor=\"White\" /> </StackLayout> </w:CirclePage.Content> <w:CirclePage.CircleSurfaceItems> <w:CircleProgressBarSurfaceItem x:Name=\"progress1\" IsVisible=\"True\" Value=\"{Binding ProgressValue1}\" /> <w:CircleProgressBarSurfaceItem x:Name=\"progress2\" BackgroundColor=\"Black\" BackgroundLineWidth=\"15\" BackgroundRadius=\"70\" BarColor=\"Red\" BarLineWidth=\"15\" BarRadius=\"70\" IsVisible=\"True\" Value=\"{Binding ProgressValue2}\" /> </w:CirclePage.CircleSurfaceItems> </w:CirclePage> Add CircleSliderSurfaceItem in CirclePage CircleSliderSurfaceItem represents Circle Slider. slider at XAML code represents the circle of following image. If you use CircleSlider bar, you must set Circle Slider name at the RotaryFocusObject property of CirclePage. The Value property is the default value for the Slider. If you rotate the bezel, the Value property increases or decreases depending on the bezel behavior. The Increment property is the incremental or decremental change as you rotates the bezel. CircleSliderSurfaceItem has the following properties: Value : Gets or sets the value of the slider. Increment : The value of the slider is increased/decreased by the Increment value. Minimum : Gets or sets the minimum value of the slider. Maximum : Gets or sets the maximum value of the slider. BarLineWidth : Gets or sets the bar line width value. BackgroundLineWidth : Gets or sets the background line width value. BarColor : Gets or sets the bar color value. BackgroundLineWidth : Gets or sets the background color value. For more information, see the following links: CircleSurfaceItem API reference CircleSliderSurfaceItem API reference The code example of this guide uses CircleSlider.xaml code of XUIComponent. The code is available in sample\\XUIComponents\\UIComponents\\UIComponents\\Samples\\CircleSlider.xaml XAML file <w:CirclePage x:Class=\"UIComponents.Samples.CircleSlider\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:UIComponents.Samples\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" NavigationPage.HasNavigationBar=\"False\" RotaryFocusObject=\"{x:Reference slider}\"> <w:CirclePage.Content> <StackLayout HorizontalOptions=\"Center\" Orientation=\"Vertical\" VerticalOptions=\"Center\"> <Label x:Name=\"label\" BindingContext=\"{x:Reference Name=slider}\" FontSize=\"12\" Text=\"{Binding Value, StringFormat='{0:F1}'}\" /> </StackLayout> </w:CirclePage.Content> <w:CirclePage.CircleSurfaceItems> <w:CircleSliderSurfaceItem x:Name=\"slider\" Increment=\"0.5\" Maximum=\"15\" Minimum=\"0\" Value=\"3\" /> </w:CirclePage.CircleSurfaceItems> </w:CirclePage>"
  },
  "api/Tizen.Wearable.CircularUI.Forms.PositionOption.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.PositionOption.html",
    "title": "Enum PositionOption",
    "keywords": "Enum PositionOption Enumeration for position type of popup Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public enum PositionOption : int Fields Name Description Absolute The value of Offset is X, Y and popup is placed on the screen. BottomOfView The popup appears at the bottom of the View using the Effect. The position is changed by Offset in the center of View. CenterOfParent In the center of the screen, move by the Offset in the Popup. Relative Set Offset.X * Window.Width, Offset.Y * Window.Height."
  },
  "api/Tizen.Wearable.CircularUI.Forms.RotaryEventHandler.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.RotaryEventHandler.html",
    "title": "Delegate RotaryEventHandler",
    "keywords": "Delegate RotaryEventHandler Delegate for a triggering rotary event Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public delegate void RotaryEventHandler(RotaryEventArgs args); Parameters Type Name Description RotaryEventArgs args Rotated direction of Rotary device"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleListViewRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleListViewRenderer.html",
    "title": "Class CircleListViewRenderer",
    "keywords": "Class CircleListViewRenderer Inheritance ViewRenderer < CircleListView , CircleListView > CircleListViewRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleListViewRenderer : ViewRenderer<CircleListView, CircleListView> Constructors CircleListViewRenderer() Declaration public CircleListViewRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing OnElementChanged(ElementChangedEventArgs<CircleListView>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<CircleListView> e) Parameters Type Name Description ElementChangedEventArgs < CircleListView > e"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleStackLayout.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleStackLayout.html",
    "title": "Class CircleStackLayout",
    "keywords": "Class CircleStackLayout Inheritance StackLayout CircleStackLayout Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleStackLayout : StackLayout Methods LayoutChildren(Double, Double, Double, Double) Declaration protected override void LayoutChildren(double x, double y, double width, double height) Parameters Type Name Description System.Double x System.Double y System.Double width System.Double height OnMeasure(Double, Double) Declaration protected override SizeRequest OnMeasure(double widthConstraint, double heightConstraint) Parameters Type Name Description System.Double widthConstraint System.Double heightConstraint Returns Type Description SizeRequest"
  },
  "api/Tizen.Wearable.CircularUI.Forms.RotaryEventArgs.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.RotaryEventArgs.html",
    "title": "Class RotaryEventArgs",
    "keywords": "Class RotaryEventArgs Event arguments for RotaryEvent. Inheritance EventArgs RotaryEventArgs Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class RotaryEventArgs : EventArgs Properties IsClockwise Gets or sets rotated direction of Rotary device. IsClockwise is true when Rotary device rotated in the clockwise direction or false on counter clockwise. Declaration public bool IsClockwise { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.HeaderOrFooterItemClass.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.HeaderOrFooterItemClass.html",
    "title": "Class HeaderOrFooterItemClass",
    "keywords": "Class HeaderOrFooterItemClass Inheritance GenItemClass HeaderOrFooterItemClass Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class HeaderOrFooterItemClass : GenItemClass Constructors HeaderOrFooterItemClass() Declaration public HeaderOrFooterItemClass() Methods OnGetContent(Object, String) Declaration protected EvasObject OnGetContent(object data, string part) Parameters Type Name Description System.Object data System.String part Returns Type Description EvasObject"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CirclePageRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CirclePageRenderer.html",
    "title": "Class CirclePageRenderer",
    "keywords": "Class CirclePageRenderer Inheritance VisualElementRenderer < CirclePage > CirclePageRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CirclePageRenderer : VisualElementRenderer<CirclePage> Constructors CirclePageRenderer() Declaration public CirclePageRenderer() Properties CircleSurface Declaration public ElmSharp.Wearable.CircleSurface CircleSurface { get; } Property Value Type Description ElmSharp.Wearable.CircleSurface Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing OnElementChanged(ElementChangedEventArgs<CirclePage>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<CirclePage> e) Parameters Type Name Description ElementChangedEventArgs < CirclePage > e UpdateBackgroundColor(Boolean) Declaration protected override void UpdateBackgroundColor(bool initialize) Parameters Type Name Description System.Boolean initialize UpdateBackgroundImage(Boolean) Declaration protected void UpdateBackgroundImage(bool initialize) Parameters Type Name Description System.Boolean initialize"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ContextPopupEffectBehavior.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ContextPopupEffectBehavior.html",
    "title": "Class ContextPopupEffectBehavior",
    "keywords": "Class ContextPopupEffectBehavior The ContextPopupEffectBehavior is a behavior which allows you to add a context popup. Inheritance Behavior < View > ContextPopupEffectBehavior Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class ContextPopupEffectBehavior : Behavior<View> Fields AcceptCommandParameterProperty BindableProperty. Identifies the AcceptCommandParameter bindable property. Declaration public static BindableProperty AcceptCommandParameterProperty Field Value Type Description BindableProperty AcceptCommandProperty BindableProperty. Identifies the AcceptCommand bindable property. AcceptCommand is executed when the Accept button is pressed. Declaration public static BindableProperty AcceptCommandProperty Field Value Type Description BindableProperty AcceptTextProperty BindableProperty. Identifies the AcceptText bindable property. AcceptText is to use as Accept button Declaration public static BindableProperty AcceptTextProperty Field Value Type Description BindableProperty CancelCommandParameterProperty BindableProperty. Identifies the CancelCommandParameter bindable property. Declaration public static BindableProperty CancelCommandParameterProperty Field Value Type Description BindableProperty CancelCommandProperty BindableProperty. Identifies the CancelCommand bindable property. CancelCommand is executed when the Cancel button is pressed, even if the popup disappears by selecting outside the popup. Declaration public static BindableProperty CancelCommandProperty Field Value Type Description BindableProperty CancelTextProperty BindableProperty. Identifies the CancelText bindable property. CancelText is to use as Cancel button Declaration public static BindableProperty CancelTextProperty Field Value Type Description BindableProperty OffsetProperty BindableProperty. Identifies the Offset bindable property. Offset is a value of how far to move from the base tap position represented by the PositionOption type. If it isn't set, it returns 0,0. Declaration public static BindableProperty OffsetProperty Field Value Type Description BindableProperty PositionOptionProperty BindableProperty. Identifies the PositionOption bindable property. Declaration public static BindableProperty PositionOptionProperty Field Value Type Description BindableProperty VisibilityProperty BindableProperty. Identifies the ConfirmVisibility bindable property. Popup appears if ConfirmVisibility is True, and disappears when it becomes False. CancelCommand works even if it disappears to False. Declaration public static BindableProperty VisibilityProperty Field Value Type Description BindableProperty Properties AcceptCommand Gets or sets command that is executed when the Accept button is pressed. Declaration public ICommand AcceptCommand { get; set; } Property Value Type Description ICommand AcceptCommandParameter Gets or sets command paramter that is executed when the Accept button is pressed. Declaration public object AcceptCommandParameter { get; set; } Property Value Type Description System.Object AcceptText Gets or sets text of Accept button Declaration public string AcceptText { get; set; } Property Value Type Description System.String CancelCommand Gets or sets command that is executed when the Cancel button is pressed, even if the popup disappears by selecting outside the popup. Declaration public ICommand CancelCommand { get; set; } Property Value Type Description ICommand CancelCommandParameter Gets or sets command that is executed when the Cancel button is pressed, even if the popup disappears by selecting outside the popup. Declaration public object CancelCommandParameter { get; set; } Property Value Type Description System.Object CancelText Gets or sets text of Cancel button Declaration public string CancelText { get; set; } Property Value Type Description System.String Offset Gets or sets offset. Offset is a value of how far to move from the base tap position represented by the PositionOption type. If it isn't set, it returns 0,0. Declaration public Point Offset { get; set; } Property Value Type Description Point PositionOption Gets or sets position type of popup Declaration public PositionOption PositionOption { get; set; } Property Value Type Description PositionOption Visibility Gets visibility of Confirmation popup. Popup appears if ConfirmVisibility is True, and disappears when it becomes False. CancelCommand works even if it disappears to False. Declaration public bool Visibility { get; set; } Property Value Type Description System.Boolean Methods OnAttachedTo(View) Declaration protected override void OnAttachedTo(View view) Parameters Type Name Description View view OnDetachingFrom(View) Declaration protected override void OnDetachingFrom(View view) Parameters Type Name Description View view"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleSliderSurfaceItemImplements.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleSliderSurfaceItemImplements.html",
    "title": "Class CircleSliderSurfaceItemImplements",
    "keywords": "Class CircleSliderSurfaceItemImplements Inheritance ElmSharp.Wearable.CircleSlider CircleSliderSurfaceItemImplements Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleSliderSurfaceItemImplements : ElmSharp.Wearable.CircleSlider Constructors CircleSliderSurfaceItemImplements(CircleSliderSurfaceItem, EvasObject, CircleSurface) Declaration public CircleSliderSurfaceItemImplements(CircleSliderSurfaceItem item, EvasObject parent, CircleSurface surface) Parameters Type Name Description CircleSliderSurfaceItem item EvasObject parent CircleSurface surface"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.TwoButtonPopupImplementation.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.TwoButtonPopupImplementation.html",
    "title": "Class TwoButtonPopupImplementation",
    "keywords": "Class TwoButtonPopupImplementation Inheritance System.Object TwoButtonPopupImplementation Implements Tizen.Wearable.CircularUI.Forms.ITwoButtonPopup IDisposable Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class TwoButtonPopupImplementation : object, ITwoButtonPopup, IDisposable Constructors TwoButtonPopupImplementation() Declaration public TwoButtonPopupImplementation() Properties Content Declaration public View Content { get; set; } Property Value Type Description View FirstButton Declaration public MenuItem FirstButton { get; set; } Property Value Type Description MenuItem SecondButton Declaration public MenuItem SecondButton { get; set; } Property Value Type Description MenuItem Text Declaration public string Text { get; set; } Property Value Type Description System.String Title Declaration public string Title { get; set; } Property Value Type Description System.String Methods Dismiss() Declaration public void Dismiss() Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Finalize() Declaration protected void Finalize() Show() Declaration public void Show() Events BackButtonPressed Declaration public event EventHandler BackButtonPressed Event Type Type Description EventHandler Implements Tizen.Wearable.CircularUI.Forms.ITwoButtonPopup IDisposable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleSliderSurfaceItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleSliderSurfaceItem.html",
    "title": "Class CircleSliderSurfaceItem",
    "keywords": "Class CircleSliderSurfaceItem The CircleSliderSurfaceItem displays circular slider at CirclePage. Inheritance Element CircleSurfaceItem CircleSliderSurfaceItem Implements ICircleSurfaceItem IRotaryFocusable Inherited Members CircleSurfaceItem.BackgroundAngleProperty CircleSurfaceItem.BackgroundAngleOffsetProperty CircleSurfaceItem.BackgroundColorProperty CircleSurfaceItem.BackgroundLineWidthProperty CircleSurfaceItem.BackgroundRadiusProperty CircleSurfaceItem.BarAngleProperty CircleSurfaceItem.BarAngleOffsetProperty CircleSurfaceItem.BarAngleMaximumProperty CircleSurfaceItem.BarAngleMinimumProperty CircleSurfaceItem.BarColorProperty CircleSurfaceItem.BarLineWidthProperty CircleSurfaceItem.BarRadiusProperty CircleSurfaceItem.IsVisibleProperty CircleSurfaceItem.IsEnabledProperty CircleSurfaceItem.BackgroundAngle CircleSurfaceItem.BackgroundAngleOffset CircleSurfaceItem.BackgroundColor CircleSurfaceItem.BackgroundLineWidth CircleSurfaceItem.BackgroundRadius CircleSurfaceItem.BarAngle CircleSurfaceItem.BarAngleOffset CircleSurfaceItem.BarAngleMaximum CircleSurfaceItem.BarAngleMinimum CircleSurfaceItem.BarColor CircleSurfaceItem.BarLineWidth CircleSurfaceItem.BarRadius CircleSurfaceItem.IsVisible CircleSurfaceItem.IsEnabled Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleSliderSurfaceItem : CircleSurfaceItem, ICircleSurfaceItem, IRotaryFocusable Fields IncrementProperty BindableProperty. Identifies the Increment bindable property. Declaration public static readonly BindableProperty IncrementProperty Field Value Type Description BindableProperty MaximumProperty BindableProperty. Identifies the Maximum bindable property. Declaration public static readonly BindableProperty MaximumProperty Field Value Type Description BindableProperty MinimumProperty BindableProperty. Identifies the Minimum bindable property. Declaration public static readonly BindableProperty MinimumProperty Field Value Type Description BindableProperty ValueProperty BindableProperty. Identifies the Value bindable property. Declaration public static readonly BindableProperty ValueProperty Field Value Type Description BindableProperty Properties Increment Gets or sets the Increment value. The value of the slider is increased/decreased by the Increment value. Declaration public double Increment { get; set; } Property Value Type Description System.Double Maximum Gets or sets the maximum value of the slider. Declaration public double Maximum { get; set; } Property Value Type Description System.Double Minimum Gets or sets the minimum value of the slider. Declaration public double Minimum { get; set; } Property Value Type Description System.Double Value Gets or sets the value of the slider. Declaration public double Value { get; set; } Property Value Type Description System.Double Implements ICircleSurfaceItem IRotaryFocusable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector.html",
    "title": "Class CircleDateTimeSelector",
    "keywords": "Class CircleDateTimeSelector The CircleDateTimeSelector is a view that can change the value by bezel action by touching each item of \"Year: Month: Day\" and \"Hour: Minute: AM / PM\" Inheritance Xamarin.Forms.View CircleDateTimeSelector Implements IRotaryFocusable Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleDateTimeSelector : Xamarin.Forms.View, IRotaryFocusable Fields DateTimeProperty BindableProperty. Identifies the DateTime bindable property. Declaration public static readonly BindableProperty DateTimeProperty Field Value Type Description BindableProperty IsVisibleOfAmPmProperty BindableProperty. Identifies the IsVisibleOfAmPm bindable property. Declaration public static BindableProperty IsVisibleOfAmPmProperty Field Value Type Description BindableProperty IsVisibleOfDateProperty BindableProperty. Identifies the IsVisibleOfDate bindable property. Declaration public static BindableProperty IsVisibleOfDateProperty Field Value Type Description BindableProperty IsVisibleOfHourProperty BindableProperty. Identifies the IsVisibleOfHour bindable property. Declaration public static BindableProperty IsVisibleOfHourProperty Field Value Type Description BindableProperty IsVisibleOfMinuteProperty BindableProperty. Identifies the IsVisibleOfMinute bindable property. Declaration public static BindableProperty IsVisibleOfMinuteProperty Field Value Type Description BindableProperty IsVisibleOfMonthProperty BindableProperty. Identifies the IsVisibleOfMonth bindable property. Declaration public static BindableProperty IsVisibleOfMonthProperty Field Value Type Description BindableProperty IsVisibleOfYearProperty BindableProperty. Identifies the IsVisibleOfYear bindable property. Declaration public static BindableProperty IsVisibleOfYearProperty Field Value Type Description BindableProperty MarkerColorProperty BindableProperty. Identifies the MarkerColor bindable property. Declaration public static readonly BindableProperty MarkerColorProperty Field Value Type Description BindableProperty MaximumDateProperty BindableProperty. Identifies the MaximumDate bindable property. Declaration public static readonly BindableProperty MaximumDateProperty Field Value Type Description BindableProperty MinimumDateProperty BindableProperty. Identifies the MinimumDate bindable property. Declaration public static readonly BindableProperty MinimumDateProperty Field Value Type Description BindableProperty ValueTypeProperty BindableProperty. Identifies the ValueType bindable property. Declaration public static readonly BindableProperty ValueTypeProperty Field Value Type Description BindableProperty Properties DateTime Gets or sets the date / time. Declaration public DateTime DateTime { get; set; } Property Value Type Description DateTime IsVisibleOfAmPm Gets or sets a boolean value that indicates whether the AmPm field type is visible. Declaration public bool IsVisibleOfAmPm { get; set; } Property Value Type Description System.Boolean IsVisibleOfDate Gets or sets a boolean value that indicates whether the date field type is visible. Declaration public bool IsVisibleOfDate { get; set; } Property Value Type Description System.Boolean IsVisibleOfHour Gets or sets a boolean value that indicates whether the hour field type is visible. Declaration public bool IsVisibleOfHour { get; set; } Property Value Type Description System.Boolean IsVisibleOfMinute Gets or sets a boolean value that indicates whether the minute field type is visible. Declaration public bool IsVisibleOfMinute { get; set; } Property Value Type Description System.Boolean IsVisibleOfMonth Gets or sets a boolean value that indicates whether the month field type is visible. Declaration public bool IsVisibleOfMonth { get; set; } Property Value Type Description System.Boolean IsVisibleOfYear Gets or sets a boolean value that indicates whether the year field type is visible. Declaration public bool IsVisibleOfYear { get; set; } Property Value Type Description System.Boolean MarkerColor Gets or sets Marker color Declaration public Color MarkerColor { get; set; } Property Value Type Description Color MaximumDate Gets or sets the maximum date when ValueType is Date. Declaration public DateTime MaximumDate { get; set; } Property Value Type Description DateTime MinimumDate Gets or sets the minimum date when ValueType is Date. Declaration public DateTime MinimumDate { get; set; } Property Value Type Description DateTime ValueType Gets or sets DateTimeType value. If it is Time, the UI will be changed to enable time selection. If it is a Date, the date can be changed. Declaration public DateTimeType ValueType { get; set; } Property Value Type Description DateTimeType Implements IRotaryFocusable"
  }
}