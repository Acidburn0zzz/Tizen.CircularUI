{
  "guide/Overview.html": {
    "href": "guide/Overview.html",
    "title": "Developer Guides",
    "keywords": "Developer Guides Welcome to the Tizen Circular UI guides."
  },
  "guide/TwoButtonPage.html": {
    "href": "guide/TwoButtonPage.html",
    "title": "TwoButtonPage",
    "keywords": "TwoButtonPage TwoButtonPage derives from Xamarin.Forms.Page . TwonButtonPage has two semicircular buttons that are located at the left side and the right side of the circle. Non-overlapped Overlapped Create TwoButtonPage You can set control in the TwoButtonPage.Content . In this example, long text Label and two buttons were set for Content. If Overlap property is true , the Content area occupies the whole of the screen. If Overlap property is false , the Content area occupies screen that is excluded button's area. The default value of Overlap property is false . TwoButtonPage.firstButton sets left side button. TwoButtonPage.SecondButton sets right side button. You can add buttons using MenuItem . This guide's code example uses WearableUIGallery's TCTwoButtonPage code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCTwoButtonPage.xaml For more information. Please refer to below links TwoButtonPage API reference Xamarin.Forms.Page guide Xamarin.Forms.MenuItem API reference XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:TwoButtonPage x:Class=\"WearableUIGallery.TC.TCTwoButtonPage\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery.TC\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <w:TwoButtonPage.BindingContext> <local:TCTwoButtonPageViewModel /> </w:TwoButtonPage.BindingContext> <w:TwoButtonPage.Content> <ScrollView> <StackLayout HorizontalOptions=\"FillAndExpand\" VerticalOptions=\"FillAndExpand\"> <Label HorizontalOptions=\"FillAndExpand\" HorizontalTextAlignment=\"Center\" Text=\"{Binding Text}\" VerticalOptions=\"FillAndExpand\" /> <Button Clicked=\"OnRemove1\" Text=\"Remove 1\" /> <Button Clicked=\"OnRemove2\" Text=\"Remove 2\" /> </StackLayout> </ScrollView> </w:TwoButtonPage.Content> <w:TwoButtonPage.FirstButton> <MenuItem Command=\"{Binding Command1}\" Icon=\"image/tw_ic_popup_btn_check.png\" /> </w:TwoButtonPage.FirstButton> <w:TwoButtonPage.SecondButton> <MenuItem Command=\"{Binding Command2}\" Icon=\"image/tw_ic_popup_btn_delete.png\" /> </w:TwoButtonPage.SecondButton> </w:TwoButtonPage>"
  },
  "guide/ConfirmationPopup.html": {
    "href": "guide/ConfirmationPopup.html",
    "title": "ConfirmationPopup",
    "keywords": "ConfirmationPopup ConfirmationPopup represents Tizen Wearable EFL Twobutton-popup style. ConfirmationPopup is useful to select one of two options. (e.g cancel/done, share/delete) ConfirmationPopup is displayed separately from any control. So you can't set this in XAML file. Create ConfirmationPopup ConfirmationPopup.Title Property sets the title of the popup. You can set the Content property with Layouts such as StackLayout or ScrollView . ConfirmationPopup.FirstButton property sets left side button. ConfirmationPopup.SecondButton property sets right side button. You can set FirstButton and SecondButton using MenuItem . You should add code at Command or Clicked event handler for controlling MenuItem clicked. This guide's code example uses WearableUIGallery's TCConfirmationPopup code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCConfirmationPopup.xaml.cs For more information. Please refer to ConfirmationPopup API reference C# file var leftButton = new MenuItem() { Icon = new FileImageSource { File = \"image/b_option_list_icon_share.png\", }, Command = new Command(() => { /* must insert code when user press left button */ }) }; ... _popUp1 = new ConfirmationPopup(); _popUp1.FirstButton = leftButton; _popUp1.SecondButton = rightButton; _popUp1.Title = \"Popup title\"; _popUp1.Content = new StackLayout() { HorizontalOptions = LayoutOptions.FillAndExpand, Children = { new Label { Text = \"Will be saved, and sound, only on the Gear.\", }, new StackLayout { Orientation = StackOrientation.Horizontal, Padding = new Thickness(0, 30, 0, 30), Children = { checkbox, new Label { Text = \"Do not repeat\", } } } } }; } How to set long Text at ConfirmationPopup ConfirmationPopup has Text Property. This Property is useful to set long text. If a long text was set by Text property, you don't need to add StackLayout , ScrollView and Label for displaying long text. Text Property's area overlaps Content Property area. So do not use two property at the same time. C# file _popUp2 = new ConfirmationPopup(); _popUp2.FirstButton = leftButton2; _popUp2.SecondButton = rightButton2; _popUp2.Title = \"Popup title\"; _popUp2.Text = @\"This is scrollable popup text. This part is made by adding long text in popup. Popup internally added scroller to this layout when size of text is greater than total popup height. This has two button in action area and title text in title area\";"
  },
  "guide/Toast.html": {
    "href": "guide/Toast.html",
    "title": "Toast",
    "keywords": "Toast Toast provides simple information. Toast automatically disappear after timeout seconds. Tizen Wearable Toast fills the whole screen for displaying message and image. Single text Icon and text Create Toast Toast is a static method. So you don't need to any container or parent control for using this control. Toast provides two methods, Toast.DisplayText() shows simple text message. Toast.DisplayIconText() shows simple icon and simple text message. Toast.DisplayText() method's first parameter is message text. And the second parameter is timeout duration(milliseconds). The second parameter is optional. If you don't set this value, The default value is set 3000(3 seconds). Toast.DisplayIconText() method's first parameter is message text. And the second parameter is icon file path, you can set file path with new FileImageSource . The third parameter is timeout duration that is also optional. For more information. Please refer to Toast API reference C# file Toast.DisplayText(\"Toast popup\", 3000); Toast.DisplayIconText(\"Toast popup2\", new FileImageSource { File = \"image/tw_ic_popup_btn_check.png\" }, 2000);"
  },
  "guide/ContextPopup.html": {
    "href": "guide/ContextPopup.html",
    "title": "ContextPopup",
    "keywords": "ContextPopup ContextPopup represents Tizen wearable context popup that has one or two items. ContextPopup has the same shape as ConfirmPopupEffect . ConfirmPopupEffect can be attached any control (such as a button). ContextPopup is displayed separately from any control. So you can't set this in XAML file. If you want to attach context popup in XAML file, please use ConfirmPopupEffect instead. Create ContextPopup ContextPopupItem is each item of ContextPopup . ContextPopupItem parameter of constructor set item text. One or two ContextPopupItem can be attached at ContextPopup using ContextPopup.Items.Add() . ItemSelected event is occurred when user select item. SelectedItem gets the value which item selected. It is possible to add more than 2 items, but any items from the 3rd item are hidden. So one or two items are recommended. This guide's code example use WearableUIGallery's TCContextPopup code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCContextPopup.xaml.cs For more information. Please refer to ContextPopup API reference C# file var item1 = new ContextPopupItem(\"item 1\"); var item2 = new ContextPopupItem(\"item 2\"); _popup.Items.Add(item1); _popup.Items.Add(item2); _popup.ItemSelected += (s, e) => { Console.WriteLine($\"{_popup.SelectedItem?.Label} is selected\"); /* insert code when user select item */ };"
  },
  "guide/CirclePage.html": {
    "href": "guide/CirclePage.html",
    "title": "CirclePage",
    "keywords": "CirclePage CirclePage derives from Xamarin.Forms.Page . This visual element occupies all of the wearable screen. Overview CirclePage is a container of any control that uses circle object or Rotary Event . If you want to use any circle control or to handle the Rotary Event . You have to use CirclePage . CirclePage can set bottom button( ActionButtonItem ), CircleProgressBar , CircleSlider and MoreOption on it's own. WARNING: CircleListView , CircleDateTimeSelector , CircleScrollView , CircleStepper must be contained by CirclePage or CircleSurfaceEffectBehavior should be added in Behaviors of Page that contains these controls. If other pages contain these controls, it may cause exception or can't display control. bottom button(ActionButtonItem) A Semicircular button is shown at bottom of screen. Refer to below image. CircleProgressBar Circle ProgressBar shows the progress status of a given task with the circular design. CircleSlider Circle Slider changes value corresponding to the Rotary Event . this shows a circle bar at the edge of the circle screen. You can change the radius of circle bar with modifying radius value. MoreOption More option contains a cue button (shown on the left in the following figure). When the cue button is clicked, the rotary selector view opens from the cue location (shown on the right in the figure). The rotary selector arranges multiple items around the circular edge of the screen, and switches the focus between items as users rotate the bezel. Create CirclePage First, you should download Tizen.Wearable.CircularUI NuGet package in your application project, please refer to QuickStart . Add a new XAML page to the Tizen Xamarin.Forms application, first import Tizen.Wearable.CircularUI.Forms and change the base class from ContentPage to CirclePage. This has to be done in both the C# and XAML. In a XAML file, import CircularUI and define namespace like as xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" This guide's code example uses WearableUIGallery's TCCirclePage code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCCirclePage.xaml C# file using Tizen.Wearable.CircularUI.Forms; using Xamarin.Forms.Xaml; namespace WearableUIGallery.TC { [XamlCompilation(XamlCompilationOptions.Compile)] public partial class TCCirclePage : CirclePage { public TCCirclePage() { InitializeComponent(); } } } XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:CirclePage x:Class=\"WearableUIGallery.TC.TCCirclePage\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery.TC\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" RotaryFocusTargetName=\"{Binding RotaryFocusName}\"> <w:CirclePage.Content> Adding Content at CirclePage You can set content at CirclePage.Content . The following XAML code show CirclePage set content with CircleDateTimeSelector . RotaryFocusTargetName property sets the currently focused control that is handled by rotating and display the focused control's circle object. If you don't set this value properly, control can't receive the Rotary Event or circle object can't be shown. For more information. Please refer to below links CirclePage API reference Xamarin.Forms.Page guide XAML file <w:CirclePage x:Class=\"WearableUIGallery.TC.TCCirclePage\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery.TC\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" RotaryFocusTargetName=\"{Binding RotaryFocusName}\"> <w:CirclePage.BindingContext> <local:TCCirclePageViewModel /> </w:CirclePage.BindingContext> <w:CirclePage.Content> <StackLayout BackgroundColor=\"Black\" HorizontalOptions=\"FillAndExpand\" Orientation=\"Vertical\" VerticalOptions=\"FillAndExpand\"> <w:CircleDateTimeSelector x:Name=\"DateSelector\" IsVisibleOfDate=\"{Binding DateVisiblity}\" MaximumDate=\"1/1/2020\" MinimumDate=\"1/12/2015\" ValueType=\"Date\" /> </StackLayout> </w:CirclePage.Content> Adding ActionButtonItem at CirclePage ActionButtonItem in CirclePage presents bottom button. ActionButtonItem derives from Xamarin.Forms.Menuitem . ActionButtonItem has the following properties: Command : Gets or sets the ICommand to be invoked on activation(item clicked). Text : Gets or sets button's text. For more information. Please refer to below links ActionButtonItem API reference Xamarin.Forms.MenuItem API reference XAML file <w:CirclePage.ActionButton> <w:ActionButtonItem Command=\"{Binding ProgressBarVisibleCommand}\" Text=\"OK\" /> </w:CirclePage.ActionButton> Adding ToolbarItems at CirclePage CirclePage ToolbarItems set rotary selector view's items. You can set each item with CircleToolbarItem property. CircleToolbarItem derives from Xamarin.Forms.ToolbarItem . CircleToolbarItem has the following properties: Command : Gets or sets the ICommand to be invoked on activation(item clicked). Icon : Gets or sets item's image. Text : Gets or sets item's title. For more information. Please refer to below links CircleToolbarItem API reference Xamarin.Forms.ToolbarItem API reference XAML file <w:CirclePage.ToolbarItems> <w:CircleToolbarItem Command=\"{Binding Play.Action}\" Icon=\"{Binding Play.Icon}\" SubText=\"{Binding Play.SubText}\" Text=\"{Binding Play.Text}\" /> <w:CircleToolbarItem Command=\"{Binding Stop.Action}\" Icon=\"{Binding Stop.Icon}\" SubText=\"{Binding Stop.SubText}\" Text=\"{Binding Stop.Text}\" /> ... </w:CirclePage.ToolbarItems> Adding CircleProgressBarSurfaceItem at CirclePage CirclePage CircleSurfaceItems can set CircleProgressBarSurfaceItem and CircleSliderSurfaceItem . CircleProgressBarSurfaceItem represents Circle ProgressBar. progress1 at XAML code represents the outer circle of below image. And progress2 represents the inner circle. If you use CircleProgressbar, you don't need to set the RotaryFocusTargetName property of CirclePage. When Value property is increased or decreased, circle object extends or shrinks following to the Value property. CircleProgressBarSurfaceItem has the following properties: Value : Gets or sets the value of the progress bar. IsVisible : Gets or sets the visibility value of circle surface item. BarRadius : Gets or sets the bar radius value. BackgroundRadius : Gets or sets the background radius value. BarLineWidth : Gets or sets the bar line width value. BackgroundLineWidth : Gets or sets the background line width value. BarColor : Gets or sets the bar color value. BackgroundLineWidth : Gets or sets the background color value. For more information. Please refer to below links CircleSurfaceItem API reference CircleProgressBarSurfaceItem API reference This guide's code example uses XUIComponent's CircleProgressBar.xaml code at the sample\\XUIComponents\\UIComponents\\UIComponents\\Samples\\CircleProgressBar.xaml XAML file <w:CirclePage x:Class=\"UIComponents.Samples.CircleProgressBar\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:UIComponents.Samples\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" NavigationPage.HasNavigationBar=\"False\"> <w:CirclePage.BindingContext> <local:CircleProgressBarViewModel /> </w:CirclePage.BindingContext> <w:CirclePage.Content> <StackLayout Padding=\"0,30,0,0\" BackgroundColor=\"Black\" HorizontalOptions=\"Center\" Orientation=\"Vertical\" VerticalOptions=\"FillAndExpand\"> <Label x:Name=\"label1\" FontAttributes=\"Bold\" FontSize=\"12\" Text=\"{Binding ProgressLabel1}\" TextColor=\"White\" /> <Label x:Name=\"label2\" Margin=\"0,40\" FontAttributes=\"Bold\" FontSize=\"12\" Text=\"{Binding ProgressLabel2}\" TextColor=\"White\" /> </StackLayout> </w:CirclePage.Content> <w:CirclePage.CircleSurfaceItems> <w:CircleProgressBarSurfaceItem x:Name=\"progress1\" IsVisible=\"True\" Value=\"{Binding ProgressValue1}\" /> <w:CircleProgressBarSurfaceItem x:Name=\"progress2\" BackgroundColor=\"Black\" BackgroundLineWidth=\"15\" BackgroundRadius=\"70\" BarColor=\"Red\" BarLineWidth=\"15\" BarRadius=\"70\" IsVisible=\"True\" Value=\"{Binding ProgressValue2}\" /> </w:CirclePage.CircleSurfaceItems> </w:CirclePage>"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleScrollView.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleScrollView.html",
    "title": "Class CircleScrollView",
    "keywords": "Class CircleScrollView The CircleScrollView has circular scroll bar. it can be scrolled by bezel action. The CircleScrollView is extension of Xamarin.Forms.ScrollView. Inheritance ScrollView CircleScrollView Implements IRotaryFocusable Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleScrollView : ScrollView, IRotaryFocusable Implements IRotaryFocusable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Check.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Check.html",
    "title": "Class Check",
    "keywords": "Class Check The check widget allows for toggling a value between true and false. The check is extension of Xamarin.Forms.Switch. Inheritance Switch Check Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class Check : Switch Examples var check = new Check { HorizontalOptions = LayoutOptions.Center, VerticalOptions = LayoutOptions.Center, DisplayStyle = \"Onoff\" } Fields DisplayStyleProperty BindableProperty. Identifies the DisplayStyle bindable property. Declaration public static readonly BindableProperty DisplayStyleProperty Field Value Type Description BindableProperty Properties DisplayStyle Gets or sets display style of Check. Declaration public CheckDisplayStyle DisplayStyle { get; set; } Property Value Type Description CheckDisplayStyle"
  },
  "guide/InformationPopup.html": {
    "href": "guide/InformationPopup.html",
    "title": "InformationPopup",
    "keywords": "InformationPopup InformationPopup can represent 3 types of Tizen Wearable EFL popup style. InformationPopup is useful to show any information or warning. InformationPopup is displayed separately from any control. So you can't set this in XAML file. Single text Bottom button Progress Create single text InformationPopup Single text InformationPopup is used for displaying text. It is similar to Toast popup. But this popup doesn't disappear automatically. Text property can be set with text. BackButtonPressed event occurs when user press back button of the device. If you want to dismiss popup when this event occurred, you should add Dismiss() in BackButtonPressed event handle code. This guide's code example uses WearableUIGallery's TCInformationPopup code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCInformationPopup.xaml.cs For more information. Please refer to InformationPopup API reference C# file _textPopUp = new InformationPopup(); _textPopUp.Text = \"This is text popup test\"; _textPopUp.BackButtonPressed += (s, e) => { _textPopUp.Dismiss(); label1.Text = \"text popup is dismissed\"; }; Create bottom button InformationPopup You can set BottomButton property with MenuItem . The bottom button is used for confirmation of user. InformationPopup has Title property for displaying title. BottomButton.Clicked event occurs when user press bottom button. C# file var bottomButton = new MenuItem() { Text = \"OK\", Command = new Command(() => { /* must insert code when user press left button */ }) }; _textButtonPopUp = new InformationPopup(); _textButtonPopUp.Title = \"Popup title\"; _textButtonPopUp.Text = \"This is text and button popup test\"; _textButtonPopUp.BottomButton = bottomButton; _textButtonPopUp.BottomButton.Clicked += (s, e) => { _textButtonPopUp.Dismiss(); label1.Text = \"text&button is dismissed\"; }; Create progress InformationPopup InformationPopup has IsProgressRunning property. If this property sets true , small circle progress bar is displayed center of the screen. C# file _progressPopUp = new InformationPopup(); _progressPopUp.Title = \"Popup title\"; _progressPopUp.Text = \"This is progress test\"; _progressPopUp.IsProgressRunning = true;"
  },
  "guide/Check.html": {
    "href": "guide/Check.html",
    "title": "Check",
    "keywords": "Check Check provides Tizen Wearable specific CheckBox widget. Check accepts user input by the method of toggling. Check derives from Xamarin.Forms.Switch . Create Check You can easily add Check control with C# or XAML file. Tizen wearable device supports 3 styles of DisplayStyle ( Default , Onoff , Small ). Each shape of DisplayStyle depends on the device model. You can set the default value of check with IsToggled property. True value set Check selected. False value set Check unselected. Toggled event is raised when Check is toggled. You must add code for handling Toggled event. For more information. Please refer to below links Check API reference Xamarin.Forms.Switch API reference C# file var check = new Check { HorizontalOptions = LayoutOptions.Center, VerticalOptions = LayoutOptions.Center, DisplayStyle = \"Onoff\" } check.Toggled += (s, e) => { Console.WriteLine(\"Check is now {0}\", e.Value); } XAML file Refer to TCCheck code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCCeck.xaml <StackLayout Orientation=\"Vertical\"> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Default\" /> <w:Check DisplayStyle=\"Default\" HorizontalOptions=\"CenterAndExpand\" IsToggled=\"False\" Toggled=\"OnToggledDefault\" /> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Onoff\" /> <w:Check DisplayStyle=\"Onoff\" HorizontalOptions=\"FillAndExpand\" IsToggled=\"True\" Toggled=\"OnToggledOnOff\" /> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Small\" /> <w:Check DisplayStyle=\"Small\" HorizontalOptions=\"CenterAndExpand\" IsToggled=\"False\" Toggled=\"OnToggledSmall\" /> </StackLayout>"
  },
  "guide/ConfirmPopupEffect.html": {
    "href": "guide/ConfirmPopupEffect.html",
    "title": "ConfirmPopupEffect",
    "keywords": "ConfirmPopupEffect ConfirmPopupEffect is an Effect for Xamarin.Forms that is used to make the CirclePage have one button or two buttons. Accept button has one default, and \"Ok\" text is displayed in Accept as default. When ConfirmVisibility becomes True , it appears on the screen, The command given at the time of Accept or Cancel is executed and disappears automatically, and ConfirmVisibility becomes False . Also, when you touch the outside of the popup, the popup is automatically canceled. (Cancel command is performed similarly.) You can change the position by adjusting the X and Y value of Offset. If you want to display context popup separately from any control, please use ContextPopup instead. Adding popup with ConfirmPopupEffect at CirclePage You can set popup with ConfirmPopupEffect at CirclePage.Content . If you want to know how to add CirclePage , please refer to CirclePage guide . To create a new popup, use the following code. ConfirmPopupEffect has the following properties: AcceptCommand : System.Windows.Input.ICommand . Command to be executed when Accept CancelCommand : System.Windows.Input.ICommand . Command is executed at the time of cancellation, even if the popup disappears by selecting outside the popup. ConfirmVisibility : Popup appears if ConfirmVisibility is True, and disappears when it becomes False. CancelCommand works even if it disappears to False. PositionOption : Position type of popup BottomOfView : The popup appears at the bottom of the View using the Effect. The position is changed by Offset in the center of View. CenterOfParent : In the center of the screen, move by the Offset in the Popup. Absolute : The value of Offset is X, Y and popup is placed on the screen. Relative : Set Offset.X * Window.Width, Offset.Y * Window.Height. In the example below, a check with ConfirmPopupEffect in the StackLayout is set into the CirclePage . I have set the texts to be shown in AcceptText and CancelText , and defined the commands to execute when each item is selected in AcceptCommand and CancelCommand . Accept will change the background color to green and Cancel if it will be red. I set the position by assigning CenterOfParent to the PositionOption . ConfirmVisibility value set to be bound to IsToggled . BottomOfView CenterOfParent Absolute/Relative For more information. Please refer to below links ConfirmPopupEffect API reference Xamarin.Forms.RoutingEffect API reference Xamarin.Forms.Effect Guide This guide's code example use WearableUIGallery's TCConfirm.xaml and TCConfirm.xaml.cs code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCConfirm.xaml C# file [XamlCompilation(XamlCompilationOptions.Compile) public partial class TCConfirm : CirclePage { public TCConfirm () { AcceptedCommand = new Command(() => BackgroundColor = Color.Green); CancelCommand = new Command(() => BackgroundColor = Color.Red); InitializeComponent (); } public ICommand AcceptedCommand { get; private set; } public ICommand CancelCommand { get; private set; } } XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:CirclePage x:Class=\"WearableUIGallery.TC.TCConfirm\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" x:Name=\"mypage\"> <ContentPage.Content> <AbsoluteLayout> <w:Check x:Name=\"confirm3\" w:ConfirmPopupEffect.AcceptCommand=\"{Binding AcceptedCommand, Source={x:Reference mypage}}\" w:ConfirmPopupEffect.AcceptText=\"Yes\" w:ConfirmPopupEffect.CancelCommand=\"{Binding CancelCommand, Source={x:Reference mypage}}\" w:ConfirmPopupEffect.CancelText=\"No\" w:ConfirmPopupEffect.ConfirmVisibility=\"{Binding IsToggled, Source={x:Reference confirm3}, Mode=TwoWay}\" w:ConfirmPopupEffect.PositionOption=\"CenterOfParent\" AbsoluteLayout.LayoutBounds=\"0.5, 0.2, 1, 0.25\" AbsoluteLayout.LayoutFlags=\"All\" HorizontalOptions=\"CenterAndExpand\" IsToggled=\"False\" VerticalOptions=\"CenterAndExpand\"> <w:Check.Effects> <w:ConfirmPopupEffect /> </w:Check.Effects> </w:Check> </AbsoluteLayout> </ContentPage.Content> </w:CirclePage> Screenshot 1st scene with Check 2nd scene with ConfirmPopupEffect 3rd scene when selects 'Yes'"
  },
  "guide/Quickstart.html": {
    "href": "guide/Quickstart.html",
    "title": "Quickstart",
    "keywords": "Quickstart This guide shows how to create an application that represents Toast and CircleSlider . If a user presses the button, Toast pops up and then it automatically disappear after timeout seconds. And If a user rotates bezel of Tizen wearable device. CircleSlider bar is moving forward or backward direction. 1. Set up the development environment and Create a project Create Tizen Xamarin Forms App following to Tizen.org guide . In this guide project name is SampleCircleApp Select only wearable device at Tizen project wizard. Add myget( https://tizen.myget.org/F/dotnet/api/v3/index.json ) package source at Tools > Options > Nuget Package Manager > Pakage Sources. Search Xamarin.Forms NuGet package and install latest version(Minimum version required is 3.1.0.469394-pre1) via NuGet package manager. Package source is Nuget.org . Search Tizen.Wearable.CircularUI NuGet package and install latest version via NuGet package manager. Package source is myget . Install Tizen.Wearable.CircularUI NuGet at portable class library(PCL) project. 2. Insert CircularUI Control code Remove SampleCircleApp.cs that is generated automatically at PCL. and then add App.xaml and App.xaml.cs using add item. In App.xaml file, remove all of the template code and replace it with the following code. This code defines the user interface for the page. xmlns:w=clr-namespace:Tizen.Wearable.CircularUI.Forms : w prefix means Tizen.Wearable.CircularUI.Forms namespace. <w:CirclePage> : CirclePage derive from Xamarin.Forms.Page . This Page's content area has Label and Button . <w:CirclePage.CircleSurfaceItems> : CircleSliderSurfaceItem attached for CircleSurfaceItem of CirclePage . RotaryFocusTargetName is set slider name. CircleSliderSurfaceItem has rotary focus. CircleSliderSurfaceItem can receive a Rotary Event from the wearable device's bezel interaction. For more information. Please refer to CirclePage guide App.xaml file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <Application x:Class=\"SampleCircleApp.App\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:SimpleCircleApp\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <Application.MainPage> <NavigationPage x:Name=\"MainNavigation\"> <x:Arguments> <w:CirclePage x:Name=\"page\" NavigationPage.HasNavigationBar=\"False\" RotaryFocusTargetName=\"slider\"> <w:CirclePage.Content> <StackLayout HorizontalOptions=\"Center\" Orientation=\"Vertical\" VerticalOptions=\"Center\"> <Label HorizontalTextAlignment=\"Center\" Text=\"Welcome to Xamarin Forms!\" /> <Button Clicked=\"OnButtonClicked\" Text=\"show toast\" /> </StackLayout> </w:CirclePage.Content> <w:CirclePage.CircleSurfaceItems> <w:CircleSliderSurfaceItem x:Name=\"slider\" Increment=\"0.5\" IsVisible=\"True\" Maximum=\"15\" Minimum=\"0\" Value=\"3\" /> </w:CirclePage.CircleSurfaceItems> </w:CirclePage> </x:Arguments> </NavigationPage> </Application.MainPage> </Application> In App.xaml.cs, remove all of the template code and replace it with the following code. OnButtonClicked is event handler of Button Clicked event. below code simply display Toast popup during 3 seconds. App.xaml.cs file using Tizen.Wearable.CircularUI.Forms; using System; using Xamarin.Forms; using Xamarin.Forms.Xaml; namespace SampleCircleApp { [XamlCompilation(XamlCompilationOptions.Compile)] public partial class App : Application { public App() { InitializeComponent(); } public void OnButtonClicked(object sender, EventArgs e) { Toast.DisplayText(\"Toast popup\", 3000); } } } For initializing CircularUI instance. Please insert FormsCircularUI.Init() code in the Main method at SampleCircleApp.Tizen.Wearable.cs . You should import Tizen.Wearable.CircularUI.Forms.Renderer with using directives. SampleCircleApp.Tizen.Wearable.cs file using Tizen.Wearable.CircularUI.Forms.Renderer; static void Main(string[] args) { var app = new Program(); global::Xamarin.Forms.Platform.Tizen.Forms.Init(app); FormsCircularUI.Init(); //must insert this initialize code app.Run(args); } 3. Build and then launch your application. Build the solution. In the Visual Studio menu, select Build > Build Solution. In the Solution Explorer view, right-click the solution name and select Build. Launch Tizen Emulator Press Launch Tizen Emulator button, refer to below image In Windows OS. copy application tpk from project binary path to sdb tool path.\\ SampleCircleApp tpk locate in ProjectPath\\SampleCircleApp.Tizen.Wearable\\bin\\Debug\\tizen40\\org.tizen.example.SampleCircleApp.Tizen.Wearable-1.0.0.tpk .\\ You can verify your project path. In the Solution Explorer view, right-click the solution name and press open folder in file explorer menu. sdb tool located in c:\\tizen\\tools\\sdb.exe ) If your OS is the window, launch Tizen Sdb Command Prompt(Tool > Tizen > Tizen Sdb Command Prompt). If you use Linux. you can use sdb command directly in your project path. Install your app with sdb command sdb install org.tizen.example.SampleCircleApp.Tizen.Wearable-1.0.0.tpk Check your App at Wearable emulator"
  },
  "guide/IRotaryEventReceiver.html": {
    "href": "guide/IRotaryEventReceiver.html",
    "title": "IRotaryEventReceiver",
    "keywords": "IRotaryEventReceiver IRotaryEventReceiver is a receiver interface to take a rotary event. IRotaryEventReceiver has Rotate(RotaryEventArgs) method that is called when rotary event is occurred. You can simply handle of rotary event using this interface. Such as below sample, you can easily rotate image according to bezel rotation. Adding IRotaryEventReceiver Add IRotaryEventReceiver interface to CirclePage or Page having CircleSurfaceEffectBehavior . Implement Rotate() method to control a rotary event. RotaryEventArgs is event argument for the Rotary Event. RotaryEventArgs.IsClockwise gets the direction of bezel rotation. If the device has rotated in the clockwise direction, IsClockwise is true . Below sample receives rotary event at Rotate() method and add angle of the image following to rotary event direction. And then rotate the image. This guide's code example uses WearableUIGallery's TCIRotaryEventReceiver code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCIRotaryEventReceiver.xaml For more information. Please refer to IRotaryEventReceiver API reference C# file [XamlCompilation(XamlCompilationOptions.Compile)] public partial class TCIRotaryEventReceiver : CirclePage, IRotaryEventReceiver { bool _rotating; double _angle; public TCIRotaryEventReceiver () { InitializeComponent (); _angle = 0; } public void Rotate(RotaryEventArgs args) { if (_rotating) return; _rotating = true; _angle += args.IsClockwise ? 30 : -30; Cat.RotateTo(_angle).ContinueWith( (b) => { _rotating = false; if (_angle == 360) { Cat.Rotation = 0; _angle = 0; } }); } } XAML file <w:CirclePage.Content> <Image x:Name=\"Cat\" Source=\"image/cat360.png\" /> </w:CirclePage.Content>"
  },
  "guide/CircleListView.html": {
    "href": "guide/CircleListView.html",
    "title": "CircleListView",
    "keywords": "CircleListView CircleListView is a view for presenting lists of data, especially long lists that require scrolling. It is an extension of Xamarin.Forms.ListView . Same as Xamarin.Forms.ListView , but Scroller is rendered to CircleSurface . You can move the list by Bezel interaction and Drag . In order to receive Rotary event , it must be registered as RotaryFocusObject property of CirclePage . Normal list Group list 2 texts and 1 icon list Components Header : Text or view to display at the beginning of a list Cells : Data in a CircleListView is presented in cells. Each cell corresponds to a row of data. Footer : Text or view to display at end of a list WARNING: CircleListView , CircleDateTimeSelector , CircleScrollView , CircleStepper must be contained by CirclePage or CircleSurfaceEffectBehavior should be added in Behaviors of Page that contains these controls. If other pages contain these controls, it may cause exception or can't display control. Adding CircleListView at CirclePage You can set CircleListView at CirclePage.Content . If you want to know how to add CirclePage , please refer to CirclePage guide . The following XAML code shows CirclePage with CircleListView . RotaryFocusTargetName attribute sets the currently focused control that is handled by rotating and display the focused control's circle object. If you don't set this value properly, control can't receive the Rotary Event . You can set the Header and/or Footer to a simple text, or you can set them to a more complex layout. There are also HeaderTemplate and FooterTemplate properties that let you create more complex layouts for the header and footer that support data binding. The example below has cells, header, footer. And use the DataTemplate to format a data object for display. For more information. Please refer to below links CircleListView API reference Xamarin.Forms.ListView API reference Xamarin.Forms.ListView Guide This guide's code example use WearableUIGallery's TCCircleListView.xaml code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCCircleListView.xaml XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:CirclePage x:Class=\"WearableUIGallery.TC.TCCircleListView\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" RotaryFocusTargetName=\"mylist\"> <w:CirclePage.Content> <w:CircleListView x:Name=\"mylist\"> <w:CircleListView.ItemsSource> <x:Array x:Key=\"array\" Type=\"{x:Type sys:String}\"> <x:String>Item 1</x:String> <x:String>Item 2</x:String> <x:String>Item 3</x:String> <x:String>Item 4</x:String> <x:String>Item 5</x:String> <x:String>Item 6</x:String> <x:String>Item 7</x:String> <x:String>Item 8</x:String> <x:String>Item 9</x:String> <x:String>Item 10</x:String> <x:String>Item 11</x:String> <x:String>Item 12</x:String> </x:Array> </w:CircleListView.ItemsSource> <w:CircleListView.Header> <x:String>Header</x:String> </w:CircleListView.Header> <w:CircleListView.Footer> <x:String>Footer</x:String> </w:CircleListView.Footer> <w:CircleListView.ItemTemplate> <DataTemplate> <TextCell Text=\"{Binding .}\" /> </DataTemplate> </w:CircleListView.ItemTemplate> <w:CircleListView.HeaderTemplate> <DataTemplate> <Label FontAttributes=\"Bold\" FontSize=\"Large\" HorizontalTextAlignment=\"Center\" Text=\"{Binding .}\" TextColor=\"Red\" /> </DataTemplate> </w:CircleListView.HeaderTemplate> <w:CircleListView.FooterTemplate> <DataTemplate> <Label FontAttributes=\"Bold\" FontSize=\"Large\" HorizontalTextAlignment=\"Center\" Text=\"{Binding .}\" TextColor=\"Blue\" /> </DataTemplate> </w:CircleListView.FooterTemplate> </w:CircleListView> </w:CirclePage.Content> </w:CirclePage> Adding Group List as list contents You can add group list as contents of CircleListView . To enable grouping: Create a list of List<>. Set ItemsSource to that list. Set IsGroupingEnabled to true. Set GroupDisplayBinding to bind to the property of the groups that is being used as the title of the group. This guide's code example uses WearableUIGallery's TCGroupList code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCGroupList.xaml C# file namespace WearableUIGallery.TC { ... public class GroupModel : List<NamedList<string>> { public GroupModel() { Add(new NamedList<string>(\"group1\") { \"Aaliyah\", \"Aamir\", \"Aaralyn \", \"Aaron\", \"Abagail\", \"Babitha\", \"Bahuratna\", \"Bandana\", \"Bulbul\", \"Cade\", \"Caldwell\" }); Add(new NamedList<string>(\"group2\") { \"Chandan\", \"Caster\", \"Dagan \", \"Daulat\", \"Dag\", \"Earl\", \"Ebenzer\", \"Ellison\", \"Elizabeth\", \"Filbert\", \"Fitzpatrick\", \"Florian\", \"Fulton\" }); Add(new NamedList<string>(\"group3\") { \"Frazer\", \"Gabriel\", \"Gage\", \"Galen\", \"Garland\", \"Gauhar\", \"Hadden\", \"Hafiz\", \"Hakon\", \"Haleem\", \"Hank\", \"Hanuman\" }); Add(new NamedList<string>(\"group4\") { \"Jabali \", \"Jaimini\", \"Jayadev\", \"Jake\", \"Jayatsena\", \"Jonathan\", \"Kamaal\", \"Jeirk\", \"Jasper\", \"Jack\", \"Mac\", \"Macy\", \"Marlon\", \"Milson\" }); } } public class NamedList<T> : List<T> { public NamedList(string name) => Name = name; public string Name { get; set; } }} XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:CirclePage x:Class=\"WearableUIGallery.TC.TCGroupList\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery.TC\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <w:CirclePage.BindingContext> <local:GroupModel /> </w:CirclePage.BindingContext> <w:CirclePage.Content> <w:CircleListView x:Name=\"mylist\" GroupDisplayBinding=\"{Binding Name}\" IsGroupingEnabled=\"True\" ItemsSource=\"{Binding .}\"> <w:CircleListView.Header> <x:String>TITLE</x:String> </w:CircleListView.Header> <w:CircleListView.HeaderTemplate> <DataTemplate> <Label FontAttributes=\"Bold\" FontSize=\"10\" HeightRequest=\"120\" HorizontalTextAlignment=\"Center\" Text=\"{Binding .}\" TextColor=\"#6CC3F1\" /> </DataTemplate> </w:CircleListView.HeaderTemplate> </w:CircleListView> </w:CirclePage.Content> </w:CirclePage> Adding a list with 2 texts and 1 icon as list contents You can add a list with 2 texts and 1 icon as contents of CircleListView . This can easily be done using ViewCell . ViewCell is nested inside a DataTemplate , which is inside CircleListView.ItemTemplate . The Layout of ViewCell is managed by a StackLayout . You can place it in the StackLayout with your desired configuration. This guide's code example uses XUIComponent's CircleList of Style2text1icon1 code at the sample\\XUIComponents\\UIComponents\\UIComponents\\Samples\\CircleList/ListViewModel.cs and Style2text1icon1.xaml C# file namespace WearableUIGallery.TC { public class ListViewModel : INotifyPropertyChanged { static List<string> _names = new List<string> { \"Aaliyah\", \"Aamir\", \"Aaralyn\", \"Aaron\", \"Abagail\", \"Babitha\", \"Bahuratna\", \"Bandana\", \"Bulbul\", \"Cade\", \"Caldwell\", \"Chandan\", \"Caster\", \"Dagan \", \"Daulat\", \"Dag\", \"Earl\", \"Ebenzer\", \"Ellison\", \"Elizabeth\", \"Filbert\", \"Fitzpatrick\", \"Florian\", \"Fulton\", \"Frazer\", \"Gabriel\", \"Gage\", \"Galen\", \"Garland\", \"Gauhar\", \"Hadden\", \"Hafiz\", \"Hakon\", \"Haleem\", \"Hank\", \"Hanuman\", \"Jabali \", \"Jaimini\", \"Jayadev\", \"Jake\", \"Jayatsena\", \"Jonathan\", \"Kamaal\", \"Jeirk\", \"Jasper\", \"Jack\", \"Mac\", \"Macy\", \"Marlon\", \"Milson\" }; ... public List<string> Names => _names; public ObservableCollection<CheckableName> CheckableNames { get; private set; } public int CheckedNamesCount { get => _checkedNamesCount; private set { if (_checkedNamesCount != value) { _checkedNamesCount = value; OnPropertyChanged(); UpdateSelectOptionMessage(); } } } public ListViewModel() { CheckableNames = new ObservableCollection<CheckableName>(); foreach (var name in _names) { var data = new CheckableName(name, false); data.PropertyChanged += (s, e) => { if (e.PropertyName == \"Checked\") { CheckedNamesCount += data.Checked ? 1 : -1; } }; CheckableNames.Add(data); } ... } } public class CheckableName : INotifyPropertyChanged { string _name; bool _checked; public CheckableName(string name, bool isChecked) { _name = name; _checked = isChecked; } public event PropertyChangedEventHandler PropertyChanged; public string Name { get => _name; set { if (_name != value) { _name = value; OnPropertyChanged(); } } } public bool Checked { get => _checked; set { if (_checked != value) { _checked = value; OnPropertyChanged(); } } } ... } XAML file <w:CirclePage x:Class=\"UIComponents.Samples.CircleList.Style2text1icon1\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:UIComponents.Samples.CircleList\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" RotaryFocusTargetName=\"mylist\"> <w:CirclePage.BindingContext> <local:ListViewModel /> </w:CirclePage.BindingContext> <w:CirclePage.Content> <w:CircleListView x:Name=\"mylist\" ItemsSource=\"{Binding Names}\"> <w:CircleListView.ItemTemplate> <DataTemplate> <ViewCell> <StackLayout HeightRequest=\"120\" HorizontalOptions=\"FillAndExpand\" Orientation=\"Horizontal\" VerticalOptions=\"FillAndExpand\" WidthRequest=\"360\"> <StackLayout HorizontalOptions=\"CenterAndExpand\" Orientation=\"Vertical\" VerticalOptions=\"Center\"> <Label FontSize=\"8\" HorizontalOptions=\"Center\" HorizontalTextAlignment=\"Center\" Text=\"{Binding ., StringFormat='elm.text:{0}'}\" VerticalOptions=\"Center\" VerticalTextAlignment=\"Center\" /> <Label FontSize=\"5\" HorizontalOptions=\"Center\" HorizontalTextAlignment=\"Center\" Text=\"{Binding ., StringFormat='elm.text.1:{0}'}\" VerticalOptions=\"Center\" VerticalTextAlignment=\"Center\" /> </StackLayout> <w:Check DisplayStyle=\"Default\" HorizontalOptions=\"End\" VerticalOptions=\"Center\" /> </StackLayout> </ViewCell> </DataTemplate> </w:CircleListView.ItemTemplate> </w:CircleListView> </w:CirclePage.Content> </w:CirclePage>"
  },
  "index.html": {
    "href": "index.html",
    "title": "Tizen CircularUI",
    "keywords": "Tizen CircularUI The Tizen CircularUI is a set of helpful extensions to the Xamarin Forms framework on the Samsung Gear device. The binaries are available via NuGet (package name CircularUI) with the source available here. Controls Name Description Check A subclass of Xamarin.Forms.Switch control with some different styles. CircleDateTimeSelector A control to select date or time fits in the circular screen. CircleListView A subclass of Xamarin.Forms.ListView control fits in the circular screen. CirclePage A subclass of Xamarin.Forms.Page that can show Circular ProgressBar and Circular Slider and the button on the bottom of the screen. it can also show MenuItems on the circular menu.(MoreOption) CircleProgressBarSurfaceItem A control fits in the circular screen. it can be shown in CirclePage only. CircleSliderSurfaceItem A Slider control that responds to the bezel action and fits in the circular screen. CircleScrollView A subclass of Xamarin.Forms.ScrollView that can be scrolled by the bezel action. CircleStackLayout A container to layout children linear in the circular area. CircleStepper A control to select a number of steps fits in the circular screen. CircleSurfaceEffectBehavior The CircleSurfaceEffectBehavior is an effect which allows you to insert views that require CircleSurface. ConfirmationPopup A popup has two button in left and right side of the circular screen. ConfirmPopupEffect The effect to show a small popup has one or two buttons sticky with any control. ContextPopup A context popup fits in the circular screen. IndexPage A subclass of multiple Pages that can slide child page horizontal and has dots on top of the screen for the number of child pages. InformationPopup A popup has a control to show progress and one button in the bottom side of the circular screen. IRotaryEventReceiver A event receiver for using the bezel action. Radio A radio control fits in the circular screen. PopupEntry The PopupEntry is a class that extends Xamarin.Forms.Entry. It makes a new layer when editing text on the entry. Toast A popup for simple feedback. TwoButtonPage A subclass of Xamarin.Forms.Page has two buttons on the left and right side of the circular screen."
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleProgressBarSurfaceItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleProgressBarSurfaceItem.html",
    "title": "Class CircleProgressBarSurfaceItem",
    "keywords": "Class CircleProgressBarSurfaceItem The CircleProgressBarSurfaceItem displays circular progressbar at CirclePage. Inheritance Element CircleSurfaceItem CircleProgressBarSurfaceItem Implements ICircleSurfaceItem Inherited Members CircleSurfaceItem.BackgroundAngleProperty CircleSurfaceItem.BackgroundAngleOffsetProperty CircleSurfaceItem.BackgroundColorProperty CircleSurfaceItem.BackgroundLineWidthProperty CircleSurfaceItem.BackgroundRadiusProperty CircleSurfaceItem.BarAngleProperty CircleSurfaceItem.BarAngleOffsetProperty CircleSurfaceItem.BarAngleMaximumProperty CircleSurfaceItem.BarAngleMinimumProperty CircleSurfaceItem.BarColorProperty CircleSurfaceItem.BarLineWidthProperty CircleSurfaceItem.BarRadiusProperty CircleSurfaceItem.IsVisibleProperty CircleSurfaceItem.IsEnabledProperty CircleSurfaceItem.BackgroundAngle CircleSurfaceItem.BackgroundAngleOffset CircleSurfaceItem.BackgroundColor CircleSurfaceItem.BackgroundLineWidth CircleSurfaceItem.BackgroundRadius CircleSurfaceItem.BarAngle CircleSurfaceItem.BarAngleOffset CircleSurfaceItem.BarAngleMaximum CircleSurfaceItem.BarAngleMinimum CircleSurfaceItem.BarColor CircleSurfaceItem.BarLineWidth CircleSurfaceItem.BarRadius CircleSurfaceItem.IsVisible CircleSurfaceItem.IsEnabled Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleProgressBarSurfaceItem : CircleSurfaceItem, ICircleSurfaceItem Fields ValueProperty BindableProperty. Identifies the Value bindable property. Declaration public static readonly BindableProperty ValueProperty Field Value Type Description BindableProperty Properties Value Gets or sets the value of the progressbar. Declaration public double Value { get; set; } Property Value Type Description System.Double Implements ICircleSurfaceItem"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.PopupEntryRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.PopupEntryRenderer.html",
    "title": "Class PopupEntryRenderer",
    "keywords": "Class PopupEntryRenderer Inheritance EntryRenderer PopupEntryRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class PopupEntryRenderer : EntryRenderer Constructors PopupEntryRenderer() Declaration public PopupEntryRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing OnElementChanged(ElementChangedEventArgs<Entry>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<Entry> e) Parameters Type Name Description ElementChangedEventArgs < Entry > e"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleStackLayout.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleStackLayout.html",
    "title": "Class CircleStackLayout",
    "keywords": "Class CircleStackLayout Inheritance StackLayout CircleStackLayout Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleStackLayout : StackLayout Methods LayoutChildren(Double, Double, Double, Double) Declaration protected override void LayoutChildren(double x, double y, double width, double height) Parameters Type Name Description System.Double x System.Double y System.Double width System.Double height OnMeasure(Double, Double) Declaration protected override SizeRequest OnMeasure(double widthConstraint, double heightConstraint) Parameters Type Name Description System.Double widthConstraint System.Double heightConstraint Returns Type Description SizeRequest"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.FormsCircularUI.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.FormsCircularUI.html",
    "title": "Class FormsCircularUI",
    "keywords": "Class FormsCircularUI Inheritance System.Object FormsCircularUI Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public static class FormsCircularUI : object Properties IsInitialized Declaration public static bool IsInitialized { get; } Property Value Type Description System.Boolean Methods Init() Declaration public static void Init()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.IRotaryEventReceiver.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.IRotaryEventReceiver.html",
    "title": "Interface IRotaryEventReceiver",
    "keywords": "Interface IRotaryEventReceiver The IRotaryEventReceiver is a receiver interface to take Rotary Events Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public interface IRotaryEventReceiver : IRotaryFocusable Methods Rotate(RotaryEventArgs) Rotate it by the RotaryEventArgs value. Declaration void Rotate(RotaryEventArgs args) Parameters Type Name Description RotaryEventArgs args Rotated direction of Rotary device"
  },
  "api/Tizen.Wearable.CircularUI.Forms.InformationPopup.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.InformationPopup.html",
    "title": "Class InformationPopup",
    "keywords": "Class InformationPopup Inheritance BindableObject InformationPopup Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class InformationPopup : BindableObject Constructors InformationPopup() Declaration public InformationPopup() Fields BottomButtonProperty BindableProperty. Identifies the first button bindable property. Declaration public static readonly BindableProperty BottomButtonProperty Field Value Type Description BindableProperty IsProgressRunningProperty BindableProperty. Identifies the IsProgressRunning bindable property. Declaration public static readonly BindableProperty IsProgressRunningProperty Field Value Type Description BindableProperty TextProperty BindableProperty. Identifies the title bindable property. Declaration public static readonly BindableProperty TextProperty Field Value Type Description BindableProperty TitleProperty BindableProperty. Identifies the title bindable property. Declaration public static readonly BindableProperty TitleProperty Field Value Type Description BindableProperty Properties BottomButton Gets or sets bottom button of the Popup. Declaration public MenuItem BottomButton { get; set; } Property Value Type Description MenuItem IsProgressRunning Gets or sets progress visibility of the Popup. If this value is true. Popup displays circular progress and hides Title automatically. Declaration public bool IsProgressRunning { get; set; } Property Value Type Description System.Boolean Text Gets or sets text of the Popup. Declaration public string Text { get; set; } Property Value Type Description System.String Title Gets or sets title of the Popup. Declaration public string Title { get; set; } Property Value Type Description System.String Methods Dismiss() Dismisses the ConfirmationPopup. Declaration public void Dismiss() Show() Shows the Popup. Declaration public void Show() Events BackButtonPressed Occurs when the device's back button is pressed. Declaration public event EventHandler BackButtonPressed Event Type Type Description EventHandler"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleDateTimeSelectorRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleDateTimeSelectorRenderer.html",
    "title": "Class CircleDateTimeSelectorRenderer",
    "keywords": "Class CircleDateTimeSelectorRenderer Inheritance ViewRenderer < CircleDateTimeSelector , ElmSharp.Wearable.CircleDateTimeSelector > CircleDateTimeSelectorRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleDateTimeSelectorRenderer : ViewRenderer<CircleDateTimeSelector, ElmSharp.Wearable.CircleDateTimeSelector> Constructors CircleDateTimeSelectorRenderer() Declaration public CircleDateTimeSelectorRenderer() Methods Measure(Int32, Int32) Declaration protected override ElmSharp.Size Measure(int availableWidth, int availableHeight) Parameters Type Name Description System.Int32 availableWidth System.Int32 availableHeight Returns Type Description ElmSharp.Size MinimumSize() Declaration protected override Xamarin.Forms.Size MinimumSize() Returns Type Description Xamarin.Forms.Size OnElementChanged(ElementChangedEventArgs<CircleDateTimeSelector>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<CircleDateTimeSelector> e) Parameters Type Name Description ElementChangedEventArgs < CircleDateTimeSelector > e"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CirclePageRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CirclePageRenderer.html",
    "title": "Class CirclePageRenderer",
    "keywords": "Class CirclePageRenderer Inheritance VisualElementRenderer < CirclePage > CirclePageRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CirclePageRenderer : VisualElementRenderer<CirclePage> Constructors CirclePageRenderer() Declaration public CirclePageRenderer() Properties CircleSurface Declaration public ElmSharp.Wearable.CircleSurface CircleSurface { get; } Property Value Type Description ElmSharp.Wearable.CircleSurface Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing OnElementChanged(ElementChangedEventArgs<CirclePage>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<CirclePage> e) Parameters Type Name Description ElementChangedEventArgs < CirclePage > e UpdateBackgroundColor(Boolean) Declaration protected override void UpdateBackgroundColor(bool initialize) Parameters Type Name Description System.Boolean initialize UpdateBackgroundImage(Boolean) Declaration protected void UpdateBackgroundImage(bool initialize) Parameters Type Name Description System.Boolean initialize"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleListViewRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleListViewRenderer.html",
    "title": "Class CircleListViewRenderer",
    "keywords": "Class CircleListViewRenderer Inheritance ViewRenderer < CircleListView , CircleListView > CircleListViewRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleListViewRenderer : ViewRenderer<CircleListView, CircleListView> Constructors CircleListViewRenderer() Declaration public CircleListViewRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing OnElementChanged(ElementChangedEventArgs<CircleListView>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<CircleListView> e) Parameters Type Name Description ElementChangedEventArgs < CircleListView > e"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ConfirmPopupEffect.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ConfirmPopupEffect.html",
    "title": "Class ConfirmPopupEffect",
    "keywords": "Class ConfirmPopupEffect The ConfirmPopupEffect is an effect that is proportional to a particular widget or has one or two buttons anywhere on the screen Inheritance RoutingEffect ConfirmPopupEffect Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class ConfirmPopupEffect : RoutingEffect Constructors ConfirmPopupEffect() Creates and initializes a new instance of the ConfirmPopupEffect class Declaration public ConfirmPopupEffect() Fields AcceptCommandParameterProperty BindableProperty. Identifies the AcceptCommandParameter bindable property. Declaration public static BindableProperty AcceptCommandParameterProperty Field Value Type Description BindableProperty AcceptCommandProperty BindableProperty. Identifies the AcceptCommand bindable property. AcceptCommand is executed when the Accept button is pressed. Declaration public static BindableProperty AcceptCommandProperty Field Value Type Description BindableProperty AcceptTextProperty BindableProperty. Identifies the AcceptText bindable property. AcceptText is to use as Accept button Declaration public static BindableProperty AcceptTextProperty Field Value Type Description BindableProperty CancelCommandParameterProperty BindableProperty. Identifies the CancelCommandParameter bindable property. Declaration public static BindableProperty CancelCommandParameterProperty Field Value Type Description BindableProperty CancelCommandProperty BindableProperty. Identifies the CancelCommand bindable property. CancelCommand is executed when the Cancel button is pressed, even if the popup disappears by selecting outside the popup. Declaration public static BindableProperty CancelCommandProperty Field Value Type Description BindableProperty CancelTextProperty BindableProperty. Identifies the CancelText bindable property. CancelText is to use as Cancel button Declaration public static BindableProperty CancelTextProperty Field Value Type Description BindableProperty ConfirmVisibilityProperty BindableProperty. Identifies the ConfirmVisibility bindable property. Popup appears if ConfirmVisibility is True, and disappears when it becomes False. CancelCommand works even if it disappears to False. Declaration public static BindableProperty ConfirmVisibilityProperty Field Value Type Description BindableProperty OffsetProperty BindableProperty. Identifies the Offset bindable property. Offset is a value of how far to move from the base tap position represented by the PositionOption type. If it isn't set, it returns 0,0. Declaration public static BindableProperty OffsetProperty Field Value Type Description BindableProperty PositionOptionProperty BindableProperty. Identifies the PositionOption bindable property. Declaration public static BindableProperty PositionOptionProperty Field Value Type Description BindableProperty Methods GetAcceptCommand(BindableObject) Gets command that is executed when the Accept button is pressed. Declaration public static ICommand GetAcceptCommand(BindableObject obj) Parameters Type Name Description BindableObject obj Binded object Returns Type Description ICommand Command of Accept button GetAcceptCommandParameter(BindableObject) Gets command paramter that is executed when the Accept button is pressed. Declaration public static object GetAcceptCommandParameter(BindableObject obj) Parameters Type Name Description BindableObject obj Binded object Returns Type Description System.Object Command parameter of Accept button GetAcceptText(BindableObject) Gets text of Accept button Declaration public static string GetAcceptText(BindableObject obj) Parameters Type Name Description BindableObject obj Binded object Returns Type Description System.String Text of Accept button GetCancelCommand(BindableObject) Gets command that is executed when the Cancel button is pressed, even if the popup disappears by selecting outside the popup. Declaration public static ICommand GetCancelCommand(BindableObject obj) Parameters Type Name Description BindableObject obj Binded object Returns Type Description ICommand Command of Cancel button GetCancelCommandParameter(BindableObject) Gets command paramter that is executed when the Cancel button is pressed, even if the popup disappears by selecting outside the popup. Declaration public static object GetCancelCommandParameter(BindableObject obj) Parameters Type Name Description BindableObject obj Binded object Returns Type Description System.Object Command parameter of Cancel button GetCancelText(BindableObject) Gets text of Cancel button Declaration public static string GetCancelText(BindableObject obj) Parameters Type Name Description BindableObject obj Binded object Returns Type Description System.String Text of Cancel button GetConfirmVisibility(BindableObject) Gets visibility of Confirmation popup. Popup appears if ConfirmVisibility is True, and disappears when it becomes False. CancelCommand works even if it disappears to False. Declaration public static bool GetConfirmVisibility(BindableObject obj) Parameters Type Name Description BindableObject obj Binded object Returns Type Description System.Boolean Visibility of Confirmation popup GetOffset(BindableObject) Gets offset. Offset is a value of how far to move from the base tap position represented by the PositionOption type. If it isn't set, it returns 0,0. Declaration public static Point GetOffset(BindableObject obj) Parameters Type Name Description BindableObject obj Binded object Returns Type Description Point A value of how far to move from the base tap position represented by the PositionOption type GetPositionOption(BindableObject) Gets position type of popup Declaration public static PositionOption GetPositionOption(BindableObject obj) Parameters Type Name Description BindableObject obj Binded object Returns Type Description PositionOption Position type of popup SetAcceptCommand(BindableObject, ICommand) Sets command that is executed when the Accept button is pressed. Declaration public static void SetAcceptCommand(BindableObject obj, ICommand value) Parameters Type Name Description BindableObject obj Binded object ICommand value Command of Accept button SetAcceptCommandParameter(BindableObject, Object) Sets command parameter that is executed when the Accept button is pressed. Declaration public static void SetAcceptCommandParameter(BindableObject obj, object value) Parameters Type Name Description BindableObject obj Binded object System.Object value Command parameter of Accept button SetAcceptText(BindableObject, String) Sets text of Accept button Declaration public static void SetAcceptText(BindableObject obj, string value) Parameters Type Name Description BindableObject obj Binded object System.String value Text of Accept button SetCancelCommand(BindableObject, ICommand) Sets command that is executed when the Cancel button is pressed, even if the popup disappears by selecting outside the popup. Declaration public static void SetCancelCommand(BindableObject obj, ICommand value) Parameters Type Name Description BindableObject obj Binded object ICommand value Command of Cancel button SetCancelCommandParameter(BindableObject, Object) Sets command paramter that is executed when the Cancel button is pressed, even if the popup disappears by selecting outside the popup. Declaration public static void SetCancelCommandParameter(BindableObject obj, object value) Parameters Type Name Description BindableObject obj Binded object System.Object value Command parameter of Cancel button SetCancelText(BindableObject, String) Sets text of Cancel button Declaration public static void SetCancelText(BindableObject obj, string value) Parameters Type Name Description BindableObject obj Binded object System.String value Text of Cancel button SetConfirmVisibility(BindableObject, Boolean) Sets visibility of Confirmation popup. Popup appears if ConfirmVisibility is True, and disappears when it becomes False. CancelCommand works even if it disappears to False. Declaration public static void SetConfirmVisibility(BindableObject obj, bool value) Parameters Type Name Description BindableObject obj Binded object System.Boolean value Visibility of Confirmation popup SetOffset(BindableObject, Point) Sets offset. Offset is a value of how far to move from the base tap position represented by the PositionOption type. Declaration public static void SetOffset(BindableObject obj, Point value) Parameters Type Name Description BindableObject obj Binded object Point value A value of how far to move from the base tap position represented by the PositionOption type SetPositionOption(BindableObject, PositionOption) Sets position type of popup Declaration public static void SetPositionOption(BindableObject obj, PositionOption value) Parameters Type Name Description BindableObject obj Binded object PositionOption value Position type of popup"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleSurfaceEffectBehavior.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleSurfaceEffectBehavior.html",
    "title": "Class CircleSurfaceEffectBehavior",
    "keywords": "Class CircleSurfaceEffectBehavior The CircleSurfaceEffectBehavior is an effect which allows you to insert views that require CircleSurface. Inheritance Behavior < Page > CircleSurfaceEffectBehavior Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleSurfaceEffectBehavior : Behavior<Page> Properties RotaryFocusObject Gets object of RotaryFocusObject to receive bezel action(take a rotary event) from the current page. Declaration public IRotaryFocusable RotaryFocusObject { get; set; } Property Value Type Description IRotaryFocusable RotaryFocusTargetName Gets or sets target name of RotaryFocusObject. If RotaryFocusTargetName is set, it registers only a consumer in the RotaryFocusObject property to receive bezel action (take a rotary event) from the current page Declaration public string RotaryFocusTargetName { set; } Property Value Type Description System.String Methods OnAttachedTo(Page) Declaration protected override void OnAttachedTo(Page page) Parameters Type Name Description Page page OnDetachingFrom(Page) Declaration protected override void OnDetachingFrom(Page page) Parameters Type Name Description Page page"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.TwoButtonPageRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.TwoButtonPageRenderer.html",
    "title": "Class TwoButtonPageRenderer",
    "keywords": "Class TwoButtonPageRenderer Inheritance VisualElementRenderer < TwoButtonPage > TwoButtonPageRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class TwoButtonPageRenderer : VisualElementRenderer<TwoButtonPage> Constructors TwoButtonPageRenderer() Declaration public TwoButtonPageRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing GetNativeContentGeometry() Declaration public override Rect GetNativeContentGeometry() Returns Type Description Rect OnElementChanged(ElementChangedEventArgs<TwoButtonPage>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<TwoButtonPage> e) Parameters Type Name Description ElementChangedEventArgs < TwoButtonPage > e UpdateBackgroundColor(Boolean) Declaration protected override void UpdateBackgroundColor(bool initialize) Parameters Type Name Description System.Boolean initialize UpdateLayout() Declaration protected override void UpdateLayout()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CheckRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CheckRenderer.html",
    "title": "Class CheckRenderer",
    "keywords": "Class CheckRenderer Inheritance SwitchRenderer CheckRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CheckRenderer : SwitchRenderer Constructors CheckRenderer() Declaration public CheckRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing OnElementChanged(ElementChangedEventArgs<Switch>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<Switch> e) Parameters Type Name Description ElementChangedEventArgs < Switch > e"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.html",
    "title": "Namespace Tizen.Wearable.CircularUI.Forms.Renderer",
    "keywords": "Namespace Tizen.Wearable.CircularUI.Forms.Renderer Classes CheckRenderer CircleDateTimeSelectorRenderer CircleListView CircleListViewRenderer CirclePageRenderer CircleSliderSurfaceItemImplements CircleStepperRenderer CircleSurfaceNotFoundException ConfirmationPopupImplementation FormsCircularUI HeaderOrFooterItemClass IndexPageRenderer InformationPopupImplementation ListViewCache PaddingItemClass PopupEntryRenderer RadioRenderer TizenCircleSurfaceEffect TizenConfirmPopupEffect TwoButtonPageRenderer TwoButtonPageWidget"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleToolbarItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleToolbarItem.html",
    "title": "Class CircleToolbarItem",
    "keywords": "Class CircleToolbarItem The CircleToolbarItem is a class that extends Xamarin.Forms.ToolbarItem for Circular UI. Inheritance ToolbarItem CircleToolbarItem Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleToolbarItem : ToolbarItem Fields SubTextProperty BindableProperty. Identifies the Subtext bindable property to display on the menu item. Declaration public static readonly BindableProperty SubTextProperty Field Value Type Description BindableProperty Properties SubText Gets or sets Subtext to display on the menu item Declaration public string SubText { get; set; } Property Value Type Description System.String"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleStepper.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleStepper.html",
    "title": "Class CircleStepper",
    "keywords": "Class CircleStepper The CircleStepper is a class that extends Xamarin.Forms.Stepper for Circular UI. Inheritance Xamarin.Forms.Stepper CircleStepper Implements IRotaryFocusable Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleStepper : Xamarin.Forms.Stepper, IRotaryFocusable Fields LabelFormatProperty BindableProperty. Identifies the LabelFormat bindable property. Declaration public static readonly BindableProperty LabelFormatProperty Field Value Type Description BindableProperty MarkerColorProperty BindableProperty. Identifies the MarkerColor bindable property. Declaration public static readonly BindableProperty MarkerColorProperty Field Value Type Description BindableProperty MarkerLineWidthProperty BindableProperty. Identifies the MarkerLineWidth bindable property. Declaration public static readonly BindableProperty MarkerLineWidthProperty Field Value Type Description BindableProperty Properties LabelFormat Gets or sets format in which Value is shown Declaration public string LabelFormat { get; set; } Property Value Type Description System.String MarkerColor Gets or sets Marker color Declaration public Color MarkerColor { get; set; } Property Value Type Description Color MarkerLineWidth Gets or sets length of Marker Declaration public int MarkerLineWidth { get; set; } Property Value Type Description System.Int32 Implements IRotaryFocusable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Toast.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Toast.html",
    "title": "Class Toast",
    "keywords": "Class Toast The Toast class provides properties that show simple types of messages Inheritance System.Object Toast Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public sealed class Toast : object Examples Toast.DisplayText(\"Hello World\", 3000) Toast.DisplayIconText(\"Hello World\", new FileImageSource { File = \"icon.jpg\" }, 3000) Methods DisplayIconText(String, FileImageSource, Int32) It shows simplest icon and text messege. Declaration public static void DisplayIconText(string text, FileImageSource icon, int duration = 3000) Parameters Type Name Description System.String text The body text of the toast. FileImageSource icon The file path of the toast icon. System.Int32 duration How long to display the text in milliseconds. DisplayText(String, Int32) It shows the simplest form of the message. Declaration public static void DisplayText(string text, int duration = 3000) Parameters Type Name Description System.String text The body text of the toast. System.Int32 duration How long to display the text in milliseconds."
  },
  "guide/Radio.html": {
    "href": "guide/Radio.html",
    "title": "Radio",
    "keywords": "Radio Radio displays 1 or more option and allows a user to select 1 of them. Radio can select only 1 item among items having same GroupName property. Create Radio GroupName property specifies which Radio controls are mutually exclusive. If a user selected one Radio control of radio control group, other items are not selected. IsSelected property sets default selected value of Radio control. Selected event occurs when the Radio selection was changed. Value property sets any value of Radio control. Value property is useful to distinguish which item was selected if all Radio control has the same Selected event handler. Please refer to below code. For more information. Please refer to Radio API reference This guide's code example uses WearableUIGallery's TCRadio code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCRadio.xaml.cs XAML file <w:CirclePage.Content> <w:CircleScrollView x:Name=\"myscroller\" Orientation=\"Vertical\"> <StackLayout Padding=\"50,50\" Orientation=\"Vertical\"> <Label x:Name=\"label\" FontSize=\"Medium\" HorizontalOptions=\"CenterAndExpand\" Text=\"Selected : Sound\" /> <StackLayout Orientation=\"Horizontal\"> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Sound\" VerticalOptions=\"Center\" /> <w:Radio GroupName=\"SoundMode\" HorizontalOptions=\"End\" IsSelected=\"True\" Selected=\"OnSelected\" Value=\"Sound\" /> </StackLayout> <StackLayout Orientation=\"Horizontal\"> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Vibrate\" VerticalOptions=\"Center\" /> <w:Radio GroupName=\"SoundMode\" HorizontalOptions=\"End\" Selected=\"OnSelected\" Value=\"Vibrate\" /> </StackLayout> <StackLayout Orientation=\"Horizontal\"> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Mute\" VerticalOptions=\"Center\" /> <w:Radio GroupName=\"SoundMode\" HorizontalOptions=\"End\" Selected=\"OnSelected\" Value=\"Mute\" /> </StackLayout> </StackLayout> </w:CircleScrollView> </w:CirclePage.Content> C# file public void OnSelected(object sender, SelectedEventArgs args) { Console.WriteLine($\"OnSoundSelected!! value:{args.Value}\"); Radio radio = sender as Radio; if (radio != null) { if (args.Value) label.Text = \"Selected : \" + radio.Value; } }"
  },
  "guide/CircleSurfaceEffectBehavior.html": {
    "href": "guide/CircleSurfaceEffectBehavior.html",
    "title": "CircleSurfaceEffectBehavior",
    "keywords": "CircleSurfaceEffectBehavior CircleSurfaceEffectBehavior is an effect which allows to attach CircleSurface to Xamarin.Forms.Page . CircleSurface is Tizen specific component that manages circle objects . If you need to add circle control (such as CircleListView , CircleDateTimeSelector , CircleScrollView , CircleStepper ) at Page in Tizen Xamarin Forms application, there are two ways. One is inserting these controls to CirclePage , the other is adding CircleSurfaceEffectBehavior at Page that includes circle control . Adding CircleSurfaceEffectBehavior at Page Add CircleSurfaceEffectBehavior at <Page.Behaviors> . And then set RotaryFocusTargetName property with circle control name. RotaryFocusTargetName sets the currently focused control that is handled by rotating and display the focused control's circle object. Please refer to below sample code. This guide's code example uses WearableUIGallery's TCListAppender code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCListAppender.xaml For more information. Please refer to below links CircleSurfaceEffectBehavior API reference Xamarin.Forms.Page guide Consuming a Xamarin.Forms Behavior XAML file <w:TwoButtonPage xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" x:Class=\"WearableUIGallery.TC.TCListAppender\"> <w:TwoButtonPage.`CircleSurfaceEffectBehavior` at> <w:CircleSurfaceEffectBehavior RotaryFocusTargetName=\"mylist\"/> </w:TwoButtonPage.Behaviors> <w:TwoButtonPage.Content> <w:CircleListView x:Name=\"mylist\" HorizontalOptions=\"FillAndExpand\" VerticalOptions=\"FillAndExpand\"> </w:TwoButtonPage.Content> <w:TwoButtonPage.FirstButton> <MenuItem Clicked=\"DoAdd\" Icon=\"image/tw_ic_popup_btn_check.png\" /> </w:TwoButtonPage.FirstButton> <w:TwoButtonPage.SecondButton> <MenuItem Clicked=\"DoDel\" Icon=\"image/tw_ic_popup_btn_delete.png\" /> </w:TwoButtonPage.SecondButton> </w:TwoButtonPage>"
  },
  "guide/PopupEntry.html": {
    "href": "guide/PopupEntry.html",
    "title": "Popup Entry",
    "keywords": "Popup Entry PopupEntry is a Entry that allows you to enter text with the IME when you click the entry. Overview This control has exactly the same usage as the Entry . However, in the case of a regular Entry in a circular screen, the input text may not be displayed correctly due to the IME at the time of input. Therefore, the PopupEntry allows to input on a pop-up which the written text is completely visible. Below image is a screen that has the normal Entry and a screen with IME after click the Entry . The Entry is not visible because it is masked by the IME. The above image is the same as using PopupEntry , It can type text while watching it properly. The BackgroundColor of the input pop-up is the same as the BackgroundColor of the PopupEntry and TextColor inside the input pop-up is also the same as the TextColor of the PopupEntry also IsPassword property is kept the same. How to use This is exactly the same as the Entry . <?xml version=\"1.0\" encoding=\"utf-8\" ?> <ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" x:Class=\"WearableUIGallery.TC.TCPopupEntry\"> <ContentPage.Content> <w:CircleStackLayout> <w:PopupEntry BackgroundColor=\"Gray\" TextColor=\"Blue\" VerticalOptions=\"CenterAndExpand\" HorizontalOptions=\"CenterAndExpand\" /> <w:PopupEntry Placeholder=\"Foobar\" VerticalOptions=\"CenterAndExpand\" HorizontalOptions=\"CenterAndExpand\" /> <w:PopupEntry IsPassword=\"True\" VerticalOptions=\"CenterAndExpand\" HorizontalOptions=\"CenterAndExpand\" /> </w:CircleStackLayout> </ContentPage.Content> </ContentPage>"
  },
  "guide/CircleStepper.html": {
    "href": "guide/CircleStepper.html",
    "title": "CircleStepper",
    "keywords": "CircleStepper CircleStepper allows the user to select a value from a range of incremental values specified with the Minimum , Maximum , and Increment properties. It is an extension of Xamarin.Forms.Stepper . MarkerColor, MarkerLineWidth, and LabelFormat have been added to the Xamarin.Forms.Stepper . You can change value with Bezel interaction . In order to receive Rotary event , it must be registered as RotaryFocusObject property of CirclePage . WARNING: CircleListView , CircleDateTimeSelector , CircleScrollView , CircleStepper must be contained by CirclePage or CircleSurfaceEffectBehavior should be added in Behaviors of Page that contains these controls. If other pages contain these controls, it may cause exception or can't display control. Adding CircleStepper at CirclePage You can set CircleStepper at CirclePage.Content . If you want to know how to add CirclePage , please refer to CirclePage guide . The following code shows CirclePage with CircleStepper . RotaryFocusTargetName attribute sets the currently focused control that is handled by rotating and display the focused control's circle object. If you don't set this value properly, control can't receive Rotary Event . CircleStepper has the following properties: LabelFormat : Gets or sets format in which Value is shown. MarkerColor : Xamarin.Forms.Color . Change color of marker to select value. MarkerLineWidth : Gets or sets a length of the marker. In the example below, we have a StackLayout with a CircleStepper and two labels in the CirclePage . Since 9 is set to Minimum and LabelFormat is set to \"% 1.1f\", \"9.0\" appears on the screen. The Increment is 7.5, so if you turn the bezel and increase Value , it increases by 7.5. Since the Maximum is 99, the marker does not exceed the value. Since MarkerColor is set to \"Coral\", it will be displayed as the corresponding color. For more information. Please refer to below links CircleStepper API reference Xamarin.Forms.Stepper API reference Xamarin.Forms.Stepper Guide This guide's code example use XUIComponent's SpinnerDefault of CircleSpinner code at the sample\\XUIComponents\\UIComponents\\UIComponents\\Samples\\CircleSpinner\\SpinnerViewModel.cs and SpinnerDefault.xaml C# file public class SpinnerViewModel : INotifyPropertyChanged { double _value= 9.0; ... public double Value { get => _value; set { if (_value == value) return; _value = value; OnPropertyChanged(); } } XAML file <w:CirclePage x:Class=\"UIComponents.Samples.CircleSpinner.SpinnerDefault\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:UIComponents.Samples.CircleSpinner\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" RotaryFocusTargetName=\"stepper\"> <w:CirclePage.BindingContext> <local:SpinnerViewModel /> </w:CirclePage.BindingContext> <w:CirclePage.Content> <StackLayout Padding=\"0,50,0,0\" Orientation=\"Vertical\"> <Label FontAttributes=\"Bold\" FontSize=\"11\" HorizontalTextAlignment=\"Center\" Text=\"Title\" TextColor=\"#0FB4EF\" /> <Label FontSize=\"8\" HorizontalTextAlignment=\"Center\" Text=\"unit\" TextColor=\"White\" /> <w:CircleStepper x:Name=\"stepper\" HorizontalOptions=\"CenterAndExpand\" Increment=\"7.5\" LabelFormat=\"%1.1f\" MarkerColor=\"Coral\" Maximum=\"99.0\" Minimum=\"9.0\" Value=\"{Binding Value}\" /> </StackLayout> </w:CirclePage.Content> <w:CirclePage.ActionButton> <w:ActionButtonItem Command=\"{Binding ButtonPressedExit}\" Text=\"SET\" /> </w:CirclePage.ActionButton> </w:CirclePage> Screenshot"
  },
  "guide/CircleDateTimeSelector.html": {
    "href": "guide/CircleDateTimeSelector.html",
    "title": "CircleDateTimeSelector",
    "keywords": "CircleDateTimeSelector CircleDateTimeSelector is a view for Date Picker and Time Picker. You can scroll it by Bezel interaction . This view is the size that covers the entire screen. In order to receive Rotary event , it must be registered as RotaryFocusObject property of CirclePage . In the Date type, you can change value of the item by touching the item and rotating bezel to set value of the year: month: day. For the Time type, you can change value of the hour: minute: AM / PM. Date Time WARNING: CircleListView , CircleDateTimeSelector , CircleScrollView , CircleStepper must be contained by CirclePage or CircleSurfaceEffectBehavior should be added in Behaviors of Page that contains these controls. If other pages contain these controls, it may cause exception or can't display control. Adding CircleDateTimeSelector at CirclePage You can set CircleDateTimeSelector at CirclePage.Content . If you want to know how to add CirclePage , please refer to CirclePage guide . The following code shows CirclePage with CircleDateTimeSelector . RotaryFocusTargetName attribute sets the currently focused control that is handled by rotating and display the focused control's circle object. If you don't set this property, control can't receive the Rotary Event . CircleDateTimeSelector has the following properties: ValueType : Time can be changed if it is Time and if it is a Date, the date can be changed. DateTime : Sets or gets date/time. MaximumDate : Sets or gets maximum date. MimimumDate : Sets or gets minimum date. The example below sets the time picker by putting the ValueType value \"Time\". And set the current time to the DateTime property. The current time will be displayed on the screen when it is executed. Since the hour item is shown as having focus, the hour is changed when the bezel is turned. If you touch the minute item and turn the bezel, you can change the minute. For more information. Please refer to CircleDateTimeSelector API reference This guide's code example uses XUIComponent's CircleTime of CircleDateTime code at the sample\\XUIComponents\\UIComponents\\UIComponents\\Samples\\CircleDateTime/DateTimeViewModel.cs and CircleTime.xaml C# file public class DateTimeViewModel : INotifyPropertyChanged { static DateTime _dateTime = DateTime.Now; public DateTime Datetime { get => _dateTime; set { //Console.WriteLine($\"Set Datetime value : {value.ToString()}\"); if (_dateTime == value) return; _dateTime = value; OnPropertyChanged(); } } XAML file <w:CirclePage x:Class=\"UIComponents.Samples.CircleDateTime.CircleTime\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:UIComponents.Samples.CircleDateTime\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" RotaryFocusTargetName=\"timeSelector\"> <w:CirclePage.BindingContext> <local:DateTimeViewModel /> </w:CirclePage.BindingContext> <w:CirclePage.Content> <StackLayout BackgroundColor=\"Black\" HorizontalOptions=\"FillAndExpand\" Orientation=\"Vertical\" VerticalOptions=\"FillAndExpand\"> <w:CircleDateTimeSelector x:Name=\"timeSelector\" DateTime=\"{Binding Datetime, Mode=TwoWay}\" MaximumDate=\"1/1/2022\" MinimumDate=\"1/12/2010\" ValueType=\"Time\" /> </StackLayout> </w:CirclePage.Content> <w:CirclePage.ActionButton> <w:ActionButtonItem Command=\"{Binding ButtonPressedExit}\" Text=\"OK\" /> </w:CirclePage.ActionButton> </w:CirclePage>"
  },
  "guide/IndexPage.html": {
    "href": "guide/IndexPage.html",
    "title": "IndexPage",
    "keywords": "IndexPage IndexPage allows you to know in advance how many pages you have when you configure your application on multiple pages, and to show you how many pages you are viewing. It is extension of Xamarin.Forms.MultiPage . When Page is added and removed at Xamarin.Forms.MultiPage , the number of dot marks increases or decreases automatically at the top of window. It is similar to CarouselPage in Xamarin.Forms, with the addition of Index . When Page is scrolled, Index operates select internally. Adding IndexPage To create a new index component, use the following XAML code. If you add as many pages as you want, you will increase the number of dot mark by index accordingly. In the example below, 3 pages have been added. The number of dot mark is 3. Because it is on the first page, only the first dot mark is shown as white, and the remaining dot marks are shown as grey. For more information. Please refer to below links IndexPage API reference Xamarin.Forms.MultiPage API reference This guide's code example use WearableUIGallery's TCIndexPage.xaml code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCIndexPage.xaml XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:IndexPage x:Class=\"WearableUIGallery.TC.TCIndexPage\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <ContentPage> <StackLayout> <BoxView VerticalOptions=\"FillAndExpand\" Color=\"Red\" /> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Red\" /> </StackLayout> </ContentPage> <ContentPage> <StackLayout> <BoxView VerticalOptions=\"FillAndExpand\" Color=\"Green\" /> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Green\" /> </StackLayout> </ContentPage> <ContentPage> <StackLayout> <BoxView VerticalOptions=\"FillAndExpand\" Color=\"Blue\" /> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Blue\" /> </StackLayout> </ContentPage> </w:IndexPage> Screenshot"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Tizen Wearable CircularUI",
    "keywords": "Tizen Wearable CircularUI This document is the API Specification for the Tizen Wearable CircularUI. Namespace Description Tizen.Wearable.CircularUI.Forms Provide the classes for the Circular screen with Tizen wearable devices. Tizen.Wearable.CircularUI.Forms.Renderer Contains the renderer classes on tizen platform for Tizen.Wearable.CircularUI.Forms. Tizen.Wearable.CircularUI.Forms.Renderer.Watchface Provide the classes for creating the Watchface on Tizen wearable devices."
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.ListViewCache.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.ListViewCache.html",
    "title": "Class ListViewCache",
    "keywords": "Class ListViewCache Inheritance System.Object ListViewCache Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public static class ListViewCache : object Properties InformalItemClass Declaration public static GenItemClass InformalItemClass { get; } Property Value Type Description GenItemClass PaddingItemClass Declaration public static GenItemClass PaddingItemClass { get; } Property Value Type Description GenItemClass Methods Get(Cell, Boolean) Declaration public static CellRenderer Get(Cell cell, bool IsGroupHeader = false) Parameters Type Name Description Cell cell System.Boolean IsGroupHeader Returns Type Description CellRenderer"
  },
  "api/Tizen.Wearable.CircularUI.Forms.SelectedEventArgs.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.SelectedEventArgs.html",
    "title": "Class SelectedEventArgs",
    "keywords": "Class SelectedEventArgs Event arguments for events of RadioButton. Inheritance EventArgs SelectedEventArgs Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class SelectedEventArgs : EventArgs Constructors SelectedEventArgs(Boolean) Creates a new SelectedEventArgs object that represents a change from RadioButton. Declaration public SelectedEventArgs(bool value) Parameters Type Name Description System.Boolean value The boolean value that checks whether the RadioButton is selected. Properties Value Gets the value object for the SelectedEventArgs object. Declaration public bool Value { get; } Property Value Type Description System.Boolean"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.ConfirmationPopupImplementation.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.ConfirmationPopupImplementation.html",
    "title": "Class ConfirmationPopupImplementation",
    "keywords": "Class ConfirmationPopupImplementation Inheritance System.Object ConfirmationPopupImplementation Implements Tizen.Wearable.CircularUI.Forms.IConfirmationPopup IDisposable Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class ConfirmationPopupImplementation : object, IConfirmationPopup, IDisposable Constructors ConfirmationPopupImplementation() Declaration public ConfirmationPopupImplementation() Properties Content Declaration public View Content { get; set; } Property Value Type Description View FirstButton Declaration public MenuItem FirstButton { get; set; } Property Value Type Description MenuItem SecondButton Declaration public MenuItem SecondButton { get; set; } Property Value Type Description MenuItem Text Declaration public string Text { get; set; } Property Value Type Description System.String Title Declaration public string Title { get; set; } Property Value Type Description System.String Methods Dismiss() Declaration public void Dismiss() Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Finalize() Declaration protected void Finalize() Show() Declaration public void Show() Events BackButtonPressed Declaration public event EventHandler BackButtonPressed Event Type Type Description EventHandler Implements Tizen.Wearable.CircularUI.Forms.IConfirmationPopup IDisposable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector.html",
    "title": "Class CircleDateTimeSelector",
    "keywords": "Class CircleDateTimeSelector The CircleDateTimeSelector is a view that can change the value by bezel action by touching each item of \"Year: Month: Day\" and \"Hour: Minute: AM / PM\" Inheritance Xamarin.Forms.View CircleDateTimeSelector Implements IRotaryFocusable Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleDateTimeSelector : Xamarin.Forms.View, IRotaryFocusable Fields DateTimeProperty BindableProperty. Identifies the DateTime bindable property. Declaration public static readonly BindableProperty DateTimeProperty Field Value Type Description BindableProperty IsVisibleOfAmPmProperty BindableProperty. Identifies the IsVisibleOfAmPm bindable property. Declaration public static BindableProperty IsVisibleOfAmPmProperty Field Value Type Description BindableProperty IsVisibleOfDateProperty BindableProperty. Identifies the IsVisibleOfDate bindable property. Declaration public static BindableProperty IsVisibleOfDateProperty Field Value Type Description BindableProperty IsVisibleOfHourProperty BindableProperty. Identifies the IsVisibleOfHour bindable property. Declaration public static BindableProperty IsVisibleOfHourProperty Field Value Type Description BindableProperty IsVisibleOfMinuteProperty BindableProperty. Identifies the IsVisibleOfMinute bindable property. Declaration public static BindableProperty IsVisibleOfMinuteProperty Field Value Type Description BindableProperty IsVisibleOfMonthProperty BindableProperty. Identifies the IsVisibleOfMonth bindable property. Declaration public static BindableProperty IsVisibleOfMonthProperty Field Value Type Description BindableProperty IsVisibleOfYearProperty BindableProperty. Identifies the IsVisibleOfYear bindable property. Declaration public static BindableProperty IsVisibleOfYearProperty Field Value Type Description BindableProperty MarkerColorProperty BindableProperty. Identifies the MarkerColor bindable property. Declaration public static readonly BindableProperty MarkerColorProperty Field Value Type Description BindableProperty MaximumDateProperty BindableProperty. Identifies the MaximumDate bindable property. Declaration public static readonly BindableProperty MaximumDateProperty Field Value Type Description BindableProperty MinimumDateProperty BindableProperty. Identifies the MinimumDate bindable property. Declaration public static readonly BindableProperty MinimumDateProperty Field Value Type Description BindableProperty ValueTypeProperty BindableProperty. Identifies the ValueType bindable property. Declaration public static readonly BindableProperty ValueTypeProperty Field Value Type Description BindableProperty Properties DateTime Gets or sets the date / time. Declaration public DateTime DateTime { get; set; } Property Value Type Description DateTime IsVisibleOfAmPm Gets or sets a boolean value that indicates whether the AmPm field type is visible. Declaration public bool IsVisibleOfAmPm { get; set; } Property Value Type Description System.Boolean IsVisibleOfDate Gets or sets a boolean value that indicates whether the date field type is visible. Declaration public bool IsVisibleOfDate { get; set; } Property Value Type Description System.Boolean IsVisibleOfHour Gets or sets a boolean value that indicates whether the hour field type is visible. Declaration public bool IsVisibleOfHour { get; set; } Property Value Type Description System.Boolean IsVisibleOfMinute Gets or sets a boolean value that indicates whether the minute field type is visible. Declaration public bool IsVisibleOfMinute { get; set; } Property Value Type Description System.Boolean IsVisibleOfMonth Gets or sets a boolean value that indicates whether the month field type is visible. Declaration public bool IsVisibleOfMonth { get; set; } Property Value Type Description System.Boolean IsVisibleOfYear Gets or sets a boolean value that indicates whether the year field type is visible. Declaration public bool IsVisibleOfYear { get; set; } Property Value Type Description System.Boolean MarkerColor Gets or sets Marker color Declaration public Color MarkerColor { get; set; } Property Value Type Description Color MaximumDate Gets or sets the maximum date when ValueType is Date. Declaration public DateTime MaximumDate { get; set; } Property Value Type Description DateTime MinimumDate Gets or sets the minimum date when ValueType is Date. Declaration public DateTime MinimumDate { get; set; } Property Value Type Description DateTime ValueType Gets or sets DateTimeType value. If it is Time, the UI will be changed to enable time selection. If it is a Date, the date can be changed. Declaration public DateTimeType ValueType { get; set; } Property Value Type Description DateTimeType Implements IRotaryFocusable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.Watchface.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.Watchface.html",
    "title": "Namespace Tizen.Wearable.CircularUI.Forms.Renderer.Watchface",
    "keywords": "Namespace Tizen.Wearable.CircularUI.Forms.Renderer.Watchface Classes FormsWatchface"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ContextPopup.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ContextPopup.html",
    "title": "Class ContextPopup",
    "keywords": "Class ContextPopup The ContextPopup class allows a contextual popup to be anchored at a view. Inheritance BindableObject ContextPopup Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class ContextPopup : BindableObject Examples var popup = new ContextPopup(); var item1 = new ContextPopupItem(\"item 1\"); var item2 = new ContextPopupItem(\"item 2\"); popup.Items.Add(item1); popup.Items.Add(item2); popup.ItemSelected += (s, e) => { Console.WriteLine($\"{popup.SelectedItem?.Label} is selected\"); } Constructors ContextPopup() The constructor, which creates a new ContextPopup instance. Declaration public ContextPopup() Fields SelectedIndexProperty BindableProperty. Identifies the SelectedIndex bindable property. Declaration public static readonly BindableProperty SelectedIndexProperty Field Value Type Description BindableProperty SelectedItemProperty BindableProperty. Identifies the SelectedItem bindable property. Declaration public static readonly BindableProperty SelectedItemProperty Field Value Type Description BindableProperty Properties Items Gets the list of items in the ContextPopup. Declaration public IList<ContextPopupItem> Items { get; } Property Value Type Description IList < ContextPopupItem > SelectedIndex Gets or sets the index of the selected item of the ContextPopup. It is -1 when no item is selected. Declaration public int SelectedIndex { get; set; } Property Value Type Description System.Int32 SelectedItem Gets or sets the selected item of the ContextPopup. Declaration public ContextPopupItem SelectedItem { get; set; } Property Value Type Description ContextPopupItem Methods Dismiss() Dismisses the ContextPopup. Declaration public void Dismiss() Show(View) Shows the ContextPopup. The ContextPopup is positioned at the horizontal and the vertical position of a specific anchor. Declaration public void Show(View anchor) Parameters Type Name Description View anchor The view to which the popup should be anchored. Show(View, Double, Double) Shows the ContextPopup. The ContextPopup is positioned at the horizontal and the vertical position of a specific anchor with offsets. Declaration public void Show(View anchor, double xOffset, double yOffset) Parameters Type Name Description View anchor The view to which the popup should be anchored. System.Double xOffset The horizontal offset from the anchor. System.Double yOffset The vertical offset from the anchor. Show(View, Int32, Int32) Shows the ContextPopup. The ContextPopup is positioned at the horizontal and the vertical position of a specific anchor with offsets. Declaration public void Show(View anchor, int xOffset, int yOffset) Parameters Type Name Description View anchor The view to which the popup should be anchored. System.Int32 xOffset The horizontal offset from the anchor. System.Int32 yOffset The vertical offset from the anchor. Events Dismissed Occurs when the ContextPopup is dismissed. Declaration public event EventHandler Dismissed Event Type Type Description EventHandler ItemSelected Occurs when a ContextPopupItem is selected. Declaration public event EventHandler<SelectedItemChangedEventArgs> ItemSelected Event Type Type Description EventHandler < SelectedItemChangedEventArgs >"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.PaddingItemClass.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.PaddingItemClass.html",
    "title": "Class PaddingItemClass",
    "keywords": "Class PaddingItemClass Inheritance GenItemClass PaddingItemClass Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class PaddingItemClass : GenItemClass Constructors PaddingItemClass() Declaration public PaddingItemClass()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ContextPopupItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ContextPopupItem.html",
    "title": "Class ContextPopupItem",
    "keywords": "Class ContextPopupItem The ContextPopupItem is a class to control items in a ContextPopup. Inheritance INotifyPropertyChanged ContextPopupItem Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class ContextPopupItem : INotifyPropertyChanged Constructors ContextPopupItem(String) Creates a ContextPopupItem with only a label. Declaration public ContextPopupItem(string label) Parameters Type Name Description System.String label The label of the ContextPopupItem. Properties Label Gets or sets the label of a ContextPopupItem. Declaration public string Label { get; set; } Property Value Type Description System.String Methods OnPropertyChanged(String) Called when a bindable property has changed. Declaration protected virtual void OnPropertyChanged(string propertyName = null) Parameters Type Name Description System.String propertyName Events PropertyChanged Occurs when the label or an icon of a ContextPopupItem is changed. Declaration public event PropertyChangedEventHandler PropertyChanged Event Type Type Description PropertyChangedEventHandler"
  },
  "api/Tizen.Wearable.CircularUI.Forms.PositionOption.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.PositionOption.html",
    "title": "Enum PositionOption",
    "keywords": "Enum PositionOption Enumeration for position type of popup Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public enum PositionOption : int Fields Name Description Absolute The value of Offset is X, Y and popup is placed on the screen. BottomOfView The popup appears at the bottom of the View using the Effect. The position is changed by Offset in the center of View. CenterOfParent In the center of the screen, move by the Offset in the Popup. Relative Set Offset.X * Window.Width, Offset.Y * Window.Height."
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.InformationPopupImplementation.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.InformationPopupImplementation.html",
    "title": "Class InformationPopupImplementation",
    "keywords": "Class InformationPopupImplementation Inheritance System.Object InformationPopupImplementation Implements Tizen.Wearable.CircularUI.Forms.IInformationPopup IDisposable Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class InformationPopupImplementation : object, IInformationPopup, IDisposable Constructors InformationPopupImplementation() Declaration public InformationPopupImplementation() Properties BottomButton Declaration public MenuItem BottomButton { get; set; } Property Value Type Description MenuItem IsProgressRunning Declaration public bool IsProgressRunning { get; set; } Property Value Type Description System.Boolean Text Declaration public string Text { get; set; } Property Value Type Description System.String Title Declaration public string Title { get; set; } Property Value Type Description System.String Methods Dismiss() Declaration public void Dismiss() Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Finalize() Declaration protected void Finalize() Show() Declaration public void Show() Events BackButtonPressed Declaration public event EventHandler BackButtonPressed Event Type Type Description EventHandler Implements Tizen.Wearable.CircularUI.Forms.IInformationPopup IDisposable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ActionButtonItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ActionButtonItem.html",
    "title": "Class ActionButtonItem",
    "keywords": "Class ActionButtonItem The ActionButtonItem is a class that presents a menu item and associates it with a command Inheritance MenuItem ActionButtonItem Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class ActionButtonItem : MenuItem Fields IsEnableProperty BindableProperty. Identifies the IsEnable bindable property. Declaration public static BindableProperty IsEnableProperty Field Value Type Description BindableProperty IsVisibleProperty BindableProperty. Identifies the IsVisible bindable property. Declaration public static BindableProperty IsVisibleProperty Field Value Type Description BindableProperty Properties IsEnable Gets or sets a boolean value that indicates whether this ActionButtonItem is enabled. Declaration public bool IsEnable { get; set; } Property Value Type Description System.Boolean IsVisible Gets or sets a boolean value that indicates whether this ActionButtonItem is visible. Declaration public bool IsVisible { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.IndexPageRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.IndexPageRenderer.html",
    "title": "Class IndexPageRenderer",
    "keywords": "Class IndexPageRenderer Inheritance VisualElementRenderer < IndexPage > IndexPageRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class IndexPageRenderer : VisualElementRenderer<IndexPage> Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing OnElementChanged(ElementChangedEventArgs<IndexPage>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<IndexPage> e) Parameters Type Name Description ElementChangedEventArgs < IndexPage > e"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Radio.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Radio.html",
    "title": "Class Radio",
    "keywords": "Class Radio The Radio is a widget that allows one or more options to be displayed and have the user choose only one of them. Inheritance View Radio Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class Radio : View Examples var radio1 = new Radio { GroupName = \"SoundMode\", IsSelected = true, Value = \"sound\" } var radio2 = new Radio { GroupName = \"SoundMode\", IsSelected = false, Value = \"vibrate\" } radio1.Selected += (s,e) => { Console.WriteLine($\"radio1 selected! value:{e.Value}\"); }; radio2.Selected += (s,e) => { Console.WriteLine($\"radio2 selected! value:{e.Value}\"); }; Fields GroupNameProperty BindableProperty. Identifies the GroupName bindable property. Declaration public static readonly BindableProperty GroupNameProperty Field Value Type Description BindableProperty IsSelectedProperty BindableProperty. Identifies the IsSelected bindable property. Declaration public static readonly BindableProperty IsSelectedProperty Field Value Type Description BindableProperty ValueProperty BindableProperty. Identifies the Value bindable property. Declaration public static readonly BindableProperty ValueProperty Field Value Type Description BindableProperty Properties GroupName Gets or sets the name that specifies which Radio controls are mutually exclusive. It can be set to null. Declaration public string GroupName { get; set; } Property Value Type Description System.String IsSelected Gets or sets a boolean value that indicates whether this Radio is selected. Declaration public bool IsSelected { get; set; } Property Value Type Description System.Boolean Value Gets or sets the value of the Radio. This is a bindable property. Declaration public string Value { get; set; } Property Value Type Description System.String Events Selected Occurs when the Radio selection was changed. Declaration public event EventHandler<SelectedEventArgs> Selected Event Type Type Description EventHandler < SelectedEventArgs >"
  },
  "api/Tizen.Wearable.CircularUI.Forms.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.html",
    "title": "Namespace Tizen.Wearable.CircularUI.Forms",
    "keywords": "Namespace Tizen.Wearable.CircularUI.Forms Classes ActionButtonItem The ActionButtonItem is a class that presents a menu item and associates it with a command Check The check widget allows for toggling a value between true and false. The check is extension of Xamarin.Forms.Switch. CircleDateTimeSelector The CircleDateTimeSelector is a view that can change the value by bezel action by touching each item of \"Year: Month: Day\" and \"Hour: Minute: AM / PM\" CircleListView The CircleListView is a view that represents Xamarin.Forms.ListView on Circular UI. You can move the list through bezel action. CirclePage The CirclePage is a ContentPage, which allows you to insert views that require CircleSurface, and you can show ToolbarItems with MoreOption. It has an ActionButton, and can use the MenuItem type as text, icon, command, and so on. CirclePageNotFoundException The CirclePageNotFoundException is an Exception class that occurs when a CircleSurface has no child. CircleProgressBarSurfaceItem The CircleProgressBarSurfaceItem displays circular progressbar at CirclePage. CircleScrollView The CircleScrollView has circular scroll bar. it can be scrolled by bezel action. The CircleScrollView is extension of Xamarin.Forms.ScrollView. CircleSliderSurfaceItem The CircleSliderSurfaceItem displays circular slider at CirclePage. CircleStackLayout CircleStepper The CircleStepper is a class that extends Xamarin.Forms.Stepper for Circular UI. CircleSurfaceEffectBehavior The CircleSurfaceEffectBehavior is an effect which allows you to insert views that require CircleSurface. CircleSurfaceItem The CircleSurfaceItem is a class that controls the items represented in the CircleSurface. CircleToolbarItem The CircleToolbarItem is a class that extends Xamarin.Forms.ToolbarItem for Circular UI. ConfirmationPopup The ConfirmationPopup describe pop-up which has circular two button, title, text, and content area. ConfirmPopupEffect The ConfirmPopupEffect is an effect that is proportional to a particular widget or has one or two buttons anywhere on the screen ContextPopup The ContextPopup class allows a contextual popup to be anchored at a view. ContextPopupItem The ContextPopupItem is a class to control items in a ContextPopup. IndexPage The IndexPage is extension of Xamarin.Forms.MultiPage. When Page is added/removed at Multipage. circular index is added/removed automatically at the top of window. InformationPopup PopupEntry The PopupEntry is a class that extends Xamarin.Forms.Entry. It makes a new layer when editing text on the entry. Radio The Radio is a widget that allows one or more options to be displayed and have the user choose only one of them. RotaryEventArgs Event arguments for RotaryEvent. SelectedEventArgs Event arguments for events of RadioButton. Toast The Toast class provides properties that show simple types of messages TwoButtonPage The TwoButtonPage is a page that has a rectangular area inside the circle as contents area. It also has two buttons and a Title area. Interfaces ICircleSurfaceItem The ICircleSurfaceItem is an interface that controls the items represented in the CircleSurface. IRotaryEventReceiver The IRotaryEventReceiver is a receiver interface to take Rotary Events IRotaryFocusable The IRotaryFocusable is an interface to take a Rotary Event Enums CheckDisplayStyle Enumeration for the style of the Check. DateTimeType Enumeration for style type of CircleDateTimeSelector PositionOption Enumeration for position type of popup Delegates RotaryEventHandler Delegate for a triggering rotary event"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleSurfaceNotFoundException.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleSurfaceNotFoundException.html",
    "title": "Class CircleSurfaceNotFoundException",
    "keywords": "Class CircleSurfaceNotFoundException Inheritance Exception CircleSurfaceNotFoundException Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleSurfaceNotFoundException : Exception Constructors CircleSurfaceNotFoundException() Declaration public CircleSurfaceNotFoundException() CircleSurfaceNotFoundException(SerializationInfo, StreamingContext) Declaration protected CircleSurfaceNotFoundException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context CircleSurfaceNotFoundException(String) Declaration public CircleSurfaceNotFoundException(string message) Parameters Type Name Description System.String message CircleSurfaceNotFoundException(String, Exception) Declaration public CircleSurfaceNotFoundException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleSurfaceItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleSurfaceItem.html",
    "title": "Class CircleSurfaceItem",
    "keywords": "Class CircleSurfaceItem The CircleSurfaceItem is a class that controls the items represented in the CircleSurface. Inheritance Element CircleSurfaceItem CircleProgressBarSurfaceItem CircleSliderSurfaceItem Implements ICircleSurfaceItem Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleSurfaceItem : Element, ICircleSurfaceItem Fields BackgroundAngleOffsetProperty BindableProperty. Identifies the BackgroundAngleOffset bindable property. Declaration public static readonly BindableProperty BackgroundAngleOffsetProperty Field Value Type Description BindableProperty BackgroundAngleProperty BindableProperty. Identifies the BackgroundAngle bindable property. Declaration public static readonly BindableProperty BackgroundAngleProperty Field Value Type Description BindableProperty BackgroundColorProperty BindableProperty. Identifies the BackgroundColor bindable property. Declaration public static readonly BindableProperty BackgroundColorProperty Field Value Type Description BindableProperty BackgroundLineWidthProperty BindableProperty. Identifies the BackgroundLineWidth bindable property. Declaration public static readonly BindableProperty BackgroundLineWidthProperty Field Value Type Description BindableProperty BackgroundRadiusProperty BindableProperty. Identifies the BackgroundRadius bindable property. Declaration public static readonly BindableProperty BackgroundRadiusProperty Field Value Type Description BindableProperty BarAngleMaximumProperty BindableProperty. Identifies the BarAngleMaximum bindable property. Declaration public static readonly BindableProperty BarAngleMaximumProperty Field Value Type Description BindableProperty BarAngleMinimumProperty BindableProperty. Identifies the BarAngleMinimum bindable property. Declaration public static readonly BindableProperty BarAngleMinimumProperty Field Value Type Description BindableProperty BarAngleOffsetProperty BindableProperty. Identifies the BarAngleOffset bindable property. Declaration public static readonly BindableProperty BarAngleOffsetProperty Field Value Type Description BindableProperty BarAngleProperty BindableProperty. Identifies the BarAngle bindable property. Declaration public static readonly BindableProperty BarAngleProperty Field Value Type Description BindableProperty BarColorProperty BindableProperty. Identifies the BarColor bindable property. Declaration public static readonly BindableProperty BarColorProperty Field Value Type Description BindableProperty BarLineWidthProperty BindableProperty. Identifies the BarLineWidth bindable property. Declaration public static readonly BindableProperty BarLineWidthProperty Field Value Type Description BindableProperty BarRadiusProperty BindableProperty. Identifies the BarRadius bindable property. Declaration public static readonly BindableProperty BarRadiusProperty Field Value Type Description BindableProperty IsEnabledProperty BindableProperty. Identifies the IsEnabled bindable property. Declaration public static readonly BindableProperty IsEnabledProperty Field Value Type Description BindableProperty IsVisibleProperty BindableProperty. Identifies the IsVisible bindable property. Declaration public static readonly BindableProperty IsVisibleProperty Field Value Type Description BindableProperty Properties BackgroundAngle Gets or sets the background angle value. If background angle is 180, background of surface item draw 180 degree from background angle offset. Declaration public double BackgroundAngle { get; set; } Property Value Type Description System.Double BackgroundAngleOffset Gets or sets the background angle offset value. if background angle offset is 30, background of surface item start at 30 degree. Declaration public double BackgroundAngleOffset { get; set; } Property Value Type Description System.Double BackgroundColor Gets or sets the background color value. Declaration public Color BackgroundColor { get; set; } Property Value Type Description Color BackgroundLineWidth Gets or sets the background line width value. Declaration public int BackgroundLineWidth { get; set; } Property Value Type Description System.Int32 BackgroundRadius Gets or sets the background radius value. Declaration public double BackgroundRadius { get; set; } Property Value Type Description System.Double BarAngle Gets or sets the bar angle value. If bar angle is 180, bar of surface item draw 180 degree from bar angle offset. Declaration public double BarAngle { get; set; } Property Value Type Description System.Double BarAngleMaximum Gets or sets the bar angle maximum value. Declaration public double BarAngleMaximum { get; set; } Property Value Type Description System.Double BarAngleMinimum Gets or sets the bar angle minimum value. Declaration public double BarAngleMinimum { get; set; } Property Value Type Description System.Double BarAngleOffset Gets or sets the bar angle offset value. if bar angle offset is 30, bar of surface item start at 30 degree. Declaration public double BarAngleOffset { get; set; } Property Value Type Description System.Double BarColor Gets or sets the bar color value. Declaration public Color BarColor { get; set; } Property Value Type Description Color BarLineWidth Gets or sets the bar line width value. Declaration public int BarLineWidth { get; set; } Property Value Type Description System.Int32 BarRadius Gets or sets the bar radius value. Declaration public double BarRadius { get; set; } Property Value Type Description System.Double IsEnabled Gets or sets a value indicating whether this element is enabled. Declaration public bool IsEnabled { get; set; } Property Value Type Description System.Boolean IsVisible Gets or sets the visibility value of circle surface item. Declaration public bool IsVisible { get; set; } Property Value Type Description System.Boolean Implements ICircleSurfaceItem"
  },
  "guide/CircleStackLayout.html": {
    "href": "guide/CircleStackLayout.html",
    "title": "CircleStackLayout",
    "keywords": "CircleStackLayout CircleStackLayout organizes views in a one-dimensional line (\"stack\"), either horizontally or vertically. It is the same as Xamarin.Forms.StackLayout , but it arranges internal components in a form that fits the circular screen. Rectangular components are placed in close proximity to the circle, and margin is calculated after placement. If you don't set Orientation , Vertical will be used. The larger the Spacing value, the greater the distance between the components placed. At the right end of the figure below, the Spacing value is 50. Horizontal Vertical Spacing Adding CircleStackLayout at ContentPage You can set CircleStackLayout at ContentPage . To create a new component, use the following XAML code. In the example below, the number of BoxView is large, so the entire contents are larger than the screen size. So we use CircleStackLayout in ScrollView . For more information. Please refer to below links CircleStackLayout API reference Xamarin.Forms.StackLayout API reference Xamarin.Forms.StackLayout Guide This guide's code example uses WearableUIGallery's TCCircleStackLayout.xaml code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCCircleStackLayout.xaml XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:IndexPage x:Class=\"WearableUIGallery.TC.TCCircleStackLayout\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> ... <ContentPage> <ScrollView> <w:CircleStackLayout> <BoxView BackgroundColor=\"Red\" /> <BoxView BackgroundColor=\"Orange\" /> <BoxView BackgroundColor=\"Yellow\" /> <BoxView BackgroundColor=\"Green\" /> <BoxView BackgroundColor=\"Blue\" /> <BoxView BackgroundColor=\"Navy\" /> <BoxView BackgroundColor=\"Purple\" /> <BoxView BackgroundColor=\"Red\" /> <BoxView BackgroundColor=\"Orange\" /> <BoxView BackgroundColor=\"Yellow\" /> <BoxView BackgroundColor=\"Green\" /> <BoxView BackgroundColor=\"Blue\" /> <BoxView BackgroundColor=\"Navy\" /> <BoxView BackgroundColor=\"Purple\" /> </w:CircleStackLayout> </ScrollView> </ContentPage> ... </w:IndexPage>"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.HeaderOrFooterItemClass.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.HeaderOrFooterItemClass.html",
    "title": "Class HeaderOrFooterItemClass",
    "keywords": "Class HeaderOrFooterItemClass Inheritance GenItemClass HeaderOrFooterItemClass Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class HeaderOrFooterItemClass : GenItemClass Constructors HeaderOrFooterItemClass() Declaration public HeaderOrFooterItemClass() Methods OnGetContent(Object, String) Declaration protected EvasObject OnGetContent(object data, string part) Parameters Type Name Description System.Object data System.String part Returns Type Description EvasObject"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ConfirmationPopup.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ConfirmationPopup.html",
    "title": "Class ConfirmationPopup",
    "keywords": "Class ConfirmationPopup The ConfirmationPopup describe pop-up which has circular two button, title, text, and content area. Inheritance BindableObject ConfirmationPopup Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class ConfirmationPopup : BindableObject Examples var leftButton = new MenuItem() { Text = \"Save\", Icon = new FileImageSource{ File = \"icon_save.png\", }, Command = new Command(() => { ... }) }; var rightButton = new MenuItem() { Text = \"Delete\", Icon = new FileImageSource{ File = \"icon_delete.png\", }, Command = new Command(() => { ... }) }; var popup = new ConfirmationPopup(); popup.FirstButton = leftButton; popup.SecondButton = rightButton; popup.Title = \"Popup title\"; popup.Content = new StackLayout() { HorizontalOptions = LayoutOptions.FillAndExpand, Children = { new Label { Text = \"Will be saved\", }, } }; popup.BackButtonPressed += (s, e) => { popup.Dismiss(); }; Constructors ConfirmationPopup() Creates and initializes a new instance of the ConfirmationPopup class. Declaration public ConfirmationPopup() Fields ContentProperty BindableProperty. Identifies the content bindable property. Declaration public static readonly BindableProperty ContentProperty Field Value Type Description BindableProperty FirstButtonProperty BindableProperty. Identifies the first button bindable property. Declaration public static readonly BindableProperty FirstButtonProperty Field Value Type Description BindableProperty SecondButtonProperty BindableProperty. Identifies the second button bindable property. Declaration public static readonly BindableProperty SecondButtonProperty Field Value Type Description BindableProperty TextProperty BindableProperty. Identifies the title bindable property. Declaration public static readonly BindableProperty TextProperty Field Value Type Description BindableProperty TitleProperty BindableProperty. Identifies the title bindable property. Declaration public static readonly BindableProperty TitleProperty Field Value Type Description BindableProperty Properties Content Gets or sets content view of the Popup. Declaration public View Content { get; set; } Property Value Type Description View FirstButton Gets or sets left button of the Popup. Declaration public MenuItem FirstButton { get; set; } Property Value Type Description MenuItem SecondButton Gets or sets right button of the Popup. Declaration public MenuItem SecondButton { get; set; } Property Value Type Description MenuItem Text Gets or sets text of the Popup. Declaration public string Text { get; set; } Property Value Type Description System.String Title Gets or sets title of the Popup. Declaration public string Title { get; set; } Property Value Type Description System.String Methods Dismiss() Dismisses the ConfirmationPopup. Declaration public void Dismiss() Show() Shows the ConfirmationPopup. Declaration public void Show() Events BackButtonPressed Occurs when the device's back button is pressed. Declaration public event EventHandler BackButtonPressed Event Type Type Description EventHandler"
  },
  "guide/CircleScrollView.html": {
    "href": "guide/CircleScrollView.html",
    "title": "CircleScrollView",
    "keywords": "CircleScrollView CircleScrollView can be used to ensure that larger views display well on smaller wearable devices. It is an extension of Xamarin.Forms.ScrollView . Same as Xamarin.Forms.ScrollView , scroller is rendered to CircleSurface and scrolling is possible with Bezel interaction . In order to receive Rotary Event , it must be registered as RotaryFocusObject property of CirclePage . Horizontal Vertical WARNING: CircleListView , CircleDateTimeSelector , CircleScrollView , CircleStepper must be contained by CirclePage or CircleSurfaceEffectBehavior should be added in Behaviors of Page that contains these controls. If other pages contain these controls, it may cause exception or can't display control. Adding CircleScrollView at CirclePage You can set CircleScrollView at CirclePage.Content . If you want to know how to add CirclePage , please refer to CirclePage guide . The following XAML code shows CirclePage with CircleScrollView . RotaryFocusTargetName attribute sets the currently focused control that is handled by rotating and display the focused control's circle object. If you don't set this property, control can't receive the Rotary Event . The direction of the scroller depends on the setting of the Orientation value. In the example below, we set the Orientation of the CircleScrollView to Horizontal and place it in the StackLayout to contain many images. For more information. Please refer to below links CircleScrollView API reference Xamarin.Forms.ScrollView API reference Xamarin.Forms.ScrollView Guide This guide's code example use XUIComponent's HorizontalScroller.xaml code at the sample\\XUIComponents\\UIComponents\\UIComponents\\Samples\\CircleScroller/HorizontalScroller.xaml XAML file <w:CirclePage x:Class=\"UIComponents.Samples.CircleScroller.HorizontalScroller\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:UIComponents.Samples.CircleScroller\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" RotaryFocusTargetName=\"myscroller\"> <w:CirclePage.Content> <w:CircleScrollView x:Name=\"myscroller\" Orientation=\"Horizontal\"> <StackLayout HorizontalOptions=\"FillAndExpand\" Orientation=\"Horizontal\" VerticalOptions=\"FillAndExpand\"> <Image Source=\"tw_btn_delete_holo_dark.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_ringtone_mute.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_ic_popup_btn_check.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_alert.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_bell.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_ringtone_sound.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_btn_delete_holo_dark.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_ringtone_mute.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_ic_popup_btn_check.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_alert.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_bell.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_ringtone_sound.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_btn_delete_holo_dark.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_ringtone_mute.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_ic_popup_btn_check.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_alert.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_bell.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_ringtone_sound.png\" VerticalOptions=\"CenterAndExpand\" /> </StackLayout> </w:CircleScrollView> </w:CirclePage.Content> </w:CirclePage>"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleSliderSurfaceItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleSliderSurfaceItem.html",
    "title": "Class CircleSliderSurfaceItem",
    "keywords": "Class CircleSliderSurfaceItem The CircleSliderSurfaceItem displays circular slider at CirclePage. Inheritance Element CircleSurfaceItem CircleSliderSurfaceItem Implements ICircleSurfaceItem IRotaryFocusable Inherited Members CircleSurfaceItem.BackgroundAngleProperty CircleSurfaceItem.BackgroundAngleOffsetProperty CircleSurfaceItem.BackgroundColorProperty CircleSurfaceItem.BackgroundLineWidthProperty CircleSurfaceItem.BackgroundRadiusProperty CircleSurfaceItem.BarAngleProperty CircleSurfaceItem.BarAngleOffsetProperty CircleSurfaceItem.BarAngleMaximumProperty CircleSurfaceItem.BarAngleMinimumProperty CircleSurfaceItem.BarColorProperty CircleSurfaceItem.BarLineWidthProperty CircleSurfaceItem.BarRadiusProperty CircleSurfaceItem.IsVisibleProperty CircleSurfaceItem.IsEnabledProperty CircleSurfaceItem.BackgroundAngle CircleSurfaceItem.BackgroundAngleOffset CircleSurfaceItem.BackgroundColor CircleSurfaceItem.BackgroundLineWidth CircleSurfaceItem.BackgroundRadius CircleSurfaceItem.BarAngle CircleSurfaceItem.BarAngleOffset CircleSurfaceItem.BarAngleMaximum CircleSurfaceItem.BarAngleMinimum CircleSurfaceItem.BarColor CircleSurfaceItem.BarLineWidth CircleSurfaceItem.BarRadius CircleSurfaceItem.IsVisible CircleSurfaceItem.IsEnabled Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleSliderSurfaceItem : CircleSurfaceItem, ICircleSurfaceItem, IRotaryFocusable Fields IncrementProperty BindableProperty. Identifies the Increment bindable property. Declaration public static readonly BindableProperty IncrementProperty Field Value Type Description BindableProperty MaximumProperty BindableProperty. Identifies the Maximum bindable property. Declaration public static readonly BindableProperty MaximumProperty Field Value Type Description BindableProperty MinimumProperty BindableProperty. Identifies the Minimum bindable property. Declaration public static readonly BindableProperty MinimumProperty Field Value Type Description BindableProperty ValueProperty BindableProperty. Identifies the Value bindable property. Declaration public static readonly BindableProperty ValueProperty Field Value Type Description BindableProperty Properties Increment Gets or sets the Increment value. The value of the slider is increased/decreased by the Increment value. Declaration public double Increment { get; set; } Property Value Type Description System.Double Maximum Gets or sets the maximum value of the slider. Declaration public double Maximum { get; set; } Property Value Type Description System.Double Minimum Gets or sets the minimum value of the slider. Declaration public double Minimum { get; set; } Property Value Type Description System.Double Value Gets or sets the value of the slider. Declaration public double Value { get; set; } Property Value Type Description System.Double Implements ICircleSurfaceItem IRotaryFocusable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.RadioRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.RadioRenderer.html",
    "title": "Class RadioRenderer",
    "keywords": "Class RadioRenderer Inheritance ViewRenderer < Radio , ElmSharp.Radio > RadioRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class RadioRenderer : ViewRenderer<Radio, ElmSharp.Radio> Constructors RadioRenderer() Declaration public RadioRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing OnElementChanged(ElementChangedEventArgs<Radio>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<Radio> e) Parameters Type Name Description ElementChangedEventArgs < Radio > e"
  },
  "api/Tizen.Wearable.CircularUI.Forms.PopupEntry.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.PopupEntry.html",
    "title": "Class PopupEntry",
    "keywords": "Class PopupEntry The PopupEntry is a class that extends Xamarin.Forms.Entry. It makes a new layer when editing text on the entry. Inheritance Entry PopupEntry Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class PopupEntry : Entry Constructors PopupEntry() Declaration public PopupEntry()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleListView.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleListView.html",
    "title": "Class CircleListView",
    "keywords": "Class CircleListView The CircleListView is a view that represents Xamarin.Forms.ListView on Circular UI. You can move the list through bezel action. Inheritance ListView CircleListView Implements IRotaryFocusable Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleListView : ListView, IRotaryFocusable Implements IRotaryFocusable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleListView.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleListView.html",
    "title": "Class CircleListView",
    "keywords": "Class CircleListView Inheritance CircleGenList CircleListView Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleListView : CircleGenList Constructors CircleListView(EvasObject, CircleSurface) Declaration public CircleListView(EvasObject parent, CircleSurface surface) Parameters Type Name Description EvasObject parent CircleSurface surface Properties Footer Declaration public VisualElement Footer { get; set; } Property Value Type Description VisualElement Header Declaration public VisualElement Header { get; set; } Property Value Type Description VisualElement Methods AddGroup(TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void AddGroup(TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description TemplatedItemsList < ItemsView < Cell >, Cell > group AddItem(Cell, TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void AddItem(Cell cell, TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description Cell cell TemplatedItemsList < ItemsView < Cell >, Cell > group AddSource(IEnumerable) Declaration public void AddSource(IEnumerable source) Parameters Type Name Description IEnumerable source AddSource(IEnumerable, Cell) Declaration public void AddSource(IEnumerable source, Cell before) Parameters Type Name Description IEnumerable source Cell before AddSource(IEnumerable, TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void AddSource(IEnumerable source, TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description IEnumerable source TemplatedItemsList < ItemsView < Cell >, Cell > group AddSource(IEnumerable, TemplatedItemsList<ItemsView<Cell>, Cell>, Cell) Declaration public void AddSource(IEnumerable source, TemplatedItemsList<ItemsView<Cell>, Cell> group, Cell before) Parameters Type Name Description IEnumerable source TemplatedItemsList < ItemsView < Cell >, Cell > group Cell before ApplyScrollTo(Cell, Xamarin.Forms.ScrollToPosition, Boolean) Declaration public void ApplyScrollTo(Cell cell, Xamarin.Forms.ScrollToPosition position, bool animated) Parameters Type Name Description Cell cell Xamarin.Forms.ScrollToPosition position System.Boolean animated ApplySelectedItem(Cell) Declaration public void ApplySelectedItem(Cell cell) Parameters Type Name Description Cell cell Clear() Declaration public void Clear() InsertGroup(TemplatedItemsList<ItemsView<Cell>, Cell>, Cell) Declaration public void InsertGroup(TemplatedItemsList<ItemsView<Cell>, Cell> group, Cell before) Parameters Type Name Description TemplatedItemsList < ItemsView < Cell >, Cell > group Cell before InsertItem(Cell, Cell, TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void InsertItem(Cell cell, Cell before, TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description Cell cell Cell before TemplatedItemsList < ItemsView < Cell >, Cell > group OnRealized() Declaration protected override void OnRealized() Remove(Cell) Declaration public void Remove(Cell cell) Parameters Type Name Description Cell cell Remove(TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void Remove(TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description TemplatedItemsList < ItemsView < Cell >, Cell > group RemoveSource(IEnumerable) Declaration public void RemoveSource(IEnumerable source) Parameters Type Name Description IEnumerable source ResetGroup(TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void ResetGroup(TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description TemplatedItemsList < ItemsView < Cell >, Cell > group"
  },
  "api/Tizen.Wearable.CircularUI.Forms.IndexPage.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.IndexPage.html",
    "title": "Class IndexPage",
    "keywords": "Class IndexPage The IndexPage is extension of Xamarin.Forms.MultiPage. When Page is added/removed at Multipage. circular index is added/removed automatically at the top of window. Inheritance MultiPage < ContentPage > IndexPage Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class IndexPage : MultiPage<ContentPage> Methods CreateDefault(Object) Declaration protected override ContentPage CreateDefault(object item) Parameters Type Name Description System.Object item Returns Type Description ContentPage"
  },
  "api/Tizen.Wearable.CircularUI.Forms.RotaryEventArgs.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.RotaryEventArgs.html",
    "title": "Class RotaryEventArgs",
    "keywords": "Class RotaryEventArgs Event arguments for RotaryEvent. Inheritance EventArgs RotaryEventArgs Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class RotaryEventArgs : EventArgs Properties IsClockwise Gets or sets rotated direction of Rotary device. IsClockwise is true when Rotary device rotated in the clockwise direction or false on counter clockwise. Declaration public bool IsClockwise { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CirclePage.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CirclePage.html",
    "title": "Class CirclePage",
    "keywords": "Class CirclePage The CirclePage is a ContentPage, which allows you to insert views that require CircleSurface, and you can show ToolbarItems with MoreOption. It has an ActionButton, and can use the MenuItem type as text, icon, command, and so on. Inheritance ContentPage CirclePage Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CirclePage : ContentPage Constructors CirclePage() Creates and initializes a new instance of the CirclePage class. Declaration public CirclePage() Fields ActionButtonProperty BindableProperty. Identifies the ActionButton bindable property. Declaration public static readonly BindableProperty ActionButtonProperty Field Value Type Description BindableProperty RotaryFocusObjectProperty BindableProperty. Identifies the RotaryFocusObject bindable property. Declaration public static readonly BindableProperty RotaryFocusObjectProperty Field Value Type Description BindableProperty RotaryFocusTargetNameProperty BindableProperty. Identifies the RotaryFocusTargetName bindable property. Declaration public static readonly BindableProperty RotaryFocusTargetNameProperty Field Value Type Description BindableProperty Properties ActionButton Gets or sets ActionButton that presents a menu item and associates it with a command Declaration public ActionButtonItem ActionButton { get; set; } Property Value Type Description ActionButtonItem CircleSurfaceItems Gets a list of CircleSurfaceItems represented through CircleSurface. Declaration public IList<ICircleSurfaceItem> CircleSurfaceItems { get; } Property Value Type Description IList < ICircleSurfaceItem > RotaryFocusObject Gets object of RotaryFocusObject to receive bezel action(take a rotary event) from the current page. Declaration public IRotaryFocusable RotaryFocusObject { get; } Property Value Type Description IRotaryFocusable RotaryFocusTargetName Gets or sets target name of RotaryFocusObject. If RotaryFocusTargetName is set, it registers only a consumer in the RotaryFocusObject property to receive bezel action (take a rotary event) from the current page Declaration public string RotaryFocusTargetName { get; set; } Property Value Type Description System.String"
  },
  "api/Tizen.Wearable.CircularUI.Forms.IRotaryFocusable.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.IRotaryFocusable.html",
    "title": "Interface IRotaryFocusable",
    "keywords": "Interface IRotaryFocusable The IRotaryFocusable is an interface to take a Rotary Event Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public interface IRotaryFocusable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.RotaryEventHandler.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.RotaryEventHandler.html",
    "title": "Delegate RotaryEventHandler",
    "keywords": "Delegate RotaryEventHandler Delegate for a triggering rotary event Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public delegate void RotaryEventHandler(RotaryEventArgs args); Parameters Type Name Description RotaryEventArgs args Rotated direction of Rotary device"
  },
  "api/Tizen.Wearable.CircularUI.Forms.DateTimeType.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.DateTimeType.html",
    "title": "Enum DateTimeType",
    "keywords": "Enum DateTimeType Enumeration for style type of CircleDateTimeSelector Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public enum DateTimeType : int Fields Name Description Date Style type of \"datepicker/circle\" Time Style type of \"timepicker/circle\""
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleStepperRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleStepperRenderer.html",
    "title": "Class CircleStepperRenderer",
    "keywords": "Class CircleStepperRenderer Inheritance ViewRenderer < CircleStepper , ElmSharp.Wearable.CircleSpinner > CircleStepperRenderer Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleStepperRenderer : ViewRenderer<CircleStepper, ElmSharp.Wearable.CircleSpinner> Constructors CircleStepperRenderer() Declaration public CircleStepperRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Measure(Int32, Int32) Declaration protected override ElmSharp.Size Measure(int availableWidth, int availableHeight) Parameters Type Name Description System.Int32 availableWidth System.Int32 availableHeight Returns Type Description ElmSharp.Size MinimumSize() Declaration protected override Size MinimumSize() Returns Type Description Size OnElementChanged(ElementChangedEventArgs<CircleStepper>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<CircleStepper> e) Parameters Type Name Description ElementChangedEventArgs < CircleStepper > e"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.Watchface.FormsWatchface.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.Watchface.FormsWatchface.html",
    "title": "Class FormsWatchface",
    "keywords": "Class FormsWatchface Inheritance WatchApplication FormsWatchface Namespace : Tizen.Wearable.CircularUI.Forms.Renderer.Watchface Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class FormsWatchface : WatchApplication Constructors FormsWatchface() Declaration public FormsWatchface() Methods LoadWatchface(Xamarin.Forms.Application) Declaration public void LoadWatchface(Xamarin.Forms.Application application) Parameters Type Name Description Xamarin.Forms.Application application OnAppControlReceived(AppControlReceivedEventArgs) Declaration protected override void OnAppControlReceived(AppControlReceivedEventArgs e) Parameters Type Name Description AppControlReceivedEventArgs e OnCreate() Declaration protected override void OnCreate() OnPause() Declaration protected override void OnPause() OnResume() Declaration protected override void OnResume() OnRootViewUpdated(EvasObject) Declaration protected virtual void OnRootViewUpdated(EvasObject rootView) Parameters Type Name Description EvasObject rootView OnTerminate() Declaration protected override void OnTerminate() Run() Declaration public void Run()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.TizenCircleSurfaceEffect.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.TizenCircleSurfaceEffect.html",
    "title": "Class TizenCircleSurfaceEffect",
    "keywords": "Class TizenCircleSurfaceEffect Inheritance PlatformEffect TizenCircleSurfaceEffect Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class TizenCircleSurfaceEffect : PlatformEffect Methods OnAttached() Declaration protected override void OnAttached() OnDetached() Declaration protected override void OnDetached()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CheckDisplayStyle.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CheckDisplayStyle.html",
    "title": "Enum CheckDisplayStyle",
    "keywords": "Enum CheckDisplayStyle Enumeration for the style of the Check. Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public enum CheckDisplayStyle : int Fields Name Description Default The default style is checkbox style. Onoff The toggle switch style. Small The small checkbox style. this style is only for circular devices"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleSliderSurfaceItemImplements.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleSliderSurfaceItemImplements.html",
    "title": "Class CircleSliderSurfaceItemImplements",
    "keywords": "Class CircleSliderSurfaceItemImplements Inheritance ElmSharp.Wearable.CircleSlider CircleSliderSurfaceItemImplements Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleSliderSurfaceItemImplements : ElmSharp.Wearable.CircleSlider Constructors CircleSliderSurfaceItemImplements(CircleSliderSurfaceItem, EvasObject, CircleSurface) Declaration public CircleSliderSurfaceItemImplements(CircleSliderSurfaceItem item, EvasObject parent, CircleSurface surface) Parameters Type Name Description CircleSliderSurfaceItem item EvasObject parent CircleSurface surface"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ICircleSurfaceItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ICircleSurfaceItem.html",
    "title": "Interface ICircleSurfaceItem",
    "keywords": "Interface ICircleSurfaceItem The ICircleSurfaceItem is an interface that controls the items represented in the CircleSurface. Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public interface ICircleSurfaceItem Properties IsVisible Gets or sets CircleSurfaceItem's visibility Declaration bool IsVisible { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Tizen.Wearable.CircularUI.Forms.TwoButtonPage.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.TwoButtonPage.html",
    "title": "Class TwoButtonPage",
    "keywords": "Class TwoButtonPage The TwoButtonPage is a page that has a rectangular area inside the circle as contents area. It also has two buttons and a Title area. Inheritance ContentPage TwoButtonPage Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class TwoButtonPage : ContentPage Fields FirstButtonProperty BindableProperty. Identifies the FirstButton bindable property. Declaration public static readonly BindableProperty FirstButtonProperty Field Value Type Description BindableProperty OverlapProperty BindableProperty. Identifies the Overlap bindable property. Declaration public static readonly BindableProperty OverlapProperty Field Value Type Description BindableProperty SecondButtonProperty BindableProperty. Identifies the SecondButton bindable property. Declaration public static readonly BindableProperty SecondButtonProperty Field Value Type Description BindableProperty Properties FirstButton Gets or sets left button of TwoButtonPage Declaration public MenuItem FirstButton { get; set; } Property Value Type Description MenuItem Overlap Gets or sets the overlap or not overlap the buttons and page display. Declaration public bool Overlap { get; set; } Property Value Type Description System.Boolean SecondButton Gets or sets right button of TwoButtonPage Declaration public MenuItem SecondButton { get; set; } Property Value Type Description MenuItem"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.TizenConfirmPopupEffect.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.TizenConfirmPopupEffect.html",
    "title": "Class TizenConfirmPopupEffect",
    "keywords": "Class TizenConfirmPopupEffect Inheritance PlatformEffect TizenConfirmPopupEffect Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class TizenConfirmPopupEffect : PlatformEffect Methods OnAttached() Declaration protected override void OnAttached() OnDetached() Declaration protected override void OnDetached() OnElementPropertyChanged(PropertyChangedEventArgs) Declaration protected override void OnElementPropertyChanged(PropertyChangedEventArgs args) Parameters Type Name Description PropertyChangedEventArgs args"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CirclePageNotFoundException.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CirclePageNotFoundException.html",
    "title": "Class CirclePageNotFoundException",
    "keywords": "Class CirclePageNotFoundException The CirclePageNotFoundException is an Exception class that occurs when a CircleSurface has no child. Inheritance Exception CirclePageNotFoundException Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CirclePageNotFoundException : Exception Constructors CirclePageNotFoundException() Creates and initializes a new instance of the CirclePageNotFoundException class. Declaration public CirclePageNotFoundException()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.TwoButtonPageWidget.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.TwoButtonPageWidget.html",
    "title": "Class TwoButtonPageWidget",
    "keywords": "Class TwoButtonPageWidget Inheritance Background TwoButtonPageWidget Implements IContainable < EvasObject > Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class TwoButtonPageWidget : Background, IContainable<EvasObject> Constructors TwoButtonPageWidget(EvasObject) Declaration public TwoButtonPageWidget(EvasObject parent) Parameters Type Name Description EvasObject parent Properties Canvas Declaration public Canvas Canvas { get; } Property Value Type Description Canvas Children Declaration public IList<EvasObject> Children { get; } Property Value Type Description IList < EvasObject > Overlap Declaration public bool Overlap { get; set; } Property Value Type Description System.Boolean Methods HideButton1() Declaration public void HideButton1() HideButton2() Declaration public void HideButton2() OnUnrealize() Declaration protected override void OnUnrealize() ShowButton1(String, String, Action) Declaration public void ShowButton1(string text, string image = null, Action action = null) Parameters Type Name Description System.String text System.String image Action action ShowButton2(String, String, Action) Declaration public void ShowButton2(string text, string image = null, Action action = null) Parameters Type Name Description System.String text System.String image Action action Events LayoutUpdated Declaration public event EventHandler<LayoutEventArgs> LayoutUpdated Event Type Type Description EventHandler < LayoutEventArgs > Implements IContainable<>"
  }
}