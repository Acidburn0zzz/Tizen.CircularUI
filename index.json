{
  "index.html": {
    "href": "index.html",
    "title": "Tizen CircularUI",
    "keywords": "Tizen CircularUI The Tizen CircularUI is a set of helpful extensions to the Xamarin Forms framework on the Samsung Gear device. The banaries are available via NuGet (package name CircularUI) with the source available at here. Controls Name Description A subclass of Xamarin.Forms.Page that can shows Circular ProgressBar and Circular Slider and the button on bottom of screen. it can also show MenuItems on the circular menu.(MoreOption) A subclass of Xamarin.Forms.ListView control fits in the circular screen. A control fits in the circular screen. it can be shown in CirclePage only. A Slider control that responds to the bezel action and fits in the circular screen. A subclass of Xamarin.Forms.ScrollView that can be scrolled by the bezel action. A control to select date or time fits in the circular screen. A control to select a number of steps fits in the circular screen. A container to layout children linear in the circular area. A subclass of multiple page that can slide child page horizontal and has dots on top of the screen for the number of child pages. A subclass of Xamarin.Forms.Switch control with some different styles. A event receiver for using the bezel action. A radio control fits in the circular screen. A popup for simple feedback. A subclass of Xamarin.Forms.Page has two button in left and right side of the circular screen. A context popup fits in the circular screen. A popup has two button in left and right side of the circular screen. the effect to show a small popup has one or two button sticky with any control. A popup has a control to show progress and one button in bottom side of circular screen."
  },
  "api/CircularUI.Tizen.HeaderOrFooterItemClass.html": {
    "href": "api/CircularUI.Tizen.HeaderOrFooterItemClass.html",
    "title": "Class HeaderOrFooterItemClass",
    "keywords": "Class HeaderOrFooterItemClass Inheritance System.Object HeaderOrFooterItemClass Namespace : CircularUI.Tizen Assembly : CircularUI.Tizen.dll Syntax public class HeaderOrFooterItemClass : GenItemClass Constructors HeaderOrFooterItemClass() Declaration public HeaderOrFooterItemClass() Methods OnGetContent(Object, String) Declaration protected EvasObject OnGetContent(object data, string part) Parameters Type Name Description System.Object data System.String part Returns Type Description EvasObject"
  },
  "api/CircularUI.CircleSurfaceItem.html": {
    "href": "api/CircularUI.CircleSurfaceItem.html",
    "title": "Class CircleSurfaceItem",
    "keywords": "Class CircleSurfaceItem The CircleSurfaceItem is a class that controls the items represented in the CircleSurface. Inheritance System.Object CircleSurfaceItem CircleProgressBarSurfaceItem CircleSliderSurfaceItem Implements ICircleSurfaceItem Namespace : CircularUI Assembly : CircularUI.dll Syntax public class CircleSurfaceItem : Element, ICircleSurfaceItem Fields BackgroundAngleOffsetProperty BindableProperty. Identifies the BackgroundAngleOffset bindable property. Declaration public static readonly BindableProperty BackgroundAngleOffsetProperty Field Value Type Description BindableProperty BackgroundAngleProperty BindableProperty. Identifies the BackgroundAngle bindable property. Declaration public static readonly BindableProperty BackgroundAngleProperty Field Value Type Description BindableProperty BackgroundColorProperty BindableProperty. Identifies the BackgroundColor bindable property. Declaration public static readonly BindableProperty BackgroundColorProperty Field Value Type Description BindableProperty BackgroundLineWidthProperty BindableProperty. Identifies the BackgroundLineWidth bindable property. Declaration public static readonly BindableProperty BackgroundLineWidthProperty Field Value Type Description BindableProperty BackgroundRadiusProperty BindableProperty. Identifies the BackgroundRadius bindable property. Declaration public static readonly BindableProperty BackgroundRadiusProperty Field Value Type Description BindableProperty BarAngleMaximumProperty BindableProperty. Identifies the BarAngleMaximum bindable property. Declaration public static readonly BindableProperty BarAngleMaximumProperty Field Value Type Description BindableProperty BarAngleMinimumProperty BindableProperty. Identifies the BarAngleMinimum bindable property. Declaration public static readonly BindableProperty BarAngleMinimumProperty Field Value Type Description BindableProperty BarAngleOffsetProperty BindableProperty. Identifies the BarAngleOffset bindable property. Declaration public static readonly BindableProperty BarAngleOffsetProperty Field Value Type Description BindableProperty BarAngleProperty BindableProperty. Identifies the BarAngle bindable property. Declaration public static readonly BindableProperty BarAngleProperty Field Value Type Description BindableProperty BarColorProperty BindableProperty. Identifies the BarColor bindable property. Declaration public static readonly BindableProperty BarColorProperty Field Value Type Description BindableProperty BarLineWidthProperty BindableProperty. Identifies the BarLineWidth bindable property. Declaration public static readonly BindableProperty BarLineWidthProperty Field Value Type Description BindableProperty BarRadiusProperty BindableProperty. Identifies the BarRadius bindable property. Declaration public static readonly BindableProperty BarRadiusProperty Field Value Type Description BindableProperty IsEnabledProperty BindableProperty. Identifies the IsEnabled bindable property. Declaration public static readonly BindableProperty IsEnabledProperty Field Value Type Description BindableProperty IsVisibleProperty BindableProperty. Identifies the IsVisible bindable property. Declaration public static readonly BindableProperty IsVisibleProperty Field Value Type Description BindableProperty Properties BackgroundAngle Gets or sets the background angle value. If background angle is 180, background of surface item draw 180 degree from background angle offset. Declaration public double BackgroundAngle { get; set; } Property Value Type Description System.Double BackgroundAngleOffset Gets or sets the background angle offset value. if background angle offset is 30, background of surface item start at 30 degree. Declaration public double BackgroundAngleOffset { get; set; } Property Value Type Description System.Double BackgroundColor Gets or sets the background color value. Declaration public Color BackgroundColor { get; set; } Property Value Type Description Color BackgroundLineWidth Gets or sets the background line width value. Declaration public int BackgroundLineWidth { get; set; } Property Value Type Description System.Int32 BackgroundRadius Gets or sets the background radius value. Declaration public double BackgroundRadius { get; set; } Property Value Type Description System.Double BarAngle Gets or sets the bar angle value. If bar angle is 180, bar of surface item draw 180 degree from bar angle offset. Declaration public double BarAngle { get; set; } Property Value Type Description System.Double BarAngleMaximum Gets or sets the bar angle maximum value. Declaration public double BarAngleMaximum { get; set; } Property Value Type Description System.Double BarAngleMinimum Gets or sets the bar angle minimum value. Declaration public double BarAngleMinimum { get; set; } Property Value Type Description System.Double BarAngleOffset Gets or sets the bar angle offset value. if bar angle offset is 30, bar of surface item start at 30 degree. Declaration public double BarAngleOffset { get; set; } Property Value Type Description System.Double BarColor Gets or sets the bar color value. Declaration public Color BarColor { get; set; } Property Value Type Description Color BarLineWidth Gets or sets the bar line width value. Declaration public int BarLineWidth { get; set; } Property Value Type Description System.Int32 BarRadius Gets or sets the bar radius value. Declaration public double BarRadius { get; set; } Property Value Type Description System.Double IsEnabled Gets or sets a value indicating whether this element is enabled. Declaration public bool IsEnabled { get; set; } Property Value Type Description System.Boolean IsVisible Gets or sets the visibility value of circle surface item. Declaration public bool IsVisible { get; set; } Property Value Type Description System.Boolean Implements ICircleSurfaceItem"
  },
  "api/CircularUI.Check.html": {
    "href": "api/CircularUI.Check.html",
    "title": "Class Check",
    "keywords": "Class Check The check widget allows for toggling a value between true and false. The check is extension of Xamarin.Forms.Switch. Inheritance System.Object Check Namespace : CircularUI Assembly : CircularUI.dll Syntax public class Check : Switch Examples var check = new Check { HorizontalOptions = LayoutOptions.Center, VerticalOptions = LayoutOptions.Center, DisplayStyle = \"Onoff\" } Fields DisplayStyleProperty BindableProperty. Identifies the DisplayStyle bindable property. Declaration public static readonly BindableProperty DisplayStyleProperty Field Value Type Description BindableProperty Properties DisplayStyle Gets or sets display style of Check. Declaration public CheckDisplayStyle DisplayStyle { get; set; } Property Value Type Description CheckDisplayStyle"
  },
  "api/CircularUI.CirclePageNotFoundException.html": {
    "href": "api/CircularUI.CirclePageNotFoundException.html",
    "title": "Class CirclePageNotFoundException",
    "keywords": "Class CirclePageNotFoundException The CirclePageNotFoundException is an Exception class that occurs when a CircleSurface has no child. Inheritance System.Object CirclePageNotFoundException Namespace : CircularUI Assembly : CircularUI.dll Syntax public class CirclePageNotFoundException : Exception Constructors CirclePageNotFoundException() Creates and initializes a new instance of the CirclePageNotFoundException class. Declaration public CirclePageNotFoundException()"
  },
  "api/CircularUI.Tizen.InformationPopupImplementation.html": {
    "href": "api/CircularUI.Tizen.InformationPopupImplementation.html",
    "title": "Class InformationPopupImplementation",
    "keywords": "Class InformationPopupImplementation Inheritance System.Object InformationPopupImplementation Implements CircularUI.IInformationPopup IDisposable Namespace : CircularUI.Tizen Assembly : CircularUI.Tizen.dll Syntax public class InformationPopupImplementation : object, IInformationPopup, IDisposable Constructors InformationPopupImplementation() Declaration public InformationPopupImplementation() Properties BottomButton Declaration public MenuItem BottomButton { get; set; } Property Value Type Description MenuItem IsProgressRunning Declaration public bool IsProgressRunning { get; set; } Property Value Type Description System.Boolean Text Declaration public string Text { get; set; } Property Value Type Description System.String Title Declaration public string Title { get; set; } Property Value Type Description System.String Methods Dismiss() Declaration public void Dismiss() Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Finalize() Declaration protected void Finalize() Show() Declaration public void Show() Events BackButtonPressed Declaration public event EventHandler BackButtonPressed Event Type Type Description EventHandler Implements CircularUI.IInformationPopup IDisposable"
  },
  "api/CircularUI.IRotaryEventReceiver.html": {
    "href": "api/CircularUI.IRotaryEventReceiver.html",
    "title": "Interface IRotaryEventReceiver",
    "keywords": "Interface IRotaryEventReceiver The IRotaryEventReceiver is a receiver interface to take Rotary Events Namespace : CircularUI Assembly : CircularUI.dll Syntax public interface IRotaryEventReceiver : IRotaryFocusable Methods Rotate(RotaryEventArgs) Rotate it by the RotaryEventArgs value. Declaration void Rotate(RotaryEventArgs args) Parameters Type Name Description RotaryEventArgs args Rotated direction of Rotary device"
  },
  "api/CircularUI.Tizen.CircleDateTimeSelectorRenderer.html": {
    "href": "api/CircularUI.Tizen.CircleDateTimeSelectorRenderer.html",
    "title": "Class CircleDateTimeSelectorRenderer",
    "keywords": "Class CircleDateTimeSelectorRenderer Inheritance System.Object CircleDateTimeSelectorRenderer Namespace : CircularUI.Tizen Assembly : CircularUI.Tizen.dll Syntax public class CircleDateTimeSelectorRenderer : ViewRenderer<CircleDateTimeSelector, ElmSharp.Wearable.CircleDateTimeSelector> Constructors CircleDateTimeSelectorRenderer() Declaration public CircleDateTimeSelectorRenderer() Methods Measure(Int32, Int32) Declaration protected override ElmSharp.Size Measure(int availableWidth, int availableHeight) Parameters Type Name Description System.Int32 availableWidth System.Int32 availableHeight Returns Type Description ElmSharp.Size MinimumSize() Declaration protected override Xamarin.Forms.Size MinimumSize() Returns Type Description Xamarin.Forms.Size OnElementChanged(ElementChangedEventArgs<CircleDateTimeSelector>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<CircleDateTimeSelector> e) Parameters Type Name Description ElementChangedEventArgs < CircleDateTimeSelector > e"
  },
  "api/CircularUI.Tizen.ConfirmationPopupImplementation.html": {
    "href": "api/CircularUI.Tizen.ConfirmationPopupImplementation.html",
    "title": "Class ConfirmationPopupImplementation",
    "keywords": "Class ConfirmationPopupImplementation Inheritance System.Object ConfirmationPopupImplementation Implements CircularUI.IConfirmationPopup IDisposable Namespace : CircularUI.Tizen Assembly : CircularUI.Tizen.dll Syntax public class ConfirmationPopupImplementation : object, IConfirmationPopup, IDisposable Constructors ConfirmationPopupImplementation() Declaration public ConfirmationPopupImplementation() Properties Content Declaration public View Content { get; set; } Property Value Type Description View FirstButton Declaration public MenuItem FirstButton { get; set; } Property Value Type Description MenuItem SecondButton Declaration public MenuItem SecondButton { get; set; } Property Value Type Description MenuItem Text Declaration public string Text { get; set; } Property Value Type Description System.String Title Declaration public string Title { get; set; } Property Value Type Description System.String Methods Dismiss() Declaration public void Dismiss() Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Finalize() Declaration protected void Finalize() Show() Declaration public void Show() Events BackButtonPressed Declaration public event EventHandler BackButtonPressed Event Type Type Description EventHandler Implements CircularUI.IConfirmationPopup IDisposable"
  },
  "api/CircularUI.Tizen.CircleListView.html": {
    "href": "api/CircularUI.Tizen.CircleListView.html",
    "title": "Class CircleListView",
    "keywords": "Class CircleListView Inheritance System.Object CircleListView Namespace : CircularUI.Tizen Assembly : CircularUI.Tizen.dll Syntax public class CircleListView : CircleGenList Constructors CircleListView(EvasObject, CircleSurface) Declaration public CircleListView(EvasObject parent, CircleSurface surface) Parameters Type Name Description EvasObject parent CircleSurface surface Properties Footer Declaration public VisualElement Footer { get; set; } Property Value Type Description VisualElement Header Declaration public VisualElement Header { get; set; } Property Value Type Description VisualElement Methods AddGroup(TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void AddGroup(TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description TemplatedItemsList < ItemsView < Cell >, Cell > group AddItem(Cell, TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void AddItem(Cell cell, TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description Cell cell TemplatedItemsList < ItemsView < Cell >, Cell > group AddSource(IEnumerable) Declaration public void AddSource(IEnumerable source) Parameters Type Name Description IEnumerable source AddSource(IEnumerable, Cell) Declaration public void AddSource(IEnumerable source, Cell before) Parameters Type Name Description IEnumerable source Cell before AddSource(IEnumerable, TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void AddSource(IEnumerable source, TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description IEnumerable source TemplatedItemsList < ItemsView < Cell >, Cell > group AddSource(IEnumerable, TemplatedItemsList<ItemsView<Cell>, Cell>, Cell) Declaration public void AddSource(IEnumerable source, TemplatedItemsList<ItemsView<Cell>, Cell> group, Cell before) Parameters Type Name Description IEnumerable source TemplatedItemsList < ItemsView < Cell >, Cell > group Cell before ApplyScrollTo(Cell, Xamarin.Forms.ScrollToPosition, Boolean) Declaration public void ApplyScrollTo(Cell cell, Xamarin.Forms.ScrollToPosition position, bool animated) Parameters Type Name Description Cell cell Xamarin.Forms.ScrollToPosition position System.Boolean animated ApplySelectedItem(Cell) Declaration public void ApplySelectedItem(Cell cell) Parameters Type Name Description Cell cell Clear() Declaration public void Clear() InsertGroup(TemplatedItemsList<ItemsView<Cell>, Cell>, Cell) Declaration public void InsertGroup(TemplatedItemsList<ItemsView<Cell>, Cell> group, Cell before) Parameters Type Name Description TemplatedItemsList < ItemsView < Cell >, Cell > group Cell before InsertItem(Cell, Cell, TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void InsertItem(Cell cell, Cell before, TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description Cell cell Cell before TemplatedItemsList < ItemsView < Cell >, Cell > group OnRealized() Declaration protected override void OnRealized() Remove(Cell) Declaration public void Remove(Cell cell) Parameters Type Name Description Cell cell Remove(TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void Remove(TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description TemplatedItemsList < ItemsView < Cell >, Cell > group RemoveSource(IEnumerable) Declaration public void RemoveSource(IEnumerable source) Parameters Type Name Description IEnumerable source ResetGroup(TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void ResetGroup(TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description TemplatedItemsList < ItemsView < Cell >, Cell > group"
  },
  "api/CircularUI.Tizen.IndexPageRenderer.html": {
    "href": "api/CircularUI.Tizen.IndexPageRenderer.html",
    "title": "Class IndexPageRenderer",
    "keywords": "Class IndexPageRenderer Inheritance System.Object IndexPageRenderer Namespace : CircularUI.Tizen Assembly : CircularUI.Tizen.dll Syntax public class IndexPageRenderer : VisualElementRenderer<IndexPage> Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing OnElementChanged(ElementChangedEventArgs<IndexPage>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<IndexPage> e) Parameters Type Name Description ElementChangedEventArgs < IndexPage > e"
  },
  "api/CircularUI.Tizen.CircleListViewRenderer.html": {
    "href": "api/CircularUI.Tizen.CircleListViewRenderer.html",
    "title": "Class CircleListViewRenderer",
    "keywords": "Class CircleListViewRenderer Inheritance System.Object CircleListViewRenderer Namespace : CircularUI.Tizen Assembly : CircularUI.Tizen.dll Syntax public class CircleListViewRenderer : ViewRenderer<CircleListView, CircleListView> Constructors CircleListViewRenderer() Declaration public CircleListViewRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing OnElementChanged(ElementChangedEventArgs<CircleListView>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<CircleListView> e) Parameters Type Name Description ElementChangedEventArgs < CircleListView > e"
  },
  "api/CircularUI.ConfirmationPopup.html": {
    "href": "api/CircularUI.ConfirmationPopup.html",
    "title": "Class ConfirmationPopup",
    "keywords": "Class ConfirmationPopup The ConfirmationPopup describe pop-up which has circular two button, title, text, and content area. Inheritance System.Object ConfirmationPopup Namespace : CircularUI Assembly : CircularUI.dll Syntax public class ConfirmationPopup : BindableObject Examples var leftButton = new MenuItem() { Text = \"Save\", Icon = new FileImageSource{ File = \"icon_save.png\", }, Command = new Command(() => { ... }) }; var rightButton = new MenuItem() { Text = \"Delete\", Icon = new FileImageSource{ File = \"icon_delete.png\", }, Command = new Command(() => { ... }) }; var popup = new ConfirmationPopup(); popup.FirstButton = leftButton; popup.SecondButton = rightButton; popup.Title = \"Popup title\"; popup.Content = new StackLayout() { HorizontalOptions = LayoutOptions.FillAndExpand, Children = { new Label { Text = \"Will be saved\", }, } }; popup.BackButtonPressed += (s, e) => { popup.Dismiss(); }; Constructors ConfirmationPopup() Creates and initializes a new instance of the ConfirmationPopup class. Declaration public ConfirmationPopup() Fields ContentProperty BindableProperty. Identifies the content bindable property. Declaration public static readonly BindableProperty ContentProperty Field Value Type Description BindableProperty FirstButtonProperty BindableProperty. Identifies the first button bindable property. Declaration public static readonly BindableProperty FirstButtonProperty Field Value Type Description BindableProperty SecondButtonProperty BindableProperty. Identifies the second button bindable property. Declaration public static readonly BindableProperty SecondButtonProperty Field Value Type Description BindableProperty TextProperty BindableProperty. Identifies the title bindable property. Declaration public static readonly BindableProperty TextProperty Field Value Type Description BindableProperty TitleProperty BindableProperty. Identifies the title bindable property. Declaration public static readonly BindableProperty TitleProperty Field Value Type Description BindableProperty Properties Content Gets or sets content view of the Popup. Declaration public View Content { get; set; } Property Value Type Description View FirstButton Gets or sets left button of the Popup. Declaration public MenuItem FirstButton { get; set; } Property Value Type Description MenuItem SecondButton Gets or sets right button of the Popup. Declaration public MenuItem SecondButton { get; set; } Property Value Type Description MenuItem Text Gets or sets text of the Popup. Declaration public string Text { get; set; } Property Value Type Description System.String Title Gets or sets title of the Popup. Declaration public string Title { get; set; } Property Value Type Description System.String Methods Dismiss() Dismisses the ConfirmationPopup. Declaration public void Dismiss() Show() Shows the ConfirmationPopup. Declaration public void Show() Events BackButtonPressed Occurs when the device's back button is pressed. Declaration public event EventHandler BackButtonPressed Event Type Type Description EventHandler"
  },
  "api/CircularUI.CirclePage.html": {
    "href": "api/CircularUI.CirclePage.html",
    "title": "Class CirclePage",
    "keywords": "Class CirclePage The CirclePage is a ContentPage, which allows you to insert views that require CircleSurface, and you can show ToolbarItems with MoreOption. It has an ActionButton, and can use the MenuItem type as text, icon, command, and so on. Inheritance System.Object CirclePage Namespace : CircularUI Assembly : CircularUI.dll Syntax public class CirclePage : ContentPage Constructors CirclePage() Creates and initializes a new instance of the CirclePage class. Declaration public CirclePage() Fields ActionButtonProperty BindableProperty. Identifies the ActionButton bindable property. Declaration public static readonly BindableProperty ActionButtonProperty Field Value Type Description BindableProperty RotaryFocusObjectProperty BindableProperty. Identifies the RotaryFocusObject bindable property. Declaration public static readonly BindableProperty RotaryFocusObjectProperty Field Value Type Description BindableProperty RotaryFocusTargetNameProperty BindableProperty. Identifies the RotaryFocusTargetName bindable property. Declaration public static readonly BindableProperty RotaryFocusTargetNameProperty Field Value Type Description BindableProperty Properties ActionButton Gets or sets ActionButton that presents a menu item and associates it with a command Declaration public ActionButtonItem ActionButton { get; set; } Property Value Type Description ActionButtonItem CircleSurfaceItems Gets a list of CircleSurfaceItems represented through CircleSurface. Declaration public IList<ICircleSurfaceItem> CircleSurfaceItems { get; } Property Value Type Description IList < ICircleSurfaceItem > RotaryFocusObject Gets object of RotaryFocusObject to receive bezel action(take a rotary event) from the current page. Declaration public IRotaryFocusable RotaryFocusObject { get; } Property Value Type Description IRotaryFocusable RotaryFocusTargetName Gets or sets target name of RotaryFocusObject. If RotaryFocusTargetName is set, it registers only a consumer in the RotaryFocusObject property to receive bezel action (take a rotary event) from the current page Declaration public string RotaryFocusTargetName { get; set; } Property Value Type Description System.String"
  },
  "api/CircularUI.CircleProgressBarSurfaceItem.html": {
    "href": "api/CircularUI.CircleProgressBarSurfaceItem.html",
    "title": "Class CircleProgressBarSurfaceItem",
    "keywords": "Class CircleProgressBarSurfaceItem The CircleProgressBarSurfaceItem displays circular progressbar at CirclePage. Inheritance System.Object CircleSurfaceItem CircleProgressBarSurfaceItem Implements ICircleSurfaceItem Inherited Members CircleSurfaceItem.BackgroundAngleProperty CircleSurfaceItem.BackgroundAngleOffsetProperty CircleSurfaceItem.BackgroundColorProperty CircleSurfaceItem.BackgroundLineWidthProperty CircleSurfaceItem.BackgroundRadiusProperty CircleSurfaceItem.BarAngleProperty CircleSurfaceItem.BarAngleOffsetProperty CircleSurfaceItem.BarAngleMaximumProperty CircleSurfaceItem.BarAngleMinimumProperty CircleSurfaceItem.BarColorProperty CircleSurfaceItem.BarLineWidthProperty CircleSurfaceItem.BarRadiusProperty CircleSurfaceItem.IsVisibleProperty CircleSurfaceItem.IsEnabledProperty CircleSurfaceItem.BackgroundAngle CircleSurfaceItem.BackgroundAngleOffset CircleSurfaceItem.BackgroundColor CircleSurfaceItem.BackgroundLineWidth CircleSurfaceItem.BackgroundRadius CircleSurfaceItem.BarAngle CircleSurfaceItem.BarAngleOffset CircleSurfaceItem.BarAngleMaximum CircleSurfaceItem.BarAngleMinimum CircleSurfaceItem.BarColor CircleSurfaceItem.BarLineWidth CircleSurfaceItem.BarRadius CircleSurfaceItem.IsVisible CircleSurfaceItem.IsEnabled Namespace : CircularUI Assembly : CircularUI.dll Syntax public class CircleProgressBarSurfaceItem : CircleSurfaceItem, ICircleSurfaceItem Fields ValueProperty BindableProperty. Identifies the Value bindable property. Declaration public static readonly BindableProperty ValueProperty Field Value Type Description BindableProperty Properties Value Gets or sets the value of the progressbar. Declaration public double Value { get; set; } Property Value Type Description System.Double Implements ICircleSurfaceItem"
  },
  "api/CircularUI.ICircleSurfaceItem.html": {
    "href": "api/CircularUI.ICircleSurfaceItem.html",
    "title": "Interface ICircleSurfaceItem",
    "keywords": "Interface ICircleSurfaceItem The ICircleSurfaceItem is an interface that controls the items represented in the CircleSurface. Namespace : CircularUI Assembly : CircularUI.dll Syntax public interface ICircleSurfaceItem Properties IsVisible Gets or sets CircleSurfaceItem's visibility Declaration bool IsVisible { get; set; } Property Value Type Description System.Boolean"
  },
  "api/CircularUI.Tizen.html": {
    "href": "api/CircularUI.Tizen.html",
    "title": "Namespace CircularUI.Tizen",
    "keywords": "Namespace CircularUI.Tizen Classes CheckRenderer CircleDateTimeSelectorRenderer CircleListView CircleListViewRenderer CirclePageRenderer CircleSliderSurfaceItemImplements CircleStepperRenderer CircularUI ConfirmationPopupImplementation HeaderOrFooterItemClass IndexPageRenderer InformationPopupImplementation ListViewCache PaddingItemClass RadioRenderer TizenConfirmPopupEffect TwoButtonPageRenderer TwoButtonPageWidget"
  },
  "api/CircularUI.Toast.html": {
    "href": "api/CircularUI.Toast.html",
    "title": "Class Toast",
    "keywords": "Class Toast The Toast class provides properties that show simple types of messages Inheritance System.Object Toast Namespace : CircularUI Assembly : CircularUI.dll Syntax public sealed class Toast : object Examples Toast.DisplayText(\"Hello World\", 3000) Toast.DisplayIconText(\"Hello World\", new FileImageSource { File = \"icon.jpg\" }, 3000) Methods DisplayIconText(String, FileImageSource, Int32) It shows simplest icon and text messege. Declaration public static void DisplayIconText(string text, FileImageSource icon, int duration = 3000) Parameters Type Name Description System.String text The body text of the toast. FileImageSource icon The file path of the toast icon. System.Int32 duration How long to display the text in milliseconds. DisplayText(String, Int32) It shows the simplest form of the message. Declaration public static void DisplayText(string text, int duration = 3000) Parameters Type Name Description System.String text The body text of the toast. System.Int32 duration How long to display the text in milliseconds."
  },
  "api/CircularUI.Tizen.RadioRenderer.html": {
    "href": "api/CircularUI.Tizen.RadioRenderer.html",
    "title": "Class RadioRenderer",
    "keywords": "Class RadioRenderer Inheritance System.Object RadioRenderer Namespace : CircularUI.Tizen Assembly : CircularUI.Tizen.dll Syntax public class RadioRenderer : ViewRenderer<Radio, ElmSharp.Radio> Constructors RadioRenderer() Declaration public RadioRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing OnElementChanged(ElementChangedEventArgs<Radio>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<Radio> e) Parameters Type Name Description ElementChangedEventArgs < Radio > e"
  },
  "api/CircularUI.Tizen.TwoButtonPageWidget.html": {
    "href": "api/CircularUI.Tizen.TwoButtonPageWidget.html",
    "title": "Class TwoButtonPageWidget",
    "keywords": "Class TwoButtonPageWidget Inheritance System.Object TwoButtonPageWidget Implements IContainable < EvasObject > Namespace : CircularUI.Tizen Assembly : CircularUI.Tizen.dll Syntax public class TwoButtonPageWidget : Background, IContainable<EvasObject> Constructors TwoButtonPageWidget(EvasObject) Declaration public TwoButtonPageWidget(EvasObject parent) Parameters Type Name Description EvasObject parent Properties Canvas Declaration public Canvas Canvas { get; } Property Value Type Description Canvas Children Declaration public IList<EvasObject> Children { get; } Property Value Type Description IList < EvasObject > Title Declaration public string Title { get; set; } Property Value Type Description System.String Methods HideButton1() Declaration public void HideButton1() HideButton2() Declaration public void HideButton2() OnUnrealize() Declaration protected override void OnUnrealize() ShowButton1(String, String, Action) Declaration public void ShowButton1(string text, string image = null, Action action = null) Parameters Type Name Description System.String text System.String image Action action ShowButton2(String, String, Action) Declaration public void ShowButton2(string text, string image = null, Action action = null) Parameters Type Name Description System.String text System.String image Action action Events LayoutUpdated Declaration public event EventHandler<LayoutEventArgs> LayoutUpdated Event Type Type Description EventHandler < LayoutEventArgs > Implements IContainable<>"
  },
  "api/CircularUI.CircleSliderSurfaceItem.html": {
    "href": "api/CircularUI.CircleSliderSurfaceItem.html",
    "title": "Class CircleSliderSurfaceItem",
    "keywords": "Class CircleSliderSurfaceItem The CircleSliderSurfaceItem displays circular slider at CirclePage. Inheritance System.Object CircleSurfaceItem CircleSliderSurfaceItem Implements ICircleSurfaceItem IRotaryFocusable Inherited Members CircleSurfaceItem.BackgroundAngleProperty CircleSurfaceItem.BackgroundAngleOffsetProperty CircleSurfaceItem.BackgroundColorProperty CircleSurfaceItem.BackgroundLineWidthProperty CircleSurfaceItem.BackgroundRadiusProperty CircleSurfaceItem.BarAngleProperty CircleSurfaceItem.BarAngleOffsetProperty CircleSurfaceItem.BarAngleMaximumProperty CircleSurfaceItem.BarAngleMinimumProperty CircleSurfaceItem.BarColorProperty CircleSurfaceItem.BarLineWidthProperty CircleSurfaceItem.BarRadiusProperty CircleSurfaceItem.IsVisibleProperty CircleSurfaceItem.IsEnabledProperty CircleSurfaceItem.BackgroundAngle CircleSurfaceItem.BackgroundAngleOffset CircleSurfaceItem.BackgroundColor CircleSurfaceItem.BackgroundLineWidth CircleSurfaceItem.BackgroundRadius CircleSurfaceItem.BarAngle CircleSurfaceItem.BarAngleOffset CircleSurfaceItem.BarAngleMaximum CircleSurfaceItem.BarAngleMinimum CircleSurfaceItem.BarColor CircleSurfaceItem.BarLineWidth CircleSurfaceItem.BarRadius CircleSurfaceItem.IsVisible CircleSurfaceItem.IsEnabled Namespace : CircularUI Assembly : CircularUI.dll Syntax public class CircleSliderSurfaceItem : CircleSurfaceItem, ICircleSurfaceItem, IRotaryFocusable Fields IncrementProperty BindableProperty. Identifies the Increment bindable property. Declaration public static readonly BindableProperty IncrementProperty Field Value Type Description BindableProperty MaximumProperty BindableProperty. Identifies the Maximum bindable property. Declaration public static readonly BindableProperty MaximumProperty Field Value Type Description BindableProperty MinimumProperty BindableProperty. Identifies the Minimum bindable property. Declaration public static readonly BindableProperty MinimumProperty Field Value Type Description BindableProperty ValueProperty BindableProperty. Identifies the Value bindable property. Declaration public static readonly BindableProperty ValueProperty Field Value Type Description BindableProperty Properties Increment Gets or sets the Increment value. The value of the slider is increased/decreased by the Increment value. Declaration public double Increment { get; set; } Property Value Type Description System.Double Maximum Gets or sets the maximum value of the slider. Declaration public double Maximum { get; set; } Property Value Type Description System.Double Minimum Gets or sets the minimum value of the slider. Declaration public double Minimum { get; set; } Property Value Type Description System.Double Value Gets or sets the value of the slider. Declaration public double Value { get; set; } Property Value Type Description System.Double Implements ICircleSurfaceItem IRotaryFocusable"
  },
  "api/CircularUI.CircleStackLayout.html": {
    "href": "api/CircularUI.CircleStackLayout.html",
    "title": "Class CircleStackLayout",
    "keywords": "Class CircleStackLayout Inheritance System.Object CircleStackLayout Namespace : CircularUI Assembly : CircularUI.dll Syntax public class CircleStackLayout : StackLayout Methods LayoutChildren(Double, Double, Double, Double) Declaration protected override void LayoutChildren(double x, double y, double width, double height) Parameters Type Name Description System.Double x System.Double y System.Double width System.Double height OnMeasure(Double, Double) Declaration protected override SizeRequest OnMeasure(double widthConstraint, double heightConstraint) Parameters Type Name Description System.Double widthConstraint System.Double heightConstraint Returns Type Description SizeRequest"
  },
  "api/CircularUI.Tizen.CheckRenderer.html": {
    "href": "api/CircularUI.Tizen.CheckRenderer.html",
    "title": "Class CheckRenderer",
    "keywords": "Class CheckRenderer Inheritance System.Object CheckRenderer Namespace : CircularUI.Tizen Assembly : CircularUI.Tizen.dll Syntax public class CheckRenderer : SwitchRenderer Constructors CheckRenderer() Declaration public CheckRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing OnElementChanged(ElementChangedEventArgs<Switch>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<Switch> e) Parameters Type Name Description ElementChangedEventArgs < Switch > e"
  },
  "api/CircularUI.IRotaryFocusable.html": {
    "href": "api/CircularUI.IRotaryFocusable.html",
    "title": "Interface IRotaryFocusable",
    "keywords": "Interface IRotaryFocusable The IRotaryFocusable is an interface to take a Rotary Event Namespace : CircularUI Assembly : CircularUI.dll Syntax public interface IRotaryFocusable"
  },
  "api/CircularUI.Tizen.Watchface.FormsWatchface.html": {
    "href": "api/CircularUI.Tizen.Watchface.FormsWatchface.html",
    "title": "Class FormsWatchface",
    "keywords": "Class FormsWatchface Inheritance System.Object FormsWatchface Namespace : CircularUI.Tizen.Watchface Assembly : CircularUI.Tizen.dll Syntax public class FormsWatchface : WatchApplication Constructors FormsWatchface() Declaration public FormsWatchface() Methods LoadWatchface(Xamarin.Forms.Application) Declaration public void LoadWatchface(Xamarin.Forms.Application application) Parameters Type Name Description Xamarin.Forms.Application application OnAppControlReceived(AppControlReceivedEventArgs) Declaration protected override void OnAppControlReceived(AppControlReceivedEventArgs e) Parameters Type Name Description AppControlReceivedEventArgs e OnCreate() Declaration protected override void OnCreate() OnPause() Declaration protected override void OnPause() OnResume() Declaration protected override void OnResume() OnRootViewUpdated(EvasObject) Declaration protected virtual void OnRootViewUpdated(EvasObject rootView) Parameters Type Name Description EvasObject rootView OnTerminate() Declaration protected override void OnTerminate() Run() Declaration public void Run()"
  },
  "api/CircularUI.Tizen.ListViewCache.html": {
    "href": "api/CircularUI.Tizen.ListViewCache.html",
    "title": "Class ListViewCache",
    "keywords": "Class ListViewCache Inheritance System.Object ListViewCache Namespace : CircularUI.Tizen Assembly : CircularUI.Tizen.dll Syntax public static class ListViewCache : object Properties InformalItemClass Declaration public static GenItemClass InformalItemClass { get; } Property Value Type Description GenItemClass PaddingItemClass Declaration public static GenItemClass PaddingItemClass { get; } Property Value Type Description GenItemClass Methods Get(Cell, Boolean) Declaration public static CellRenderer Get(Cell cell, bool IsGroupHeader = false) Parameters Type Name Description Cell cell System.Boolean IsGroupHeader Returns Type Description CellRenderer"
  },
  "api/CircularUI.IndexPage.html": {
    "href": "api/CircularUI.IndexPage.html",
    "title": "Class IndexPage",
    "keywords": "Class IndexPage The IndexPage is extension of Xamarin.Forms.MultiPage. When Page is added/removed at Multipage. circular index is added/removed automatically at the top of window. Inheritance System.Object IndexPage Namespace : CircularUI Assembly : CircularUI.dll Syntax public class IndexPage : MultiPage<ContentPage> Methods CreateDefault(Object) Declaration protected override ContentPage CreateDefault(object item) Parameters Type Name Description System.Object item Returns Type Description ContentPage"
  },
  "api/CircularUI.CircleToolbarItem.html": {
    "href": "api/CircularUI.CircleToolbarItem.html",
    "title": "Class CircleToolbarItem",
    "keywords": "Class CircleToolbarItem The CircleToolbarItem is a class that extends Xamarin.Forms.ToolbarItem for Circular UI. Inheritance System.Object CircleToolbarItem Namespace : CircularUI Assembly : CircularUI.dll Syntax public class CircleToolbarItem : ToolbarItem Fields SubTextProperty BindableProperty. Identifies the Subtext bindable property to display on the menu item. Declaration public static readonly BindableProperty SubTextProperty Field Value Type Description BindableProperty Properties SubText Gets or sets Subtext to display on the menu item Declaration public string SubText { get; set; } Property Value Type Description System.String"
  },
  "api/CircularUI.ContextPopup.html": {
    "href": "api/CircularUI.ContextPopup.html",
    "title": "Class ContextPopup",
    "keywords": "Class ContextPopup The ContextPopup class allows a contextual popup to be anchored at a view. Inheritance System.Object ContextPopup Namespace : CircularUI Assembly : CircularUI.dll Syntax public class ContextPopup : BindableObject Examples var popup = new ContextPopup(); var item1 = new ContextPopupItem(\"item 1\"); var item2 = new ContextPopupItem(\"item 2\"); popup.Items.Add(item1); popup.Items.Add(item2); popup.ItemSelected += (s, e) => { Console.WriteLine($\"{popup.SelectedItem?.Label} is selected\"); } Constructors ContextPopup() The constructor, which creates a new ContextPopup instance. Declaration public ContextPopup() Fields SelectedIndexProperty BindableProperty. Identifies the SelectedIndex bindable property. Declaration public static readonly BindableProperty SelectedIndexProperty Field Value Type Description BindableProperty SelectedItemProperty BindableProperty. Identifies the SelectedItem bindable property. Declaration public static readonly BindableProperty SelectedItemProperty Field Value Type Description BindableProperty Properties Items Gets the list of items in the ContextPopup. Declaration public IList<ContextPopupItem> Items { get; } Property Value Type Description IList < ContextPopupItem > SelectedIndex Gets or sets the index of the selected item of the ContextPopup. It is -1 when no item is selected. Declaration public int SelectedIndex { get; set; } Property Value Type Description System.Int32 SelectedItem Gets or sets the selected item of the ContextPopup. Declaration public ContextPopupItem SelectedItem { get; set; } Property Value Type Description ContextPopupItem Methods Dismiss() Dismisses the ContextPopup. Declaration public void Dismiss() Show(View) Shows the ContextPopup. The ContextPopup is positioned at the horizontal and the vertical position of a specific anchor. Declaration public void Show(View anchor) Parameters Type Name Description View anchor The view to which the popup should be anchored. Show(View, Double, Double) Shows the ContextPopup. The ContextPopup is positioned at the horizontal and the vertical position of a specific anchor with offsets. Declaration public void Show(View anchor, double xOffset, double yOffset) Parameters Type Name Description View anchor The view to which the popup should be anchored. System.Double xOffset The horizontal offset from the anchor. System.Double yOffset The vertical offset from the anchor. Show(View, Int32, Int32) Shows the ContextPopup. The ContextPopup is positioned at the horizontal and the vertical position of a specific anchor with offsets. Declaration public void Show(View anchor, int xOffset, int yOffset) Parameters Type Name Description View anchor The view to which the popup should be anchored. System.Int32 xOffset The horizontal offset from the anchor. System.Int32 yOffset The vertical offset from the anchor. Events Dismissed Occurs when the ContextPopup is dismissed. Declaration public event EventHandler Dismissed Event Type Type Description EventHandler ItemSelected Occurs when a ContextPopupItem is selected. Declaration public event EventHandler<SelectedItemChangedEventArgs> ItemSelected Event Type Type Description EventHandler < SelectedItemChangedEventArgs >"
  },
  "api/CircularUI.Tizen.PaddingItemClass.html": {
    "href": "api/CircularUI.Tizen.PaddingItemClass.html",
    "title": "Class PaddingItemClass",
    "keywords": "Class PaddingItemClass Inheritance System.Object PaddingItemClass Namespace : CircularUI.Tizen Assembly : CircularUI.Tizen.dll Syntax public class PaddingItemClass : GenItemClass Constructors PaddingItemClass() Declaration public PaddingItemClass()"
  },
  "api/CircularUI.Tizen.CircularUI.html": {
    "href": "api/CircularUI.Tizen.CircularUI.html",
    "title": "Class CircularUI",
    "keywords": "Class CircularUI Inheritance System.Object CircularUI Namespace : CircularUI.Tizen Assembly : CircularUI.Tizen.dll Syntax public static class CircularUI : object Properties IsInitialized Declaration public static bool IsInitialized { get; } Property Value Type Description System.Boolean Methods Init() Declaration public static void Init()"
  },
  "api/CircularUI.CheckDisplayStyle.html": {
    "href": "api/CircularUI.CheckDisplayStyle.html",
    "title": "Enum CheckDisplayStyle",
    "keywords": "Enum CheckDisplayStyle Enumeration for the style of the Check. Namespace : CircularUI Assembly : CircularUI.dll Syntax public enum CheckDisplayStyle : int Fields Name Description Default The default style is checkbox style. Onoff The toggle switch style. Small The small checkbox style. this style is only for circular devices"
  },
  "api/CircularUI.TwoButtonPage.html": {
    "href": "api/CircularUI.TwoButtonPage.html",
    "title": "Class TwoButtonPage",
    "keywords": "Class TwoButtonPage The TwoButtonPage is a page that has a rectangular area inside the circle as contents area. It also has two buttons and a Title area. Inheritance System.Object TwoButtonPage Namespace : CircularUI Assembly : CircularUI.dll Syntax public class TwoButtonPage : ContentPage Fields FirstButtonProperty BindableProperty. Identifies the FirstButton bindable property. Declaration public static readonly BindableProperty FirstButtonProperty Field Value Type Description BindableProperty SecondButtonProperty BindableProperty. Identifies the SecondButton bindable property. Declaration public static readonly BindableProperty SecondButtonProperty Field Value Type Description BindableProperty Properties FirstButton Gets or sets left button of TwoButtonPage Declaration public MenuItem FirstButton { get; set; } Property Value Type Description MenuItem SecondButton Gets or sets right button of TwoButtonPage Declaration public MenuItem SecondButton { get; set; } Property Value Type Description MenuItem"
  },
  "api/CircularUI.CircleScrollView.html": {
    "href": "api/CircularUI.CircleScrollView.html",
    "title": "Class CircleScrollView",
    "keywords": "Class CircleScrollView The CircleScrollView has circular scroll bar. it can be scrolled by bezel action. The CircleScrollView is extension of Xamarin.Forms.ScrollView. Inheritance System.Object CircleScrollView Implements IRotaryFocusable Namespace : CircularUI Assembly : CircularUI.dll Syntax public class CircleScrollView : ScrollView, IRotaryFocusable Implements IRotaryFocusable"
  },
  "api/CircularUI.ContextPopupItem.html": {
    "href": "api/CircularUI.ContextPopupItem.html",
    "title": "Class ContextPopupItem",
    "keywords": "Class ContextPopupItem The ContextPopupItem is a class to control items in a ContextPopup. Inheritance System.Object ContextPopupItem Namespace : CircularUI Assembly : CircularUI.dll Syntax public class ContextPopupItem : INotifyPropertyChanged Constructors ContextPopupItem(String) Creates a ContextPopupItem with only a label. Declaration public ContextPopupItem(string label) Parameters Type Name Description System.String label The label of the ContextPopupItem. Properties Label Gets or sets the label of a ContextPopupItem. Declaration public string Label { get; set; } Property Value Type Description System.String Methods OnPropertyChanged(String) Called when a bindable property has changed. Declaration protected virtual void OnPropertyChanged(string propertyName = null) Parameters Type Name Description System.String propertyName Events PropertyChanged Occurs when the label or an icon of a ContextPopupItem is changed. Declaration public event PropertyChangedEventHandler PropertyChanged Event Type Type Description PropertyChangedEventHandler"
  },
  "api/CircularUI.Tizen.TizenConfirmPopupEffect.html": {
    "href": "api/CircularUI.Tizen.TizenConfirmPopupEffect.html",
    "title": "Class TizenConfirmPopupEffect",
    "keywords": "Class TizenConfirmPopupEffect Inheritance System.Object TizenConfirmPopupEffect Namespace : CircularUI.Tizen Assembly : CircularUI.Tizen.dll Syntax public class TizenConfirmPopupEffect : PlatformEffect Methods OnAttached() Declaration protected override void OnAttached() OnDetached() Declaration protected override void OnDetached() OnElementPropertyChanged(PropertyChangedEventArgs) Declaration protected override void OnElementPropertyChanged(PropertyChangedEventArgs args) Parameters Type Name Description PropertyChangedEventArgs args"
  },
  "api/CircularUI.html": {
    "href": "api/CircularUI.html",
    "title": "Namespace CircularUI",
    "keywords": "Namespace CircularUI Classes ActionButtonItem The ActionButtonItem is a class that presents a menu item and associates it with a command Check The check widget allows for toggling a value between true and false. The check is extension of Xamarin.Forms.Switch. CircleDateTimeSelector The CircleDateTimeSelector is a view that can change the value by bezel action by touching each item of \"Year: Month: Day\" and \"Hour: Minute: AM / PM\" CircleListView The CircleListView is a view that represents Xamarin.Forms.ListView on Circular UI. You can move the list through bezel action. CirclePage The CirclePage is a ContentPage, which allows you to insert views that require CircleSurface, and you can show ToolbarItems with MoreOption. It has an ActionButton, and can use the MenuItem type as text, icon, command, and so on. CirclePageNotFoundException The CirclePageNotFoundException is an Exception class that occurs when a CircleSurface has no child. CircleProgressBarSurfaceItem The CircleProgressBarSurfaceItem displays circular progressbar at CirclePage. CircleScrollView The CircleScrollView has circular scroll bar. it can be scrolled by bezel action. The CircleScrollView is extension of Xamarin.Forms.ScrollView. CircleSliderSurfaceItem The CircleSliderSurfaceItem displays circular slider at CirclePage. CircleStackLayout CircleStepper The CircleStepper is a class that extends Xamarin.Forms.Stepper for Circular UI. CircleSurfaceItem The CircleSurfaceItem is a class that controls the items represented in the CircleSurface. CircleToolbarItem The CircleToolbarItem is a class that extends Xamarin.Forms.ToolbarItem for Circular UI. ConfirmationPopup The ConfirmationPopup describe pop-up which has circular two button, title, text, and content area. ConfirmPopupEffect The ConfirmPopupEffect is an effect that is proportional to a particular widget or has one or two buttons anywhere on the screen ContextPopup The ContextPopup class allows a contextual popup to be anchored at a view. ContextPopupItem The ContextPopupItem is a class to control items in a ContextPopup. IndexPage The IndexPage is extension of Xamarin.Forms.MultiPage. When Page is added/removed at Multipage. circular index is added/removed automatically at the top of window. InformationPopup Radio The Radio is a widget that allows one or more options to be displayed and have the user choose only one of them. RotaryEventArgs Event arguments for RotaryEvent. SelectedEventArgs Event arguments for events of RadioButton. Toast The Toast class provides properties that show simple types of messages TwoButtonPage The TwoButtonPage is a page that has a rectangular area inside the circle as contents area. It also has two buttons and a Title area. Interfaces ICircleSurfaceItem The ICircleSurfaceItem is an interface that controls the items represented in the CircleSurface. IRotaryEventReceiver The IRotaryEventReceiver is a receiver interface to take Rotary Events IRotaryFocusable The IRotaryFocusable is an interface to take a Rotary Event Enums CheckDisplayStyle Enumeration for the style of the Check. DateTimeType Enumeration for style type of CircleDateTimeSelector PositionOption Enumeration for position type of popup Delegates RotaryEventHandler Delegate for a triggering rotary event"
  },
  "api/CircularUI.ActionButtonItem.html": {
    "href": "api/CircularUI.ActionButtonItem.html",
    "title": "Class ActionButtonItem",
    "keywords": "Class ActionButtonItem The ActionButtonItem is a class that presents a menu item and associates it with a command Inheritance System.Object ActionButtonItem Namespace : CircularUI Assembly : CircularUI.dll Syntax public class ActionButtonItem : MenuItem Fields IsEnableProperty BindableProperty. Identifies the IsEnable bindable property. Declaration public static BindableProperty IsEnableProperty Field Value Type Description BindableProperty IsVisibleProperty BindableProperty. Identifies the IsVisible bindable property. Declaration public static BindableProperty IsVisibleProperty Field Value Type Description BindableProperty Properties IsEnable Gets or sets a boolean value that indicates whether this ActionButtonItem is enabled. Declaration public bool IsEnable { get; set; } Property Value Type Description System.Boolean IsVisible Gets or sets a boolean value that indicates whether this ActionButtonItem is visible. Declaration public bool IsVisible { get; set; } Property Value Type Description System.Boolean"
  },
  "api/CircularUI.Tizen.Watchface.html": {
    "href": "api/CircularUI.Tizen.Watchface.html",
    "title": "Namespace CircularUI.Tizen.Watchface",
    "keywords": "Namespace CircularUI.Tizen.Watchface Classes FormsWatchface"
  },
  "api/CircularUI.RotaryEventArgs.html": {
    "href": "api/CircularUI.RotaryEventArgs.html",
    "title": "Class RotaryEventArgs",
    "keywords": "Class RotaryEventArgs Event arguments for RotaryEvent. Inheritance System.Object RotaryEventArgs Namespace : CircularUI Assembly : CircularUI.dll Syntax public class RotaryEventArgs : EventArgs Properties IsClockwise Gets or sets rotated direction of Rotary device. IsClockwise is true when Rotary device rotated in the clockwise direction or false on counter clockwise. Declaration public bool IsClockwise { get; set; } Property Value Type Description System.Boolean"
  },
  "api/CircularUI.Tizen.TwoButtonPageRenderer.html": {
    "href": "api/CircularUI.Tizen.TwoButtonPageRenderer.html",
    "title": "Class TwoButtonPageRenderer",
    "keywords": "Class TwoButtonPageRenderer Inheritance System.Object TwoButtonPageRenderer Namespace : CircularUI.Tizen Assembly : CircularUI.Tizen.dll Syntax public class TwoButtonPageRenderer : VisualElementRenderer<TwoButtonPage> Constructors TwoButtonPageRenderer() Declaration public TwoButtonPageRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing GetNativeContentGeometry() Declaration public override Rect GetNativeContentGeometry() Returns Type Description Rect OnElementChanged(ElementChangedEventArgs<TwoButtonPage>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<TwoButtonPage> e) Parameters Type Name Description ElementChangedEventArgs < TwoButtonPage > e UpdateBackgroundColor(Boolean) Declaration protected override void UpdateBackgroundColor(bool initialize) Parameters Type Name Description System.Boolean initialize UpdateLayout() Declaration protected override void UpdateLayout()"
  },
  "api/CircularUI.Tizen.CircleSliderSurfaceItemImplements.html": {
    "href": "api/CircularUI.Tizen.CircleSliderSurfaceItemImplements.html",
    "title": "Class CircleSliderSurfaceItemImplements",
    "keywords": "Class CircleSliderSurfaceItemImplements Inheritance System.Object CircleSliderSurfaceItemImplements Namespace : CircularUI.Tizen Assembly : CircularUI.Tizen.dll Syntax public class CircleSliderSurfaceItemImplements : ElmSharp.Wearable.CircleSlider Constructors CircleSliderSurfaceItemImplements(CircleSliderSurfaceItem, EvasObject, CircleSurface) Declaration public CircleSliderSurfaceItemImplements(CircleSliderSurfaceItem item, EvasObject parent, CircleSurface surface) Parameters Type Name Description CircleSliderSurfaceItem item EvasObject parent CircleSurface surface"
  },
  "api/CircularUI.DateTimeType.html": {
    "href": "api/CircularUI.DateTimeType.html",
    "title": "Enum DateTimeType",
    "keywords": "Enum DateTimeType Enumeration for style type of CircleDateTimeSelector Namespace : CircularUI Assembly : CircularUI.dll Syntax public enum DateTimeType : int Fields Name Description Date Style type of \"datepicker/circle\" Time Style type of \"timepicker/circle\""
  },
  "api/CircularUI.PositionOption.html": {
    "href": "api/CircularUI.PositionOption.html",
    "title": "Enum PositionOption",
    "keywords": "Enum PositionOption Enumeration for position type of popup Namespace : CircularUI Assembly : CircularUI.dll Syntax public enum PositionOption : int Fields Name Description Absolute The value of Offset is X, Y and popup is placed on the screen. BottomOfView The popup appears at the bottom of the View using the Effect. The position is changed by Offset in the center of View. CenterOfParent In the center of the screen, move by the Offset in the Popup. Relative Set Offset.X * Window.Width, Offset.Y * Window.Height."
  },
  "api/CircularUI.Tizen.CircleStepperRenderer.html": {
    "href": "api/CircularUI.Tizen.CircleStepperRenderer.html",
    "title": "Class CircleStepperRenderer",
    "keywords": "Class CircleStepperRenderer Inheritance System.Object CircleStepperRenderer Namespace : CircularUI.Tizen Assembly : CircularUI.Tizen.dll Syntax public class CircleStepperRenderer : ViewRenderer<CircleStepper, ElmSharp.Wearable.CircleSpinner> Constructors CircleStepperRenderer() Declaration public CircleStepperRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Measure(Int32, Int32) Declaration protected override ElmSharp.Size Measure(int availableWidth, int availableHeight) Parameters Type Name Description System.Int32 availableWidth System.Int32 availableHeight Returns Type Description ElmSharp.Size MinimumSize() Declaration protected override Size MinimumSize() Returns Type Description Size OnElementChanged(ElementChangedEventArgs<CircleStepper>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<CircleStepper> e) Parameters Type Name Description ElementChangedEventArgs < CircleStepper > e"
  },
  "api/CircularUI.CircleDateTimeSelector.html": {
    "href": "api/CircularUI.CircleDateTimeSelector.html",
    "title": "Class CircleDateTimeSelector",
    "keywords": "Class CircleDateTimeSelector The CircleDateTimeSelector is a view that can change the value by bezel action by touching each item of \"Year: Month: Day\" and \"Hour: Minute: AM / PM\" Inheritance System.Object CircleDateTimeSelector Implements IRotaryFocusable Namespace : CircularUI Assembly : CircularUI.dll Syntax public class CircleDateTimeSelector : Xamarin.Forms.View, IRotaryFocusable Fields DateTimeProperty BindableProperty. Identifies the DateTime bindable property. Declaration public static readonly BindableProperty DateTimeProperty Field Value Type Description BindableProperty IsVisibleOfAmPmProperty BindableProperty. Identifies the IsVisibleOfAmPm bindable property. Declaration public static BindableProperty IsVisibleOfAmPmProperty Field Value Type Description BindableProperty IsVisibleOfDateProperty BindableProperty. Identifies the IsVisibleOfDate bindable property. Declaration public static BindableProperty IsVisibleOfDateProperty Field Value Type Description BindableProperty IsVisibleOfHourProperty BindableProperty. Identifies the IsVisibleOfHour bindable property. Declaration public static BindableProperty IsVisibleOfHourProperty Field Value Type Description BindableProperty IsVisibleOfMinuteProperty BindableProperty. Identifies the IsVisibleOfMinute bindable property. Declaration public static BindableProperty IsVisibleOfMinuteProperty Field Value Type Description BindableProperty IsVisibleOfMonthProperty BindableProperty. Identifies the IsVisibleOfMonth bindable property. Declaration public static BindableProperty IsVisibleOfMonthProperty Field Value Type Description BindableProperty IsVisibleOfYearProperty BindableProperty. Identifies the IsVisibleOfYear bindable property. Declaration public static BindableProperty IsVisibleOfYearProperty Field Value Type Description BindableProperty MarkerColorProperty BindableProperty. Identifies the MarkerColor bindable property. Declaration public static readonly BindableProperty MarkerColorProperty Field Value Type Description BindableProperty MaximumDateProperty BindableProperty. Identifies the MaximumDate bindable property. Declaration public static readonly BindableProperty MaximumDateProperty Field Value Type Description BindableProperty MinimumDateProperty BindableProperty. Identifies the MinimumDate bindable property. Declaration public static readonly BindableProperty MinimumDateProperty Field Value Type Description BindableProperty ValueTypeProperty BindableProperty. Identifies the ValueType bindable property. Declaration public static readonly BindableProperty ValueTypeProperty Field Value Type Description BindableProperty Properties DateTime Gets or sets the date / time. Declaration public DateTime DateTime { get; set; } Property Value Type Description DateTime IsVisibleOfAmPm Gets or sets a boolean value that indicates whether the AmPm field type is visible. Declaration public bool IsVisibleOfAmPm { get; set; } Property Value Type Description System.Boolean IsVisibleOfDate Gets or sets a boolean value that indicates whether the date field type is visible. Declaration public bool IsVisibleOfDate { get; set; } Property Value Type Description System.Boolean IsVisibleOfHour Gets or sets a boolean value that indicates whether the hour field type is visible. Declaration public bool IsVisibleOfHour { get; set; } Property Value Type Description System.Boolean IsVisibleOfMinute Gets or sets a boolean value that indicates whether the minute field type is visible. Declaration public bool IsVisibleOfMinute { get; set; } Property Value Type Description System.Boolean IsVisibleOfMonth Gets or sets a boolean value that indicates whether the month field type is visible. Declaration public bool IsVisibleOfMonth { get; set; } Property Value Type Description System.Boolean IsVisibleOfYear Gets or sets a boolean value that indicates whether the year field type is visible. Declaration public bool IsVisibleOfYear { get; set; } Property Value Type Description System.Boolean MarkerColor Gets or sets Marker color Declaration public Color MarkerColor { get; set; } Property Value Type Description Color MaximumDate Gets or sets the maximum date when ValueType is Date. Declaration public DateTime MaximumDate { get; set; } Property Value Type Description DateTime MinimumDate Gets or sets the minimum date when ValueType is Date. Declaration public DateTime MinimumDate { get; set; } Property Value Type Description DateTime ValueType Gets or sets DateTimeType value. If it is Time, the UI will be changed to enable time selection. If it is a Date, the date can be changed. Declaration public DateTimeType ValueType { get; set; } Property Value Type Description DateTimeType Implements IRotaryFocusable"
  },
  "api/CircularUI.RotaryEventHandler.html": {
    "href": "api/CircularUI.RotaryEventHandler.html",
    "title": "Delegate RotaryEventHandler",
    "keywords": "Delegate RotaryEventHandler Delegate for a triggering rotary event Namespace : CircularUI Assembly : CircularUI.dll Syntax public delegate void RotaryEventHandler(RotaryEventArgs args); Parameters Type Name Description RotaryEventArgs args Rotated direction of Rotary device"
  },
  "api/CircularUI.Tizen.CirclePageRenderer.html": {
    "href": "api/CircularUI.Tizen.CirclePageRenderer.html",
    "title": "Class CirclePageRenderer",
    "keywords": "Class CirclePageRenderer Inheritance System.Object CirclePageRenderer Namespace : CircularUI.Tizen Assembly : CircularUI.Tizen.dll Syntax public class CirclePageRenderer : VisualElementRenderer<CirclePage> Constructors CirclePageRenderer() Declaration public CirclePageRenderer() Properties CircleSurface Declaration public ElmSharp.Wearable.CircleSurface CircleSurface { get; } Property Value Type Description ElmSharp.Wearable.CircleSurface Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing OnElementChanged(ElementChangedEventArgs<CirclePage>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<CirclePage> e) Parameters Type Name Description ElementChangedEventArgs < CirclePage > e UpdateBackgroundColor(Boolean) Declaration protected override void UpdateBackgroundColor(bool initialize) Parameters Type Name Description System.Boolean initialize UpdateBackgroundImage(Boolean) Declaration protected void UpdateBackgroundImage(bool initialize) Parameters Type Name Description System.Boolean initialize"
  },
  "api/CircularUI.Radio.html": {
    "href": "api/CircularUI.Radio.html",
    "title": "Class Radio",
    "keywords": "Class Radio The Radio is a widget that allows one or more options to be displayed and have the user choose only one of them. Inheritance System.Object Radio Namespace : CircularUI Assembly : CircularUI.dll Syntax public class Radio : View Examples var radio1 = new Radio { GroupName = \"SoundMode\", IsSelected = true, Value = \"sound\" } var radio2 = new Radio { GroupName = \"SoundMode\", IsSelected = false, Value = \"vibrate\" } radio1.Selected += (s,e) => { Console.WriteLine($\"radio1 selected! value:{e.Value}\"); }; radio2.Selected += (s,e) => { Console.WriteLine($\"radio2 selected! value:{e.Value}\"); }; Fields GroupNameProperty BindableProperty. Identifies the GroupName bindable property. Declaration public static readonly BindableProperty GroupNameProperty Field Value Type Description BindableProperty IsSelectedProperty BindableProperty. Identifies the IsSelected bindable property. Declaration public static readonly BindableProperty IsSelectedProperty Field Value Type Description BindableProperty ValueProperty BindableProperty. Identifies the Value bindable property. Declaration public static readonly BindableProperty ValueProperty Field Value Type Description BindableProperty Properties GroupName Gets or sets the name that specifies which Radio controls are mutually exclusive. It can be set to null. Declaration public string GroupName { get; set; } Property Value Type Description System.String IsSelected Gets or sets a boolean value that indicates whether this Radio is selected. Declaration public bool IsSelected { get; set; } Property Value Type Description System.Boolean Value Gets or sets the value of the Radio. This is a bindable property. Declaration public string Value { get; set; } Property Value Type Description System.String Events Selected Occurs when the Radio selection was changed. Declaration public event EventHandler<SelectedEventArgs> Selected Event Type Type Description EventHandler < SelectedEventArgs >"
  },
  "api/CircularUI.CircleListView.html": {
    "href": "api/CircularUI.CircleListView.html",
    "title": "Class CircleListView",
    "keywords": "Class CircleListView The CircleListView is a view that represents Xamarin.Forms.ListView on Circular UI. You can move the list through bezel action. Inheritance System.Object CircleListView Implements IRotaryFocusable Namespace : CircularUI Assembly : CircularUI.dll Syntax public class CircleListView : ListView, IRotaryFocusable Implements IRotaryFocusable"
  },
  "api/CircularUI.CircleStepper.html": {
    "href": "api/CircularUI.CircleStepper.html",
    "title": "Class CircleStepper",
    "keywords": "Class CircleStepper The CircleStepper is a class that extends Xamarin.Forms.Stepper for Circular UI. Inheritance System.Object CircleStepper Implements IRotaryFocusable Namespace : CircularUI Assembly : CircularUI.dll Syntax public class CircleStepper : Xamarin.Forms.Stepper, IRotaryFocusable Fields LabelFormatProperty BindableProperty. Identifies the LabelFormat bindable property. Declaration public static readonly BindableProperty LabelFormatProperty Field Value Type Description BindableProperty MarkerColorProperty BindableProperty. Identifies the MarkerColor bindable property. Declaration public static readonly BindableProperty MarkerColorProperty Field Value Type Description BindableProperty MarkerLineWidthProperty BindableProperty. Identifies the MarkerLineWidth bindable property. Declaration public static readonly BindableProperty MarkerLineWidthProperty Field Value Type Description BindableProperty Properties LabelFormat Gets or sets format in which Value is shown Declaration public string LabelFormat { get; set; } Property Value Type Description System.String MarkerColor Gets or sets Marker color Declaration public Color MarkerColor { get; set; } Property Value Type Description Color MarkerLineWidth Gets or sets length of Marker Declaration public int MarkerLineWidth { get; set; } Property Value Type Description System.Int32 Implements IRotaryFocusable"
  },
  "api/CircularUI.SelectedEventArgs.html": {
    "href": "api/CircularUI.SelectedEventArgs.html",
    "title": "Class SelectedEventArgs",
    "keywords": "Class SelectedEventArgs Event arguments for events of RadioButton. Inheritance System.Object SelectedEventArgs Namespace : CircularUI Assembly : CircularUI.dll Syntax public class SelectedEventArgs : EventArgs Constructors SelectedEventArgs(Boolean) Creates a new SelectedEventArgs object that represents a change from RadioButton. Declaration public SelectedEventArgs(bool value) Parameters Type Name Description System.Boolean value The boolean value that checks whether the RadioButton is selected. Properties Value Gets the value object for the SelectedEventArgs object. Declaration public bool Value { get; } Property Value Type Description System.Boolean"
  },
  "api/CircularUI.InformationPopup.html": {
    "href": "api/CircularUI.InformationPopup.html",
    "title": "Class InformationPopup",
    "keywords": "Class InformationPopup Inheritance System.Object InformationPopup Namespace : CircularUI Assembly : CircularUI.dll Syntax public class InformationPopup : BindableObject Constructors InformationPopup() Declaration public InformationPopup() Fields BottomButtonProperty BindableProperty. Identifies the first button bindable property. Declaration public static readonly BindableProperty BottomButtonProperty Field Value Type Description BindableProperty IsProgressRunningProperty BindableProperty. Identifies the IsProgressRunning bindable property. Declaration public static readonly BindableProperty IsProgressRunningProperty Field Value Type Description BindableProperty TextProperty BindableProperty. Identifies the title bindable property. Declaration public static readonly BindableProperty TextProperty Field Value Type Description BindableProperty TitleProperty BindableProperty. Identifies the title bindable property. Declaration public static readonly BindableProperty TitleProperty Field Value Type Description BindableProperty Properties BottomButton Gets or sets bottom button of the Popup. Declaration public MenuItem BottomButton { get; set; } Property Value Type Description MenuItem IsProgressRunning Gets or sets progress visibility of the Popup. If this value is true. Popup displays circular progress and hides Title automatically. Declaration public bool IsProgressRunning { get; set; } Property Value Type Description System.Boolean Text Gets or sets text of the Popup. Declaration public string Text { get; set; } Property Value Type Description System.String Title Gets or sets title of the Popup. Declaration public string Title { get; set; } Property Value Type Description System.String Methods Dismiss() Dismisses the ConfirmationPopup. Declaration public void Dismiss() Show() Shows the Popup. Declaration public void Show() Events BackButtonPressed Occurs when the device's back button is pressed. Declaration public event EventHandler BackButtonPressed Event Type Type Description EventHandler"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Tizen CircularUI",
    "keywords": "Tizen CircularUI This document is the API Specification for the Tizen CircularUI. Namespace Description CircularUI Provide the classes for the Circular screen with Tizen wearable devices. CircularUI.Tizen Contains the renderer classes on tizen platform for CircularUI. CircularUI.Tizen.Watchface Provide the classes for creating the Watchface on Tizen wearable devices."
  },
  "api/CircularUI.ConfirmPopupEffect.html": {
    "href": "api/CircularUI.ConfirmPopupEffect.html",
    "title": "Class ConfirmPopupEffect",
    "keywords": "Class ConfirmPopupEffect The ConfirmPopupEffect is an effect that is proportional to a particular widget or has one or two buttons anywhere on the screen Inheritance System.Object ConfirmPopupEffect Namespace : CircularUI Assembly : CircularUI.dll Syntax public class ConfirmPopupEffect : RoutingEffect Constructors ConfirmPopupEffect() Creates and initializes a new instance of the ConfirmPopupEffect class Declaration public ConfirmPopupEffect() Fields AcceptCommandParameterProperty BindableProperty. Identifies the AcceptCommandParameter bindable property. Declaration public static BindableProperty AcceptCommandParameterProperty Field Value Type Description BindableProperty AcceptCommandProperty BindableProperty. Identifies the AcceptCommand bindable property. AcceptCommand is executed when the Accept button is pressed. Declaration public static BindableProperty AcceptCommandProperty Field Value Type Description BindableProperty AcceptTextProperty BindableProperty. Identifies the AcceptText bindable property. AcceptText is to use as Accept button Declaration public static BindableProperty AcceptTextProperty Field Value Type Description BindableProperty CancelCommandParameterProperty BindableProperty. Identifies the CancelCommandParameter bindable property. Declaration public static BindableProperty CancelCommandParameterProperty Field Value Type Description BindableProperty CancelCommandProperty BindableProperty. Identifies the CancelCommand bindable property. CancelCommand is executed when the Cancel button is pressed, even if the popup disappears by selecting outside the popup. Declaration public static BindableProperty CancelCommandProperty Field Value Type Description BindableProperty CancelTextProperty BindableProperty. Identifies the CancelText bindable property. CancelText is to use as Cancel button Declaration public static BindableProperty CancelTextProperty Field Value Type Description BindableProperty ConfirmVisibilityProperty BindableProperty. Identifies the ConfirmVisibility bindable property. Popup appears if ConfirmVisibility is True, and disappears when it becomes False. CancelCommand works even if it disappears to False. Declaration public static BindableProperty ConfirmVisibilityProperty Field Value Type Description BindableProperty OffsetProperty BindableProperty. Identifies the Offset bindable property. Offset is a value of how far to move from the base tap position represented by the PositionOption type. If it isn't set, it returns 0,0. Declaration public static BindableProperty OffsetProperty Field Value Type Description BindableProperty PositionOptionProperty BindableProperty. Identifies the PositionOption bindable property. Declaration public static BindableProperty PositionOptionProperty Field Value Type Description BindableProperty Methods GetAcceptCommand(BindableObject) Gets command that is executed when the Accept button is pressed. Declaration public static ICommand GetAcceptCommand(BindableObject obj) Parameters Type Name Description BindableObject obj Binded object Returns Type Description ICommand Command of Accept button GetAcceptCommandParameter(BindableObject) Gets command paramter that is executed when the Accept button is pressed. Declaration public static object GetAcceptCommandParameter(BindableObject obj) Parameters Type Name Description BindableObject obj Binded object Returns Type Description System.Object Command parameter of Accept button GetAcceptText(BindableObject) Gets text of Accept button Declaration public static string GetAcceptText(BindableObject obj) Parameters Type Name Description BindableObject obj Binded object Returns Type Description System.String Text of Accept button GetCancelCommand(BindableObject) Gets command that is executed when the Cancel button is pressed, even if the popup disappears by selecting outside the popup. Declaration public static ICommand GetCancelCommand(BindableObject obj) Parameters Type Name Description BindableObject obj Binded object Returns Type Description ICommand Command of Cancel button GetCancelCommandParameter(BindableObject) Gets command paramter that is executed when the Cancel button is pressed, even if the popup disappears by selecting outside the popup. Declaration public static object GetCancelCommandParameter(BindableObject obj) Parameters Type Name Description BindableObject obj Binded object Returns Type Description System.Object Command parameter of Cancel button GetCancelText(BindableObject) Gets text of Cancel button Declaration public static string GetCancelText(BindableObject obj) Parameters Type Name Description BindableObject obj Binded object Returns Type Description System.String Text of Cancel button GetConfirmVisibility(BindableObject) Gets visibility of Confirmation popup. Popup appears if ConfirmVisibility is True, and disappears when it becomes False. CancelCommand works even if it disappears to False. Declaration public static bool GetConfirmVisibility(BindableObject obj) Parameters Type Name Description BindableObject obj Binded object Returns Type Description System.Boolean Visibility of Confirmation popup GetOffset(BindableObject) Gets offset. Offset is a value of how far to move from the base tap position represented by the PositionOption type. If it isn't set, it returns 0,0. Declaration public static Point GetOffset(BindableObject obj) Parameters Type Name Description BindableObject obj Binded object Returns Type Description Point A value of how far to move from the base tap position represented by the PositionOption type GetPositionOption(BindableObject) Gets position type of popup Declaration public static PositionOption GetPositionOption(BindableObject obj) Parameters Type Name Description BindableObject obj Binded object Returns Type Description PositionOption Position type of popup SetAcceptCommand(BindableObject, ICommand) Sets command that is executed when the Accept button is pressed. Declaration public static void SetAcceptCommand(BindableObject obj, ICommand value) Parameters Type Name Description BindableObject obj Binded object ICommand value Command of Accept button SetAcceptCommandParameter(BindableObject, Object) Sets command parameter that is executed when the Accept button is pressed. Declaration public static void SetAcceptCommandParameter(BindableObject obj, object value) Parameters Type Name Description BindableObject obj Binded object System.Object value Command parameter of Accept button SetAcceptText(BindableObject, String) Sets text of Accept button Declaration public static void SetAcceptText(BindableObject obj, string value) Parameters Type Name Description BindableObject obj Binded object System.String value Text of Accept button SetCancelCommand(BindableObject, ICommand) Sets command that is executed when the Cancel button is pressed, even if the popup disappears by selecting outside the popup. Declaration public static void SetCancelCommand(BindableObject obj, ICommand value) Parameters Type Name Description BindableObject obj Binded object ICommand value Command of Cancel button SetCancelCommandParameter(BindableObject, Object) Sets command paramter that is executed when the Cancel button is pressed, even if the popup disappears by selecting outside the popup. Declaration public static void SetCancelCommandParameter(BindableObject obj, object value) Parameters Type Name Description BindableObject obj Binded object System.Object value Command parameter of Cancel button SetCancelText(BindableObject, String) Sets text of Cancel button Declaration public static void SetCancelText(BindableObject obj, string value) Parameters Type Name Description BindableObject obj Binded object System.String value Text of Cancel button SetConfirmVisibility(BindableObject, Boolean) Sets visibility of Confirmation popup. Popup appears if ConfirmVisibility is True, and disappears when it becomes False. CancelCommand works even if it disappears to False. Declaration public static void SetConfirmVisibility(BindableObject obj, bool value) Parameters Type Name Description BindableObject obj Binded object System.Boolean value Visibility of Confirmation popup SetOffset(BindableObject, Point) Sets offset. Offset is a value of how far to move from the base tap position represented by the PositionOption type. Declaration public static void SetOffset(BindableObject obj, Point value) Parameters Type Name Description BindableObject obj Binded object Point value A value of how far to move from the base tap position represented by the PositionOption type SetPositionOption(BindableObject, PositionOption) Sets position type of popup Declaration public static void SetPositionOption(BindableObject obj, PositionOption value) Parameters Type Name Description BindableObject obj Binded object PositionOption value Position type of popup"
  }
}